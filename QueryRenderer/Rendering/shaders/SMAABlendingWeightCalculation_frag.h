/**
 * Copyright (C) 2013 Jorge Jimenez (jorge@iryoku.com)
 * Copyright (C) 2013 Jose I. Echevarria (joseignacioechevarria@gmail.com)
 * Copyright (C) 2013 Belen Masia (bmasia@unizar.es)
 * Copyright (C) 2013 Fernando Navarro (fernandn@microsoft.com)
 * Copyright (C) 2013 Diego Gutierrez (diegog@unizar.es)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to
 * do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software. As clarification, there
 * is no requirement that the copyright notice and permission be included in
 * binary distributions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef SMAABLENDINGWEIGHTCALCULATION_FRAG_H_
#define SMAABLENDINGWEIGHTCALCULATION_FRAG_H_

#include <string>

namespace QueryRenderer {
struct SMAABlendingWeightCalculation_frag {
  static const std::string source;
};

const std::string SMAABlendingWeightCalculation_frag::source =
    "#version 450 core\n"
    "\n"
    "/**\n"
    " * Blend Weight Calculation Vertex Shader\n"
    " */\n"
    "\n"
    "#define saturate(a) clamp(a, 0.0, 1.0)\n"
    "\n"
    "#if defined(SMAA_PRESET_LOW)\n"
    "#define SMAA_MAX_SEARCH_STEPS 4\n"
    "#define SMAA_DISABLE_DIAG_DETECTION\n"
    "#elif defined(SMAA_PRESET_MEDIUM)\n"
    "#define SMAA_MAX_SEARCH_STEPS 8\n"
    "#define SMAA_DISABLE_DIAG_DETECTION\n"
    "#elif defined(SMAA_PRESET_HIGH)\n"
    "#define SMAA_MAX_SEARCH_STEPS 16\n"
    "#define SMAA_MAX_SEARCH_STEPS_DIAG 8\n"
    "#define SMAA_CORNER_ROUNDING 25\n"
    "#elif defined(SMAA_PRESET_ULTRA)\n"
    "#define SMAA_MAX_SEARCH_STEPS 32\n"
    "#define SMAA_MAX_SEARCH_STEPS_DIAG 16\n"
    "#define SMAA_CORNER_ROUNDING 25\n"
    "#endif\n"
    "\n"
    "/**\n"
    " * SMAA_CORNER_ROUNDING specifies how much sharp corners will be rounded.\n"
    " *\n"
    " * Range: [0, 100]\n"
    " *\n"
    " * Define SMAA_DISABLE_CORNER_DETECTION to disable corner processing.\n"
    " */\n"
    "#ifndef SMAA_CORNER_ROUNDING\n"
    "#define SMAA_CORNER_ROUNDING 25\n"
    "#endif\n"
    "\n"
    "//-----------------------------------------------------------------------------\n"
    "// Non-Configurable Defines\n"
    "\n"
    "#define SMAA_AREATEX_MAX_DISTANCE 16\n"
    "#define SMAA_AREATEX_MAX_DISTANCE_DIAG 20\n"
    "#define SMAA_AREATEX_PIXEL_SIZE (1.0 / vec2(160.0, 560.0))\n"
    "#define SMAA_AREATEX_SUBTEX_SIZE (1.0 / 7.0)\n"
    "#define SMAA_SEARCHTEX_SIZE vec2(66.0, 33.0)\n"
    "#define SMAA_SEARCHTEX_PACKED_SIZE vec2(64.0, 16.0)\n"
    "#define SMAA_CORNER_ROUNDING_NORM (float(SMAA_CORNER_ROUNDING) / 100.0)\n"
    "\n"
    "//-----------------------------------------------------------------------------\n"
    "// Texture Access Defines\n"
    "\n"
    "\n"
    "//-----------------------------------------------------------------------------\n"
    "// Global Uniforms\n"
    "\n"
    "uniform vec4 SMAA_RT_METRICS;\n"
    "uniform vec4 FULL_SMAA_RT_METRICS;\n"
    "\n"
    "/**\n"
    " * Conditional move:\n"
    " */\n"
    "void SMAAMovc(bvec2 cond, inout vec2 variable, vec2 value) {\n"
    "    if (cond.x) variable.x = value.x;\n"
    "    if (cond.y) variable.y = value.y;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------\n"
    "// Diagonal Search Functions\n"
    "\n"
    "#if !defined(SMAA_DISABLE_DIAG_DETECTION)\n"
    "\n"
    "/**\n"
    " * Allows to decode two binary values from a bilinear-filtered access.\n"
    " */\n"
    "vec2 SMAADecodeDiagBilinearAccess(vec2 e) {\n"
    "    // Bilinear access for fetching 'e' have a 0.25 offset, and we are\n"
    "    // interested in the R and G edges:\n"
    "    //\n"
    "    // +---G---+-------+\n"
    "    // |   x o R   x   |\n"
    "    // +-------+-------+\n"
    "    //\n"
    "    // Then, if one of these edge is enabled:\n"
    "    //   Red:   (0.75 * X + 0.25 * 1) => 0.25 or 1.0\n"
    "    //   Green: (0.75 * 1 + 0.25 * X) => 0.75 or 1.0\n"
    "    //\n"
    "    // This function will unpack the values (mad + mul + round):\n"
    "    // wolframalpha.com: round(x * abs(5 * x - 5 * 0.75)) plot 0 to 1\n"
    "    e.r = e.r * abs(5.0 * e.r - 5.0 * 0.75);\n"
    "    return round(e);\n"
    "}\n"
    "\n"
    "vec4 SMAADecodeDiagBilinearAccess(vec4 e) {\n"
    "    e.rb = e.rb * abs(5.0 * e.rb - 5.0 * 0.75);\n"
    "    return round(e);\n"
    "}\n"
    "\n"
    "/**\n"
    " * These functions allows to perform diagonal pattern searches.\n"
    " */\n"
    "vec2 SMAASearchDiag1(sampler2D edgesTex, vec2 texcoord, vec2 dir, out vec2 e) {\n"
    "    vec4 coord = vec4(texcoord, -1.0, 1.0);\n"
    "    vec3 t = vec3(FULL_SMAA_RT_METRICS.xy, 1.0);\n"
    "    while (coord.z < float(SMAA_MAX_SEARCH_STEPS_DIAG - 1) &&\n"
    "           coord.w > 0.9) {\n"
    "        coord.xyz = fma(t, vec3(dir, 1.0), coord.xyz);\n"
    "        e = textureLod(edgesTex, coord.xy, 0.0).rg;\n"
    "        coord.w = dot(e, vec2(0.5, 0.5));\n"
    "    }\n"
    "    return coord.zw;\n"
    "}\n"
    "\n"
    "vec2 SMAASearchDiag2(sampler2D edgesTex, vec2 texcoord, vec2 dir, out vec2 e) {\n"
    "    vec4 coord = vec4(texcoord, -1.0, 1.0);\n"
    "    coord.x += 0.25 * FULL_SMAA_RT_METRICS.x; // See @SearchDiag2Optimization\n"
    "    vec3 t = vec3(FULL_SMAA_RT_METRICS.xy, 1.0);\n"
    "    while (coord.z < float(SMAA_MAX_SEARCH_STEPS_DIAG - 1) &&\n"
    "           coord.w > 0.9) {\n"
    "        coord.xyz = fma(t, vec3(dir, 1.0), coord.xyz);\n"
    "\n"
    "        // @SearchDiag2Optimization\n"
    "        // Fetch both edges at once using bilinear filtering:\n"
    "        e = textureLod(edgesTex, coord.xy, 0.0).rg;\n"
    "        e = SMAADecodeDiagBilinearAccess(e);\n"
    "\n"
    "        // Non-optimized version:\n"
    "        // e.g = textureLod(edgesTex, coord.xy, 0.0).g;\n"
    "        // e.r = textureLodOffset(edgesTex, coord.xy, 0.0, ivec2(1, 0)).r;\n"
    "\n"
    "        coord.w = dot(e, vec2(0.5, 0.5));\n"
    "    }\n"
    "    return coord.zw;\n"
    "}\n"
    "\n"
    "/**\n"
    " * Similar to SMAAArea, this calculates the area corresponding to a certain\n"
    " * diagonal distance and crossing edges 'e'.\n"
    " */\n"
    "vec2 SMAAAreaDiag(sampler2D areaTex, vec2 dist, vec2 e, float offset) {\n"
    "    vec2 texcoord = fma(vec2(SMAA_AREATEX_MAX_DISTANCE_DIAG, SMAA_AREATEX_MAX_DISTANCE_DIAG), e, dist);\n"
    "\n"
    "    // We do a scale and bias for mapping to texel space:\n"
    "    texcoord = fma(SMAA_AREATEX_PIXEL_SIZE, texcoord, 0.5 * SMAA_AREATEX_PIXEL_SIZE);\n"
    "\n"
    "    // Diagonal areas are on the second half of the texture:\n"
    "    texcoord.x += 0.5;\n"
    "\n"
    "    // Move to proper place, according to the subpixel offset:\n"
    "    texcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;\n"
    "\n"
    "    // Do it!\n"
    "    return textureLod(areaTex, texcoord, 0.0).rg;\n"
    "}\n"
    "\n"
    "/**\n"
    " * This searches for diagonal patterns and returns the corresponding weights.\n"
    " */\n"
    "vec2 SMAACalculateDiagWeights(sampler2D edgesTex, sampler2D areaTex, vec2 texcoord, vec2 e, vec4 "
    "subsampleIndices) {\n"
    "    vec2 weights = vec2(0.0, 0.0);\n"
    "\n"
    "    // Search for the line ends:\n"
    "    vec4 d;\n"
    "    vec2 end;\n"
    "    if (e.r > 0.0) {\n"
    "        d.xz = SMAASearchDiag1(edgesTex, texcoord, vec2(-1.0,  -1.0), end);\n"
    "        d.x += float(end.y > 0.9);\n"
    "    } else\n"
    "        d.xz = vec2(0.0, 0.0);\n"
    "    d.yw = SMAASearchDiag1(edgesTex, texcoord, vec2(1.0, 1.0), end);\n"
    "\n"
    "    if (d.x + d.y > 2.0) { // d.x + d.y + 1 > 3\n"
    "        // Fetch the crossing edges:\n"
    "        vec4 coords = fma(vec4(-d.x + 0.25, -d.x, d.y, d.y + 0.25), FULL_SMAA_RT_METRICS.xyxy, texcoord.xyxy);\n"
    "        vec4 c;\n"
    // TODO(croot): is this a bug? I think it should be ivec2(0, -1), not ivec2(-1, 0)
    "        c.xy = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2(-1,  0)).rg;\n"
    "        // c.xy = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2(-1, -1)).rg; // croot fix\n"
    "        c.zw = textureLodOffset(edgesTex, coords.zw, 0.0, ivec2( 1,  0)).rg;\n"
    "        c.yxwz = SMAADecodeDiagBilinearAccess(c.xyzw);\n"
    "\n"
    "        // Non-optimized version:\n"
    "        // vec4 coords = fma(vec4(-d.x, -d.x, d.y, d.y), FULL_SMAA_RT_METRICS.xyxy, texcoord.xyxy);\n"
    "        // vec4 c;\n"
    // TODO(croot): is this a bug? I think it should be ivec2(0, -1), not ivec2(-1, 0)
    "        // c.x = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2(-1, 0)).g;\n"
    "        // // c.x = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2(-1,-1)).g; // croot fix\n"
    "        // c.y = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2( 0, 0)).r;\n"
    "        // // c.y = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2( 0,-1)).r; // croot fix\n"
    "        // c.z = textureLodOffset(edgesTex, coords.zw, 0.0, ivec2( 1, 0)).g;\n"
    "        // c.w = textureLodOffset(edgesTex, coords.zw, 0.0, ivec2( 1, 1)).r;\n"
    "\n"
    "        // Merge crossing edges at each side into a single value:\n"
    "        vec2 cc = fma(vec2(2.0, 2.0), c.xz, c.yw);\n"
    "\n"
    "        // Remove the crossing edge if we didn't find the end of the line:\n"
    "        SMAAMovc(bvec2(step(0.9, d.zw)), cc, vec2(0.0, 0.0));\n"
    "\n"
    "        // Fetch the areas for this line:\n"
    "        weights += SMAAAreaDiag(areaTex, d.xy, cc, subsampleIndices.z);\n"
    "    }\n"
    "\n"
    "    // Search for the line ends:\n"
    "    d.xz = SMAASearchDiag2(edgesTex, texcoord, vec2(-1.0, 1.0), end);\n"
    "    if (textureLodOffset(edgesTex, texcoord, 0.0, ivec2(1, 0)).r > 0.0) {\n"
    "        d.yw = SMAASearchDiag2(edgesTex, texcoord, vec2(1.0, -1.0), end);\n"
    "        d.y += float(end.y > 0.9);\n"
    "    } else\n"
    "        d.yw = vec2(0.0, 0.0);\n"
    "\n"
    "    if (d.x + d.y > 2.0) { // d.x + d.y + 1 > 3\n"
    "        // Fetch the crossing edges:\n"
    "        // vec4 coords = fma(vec4(-d.x, -d.x, d.y, d.y), FULL_SMAA_RT_METRICS.xyxy, texcoord.xyxy);\n"
    "        vec4 coords = fma(vec4(-d.x, d.x, d.y, -d.y), FULL_SMAA_RT_METRICS.xyxy, texcoord.xyxy);\n"
    "        vec4 c;\n"
    "        c.x  = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2(-1,  0)).g;\n"
    "        c.y  = textureLodOffset(edgesTex, coords.xy, 0.0, ivec2( 0,  1)).r;\n"
    "        c.zw = textureLodOffset(edgesTex, coords.zw, 0.0, ivec2( 1,  0)).gr;\n"
    "        // c.zw = textureLodOffset(edgesTex, coords.zw, 0.0, ivec2( 1, -1)).gr; // croot fix\n"
    "        vec2 cc = fma(vec2(2.0, 2.0), c.xz, c.yw);\n"
    "\n"
    "        // Remove the crossing edge if we didn't found the end of the line:\n"
    "        SMAAMovc(bvec2(step(0.9, d.zw)), cc, vec2(0.0, 0.0));\n"
    "\n"
    "        // Fetch the areas for this line:\n"
    "        weights += SMAAAreaDiag(areaTex, d.xy, cc, subsampleIndices.w).gr;\n"
    "    }\n"
    "\n"
    "    return weights;\n"
    "}\n"
    "#endif\n"
    "\n"
    "\n"
    "/**\n"
    " * Horizontal/vertical search functions for the 2nd pass.\n"
    " */\n"
    "\n"
    "/**\n"
    " * This allows to determine how much length should we add in the last step\n"
    " * of the searches. It takes the bilinearly interpolated edge (see\n"
    " * @PSEUDO_GATHER4), and adds 0, 1 or 2, depending on which edges and\n"
    " * crossing edges are active.\n"
    " */\n"
    "float SMAASearchLength(sampler2D searchTex, vec2 e, float offset) {\n"
    "    // The texture is flipped vertically, with left and right cases taking half\n"
    "    // of the space horizontally:\n"
    "    vec2 scale = SMAA_SEARCHTEX_SIZE * vec2(0.5, -1.0);\n"
    "    vec2 bias = SMAA_SEARCHTEX_SIZE * vec2(offset, 1.0);\n"
    "\n"
    "    // Scale and bias to access texel centers:\n"
    "    scale += vec2(-1.0,  1.0);\n"
    "    bias  += vec2( 0.5, -0.5);\n"
    "\n"
    "    // Convert from pixel coordinates to texcoords:\n"
    "    // (We use SMAA_SEARCHTEX_PACKED_SIZE because the texture is cropped)\n"
    "    scale *= 1.0 / SMAA_SEARCHTEX_PACKED_SIZE;\n"
    "    bias *= 1.0 / SMAA_SEARCHTEX_PACKED_SIZE;\n"
    "\n"
    "    // Lookup the search texture:\n"
    "    return textureLod(searchTex, fma(scale, e, bias), 0.0).r;\n"
    "}\n"
    "\n"
    "\n"
    "float SMAASearchXLeft(sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end) {\n"
    "    /**\n"
    "     * @PSEUDO_GATHER4\n"
    "     * This texcoord has been offset by (-0.25, 0.125) in the vertex shader to\n"
    "     * sample between edge, thus fetching four edges in a row.\n"
    "     * Sampling with different offsets in each direction allows to disambiguate\n"
    "     * which edges are active from the four fetched ones.\n"
    "     */\n"
    "    vec2 e = vec2(0.0, 1.0);\n"
    "    while (texcoord.x > end &&\n"
    "           e.g > 0.8281 && // Is there some edge not activated?\n"
    "           e.r == 0.0) { // Or is there a crossing edge that breaks the line?\n"
    "        e = textureLod(edgesTex, texcoord, 0.0).rg;\n"
    "        texcoord = fma(-vec2(2.0, 0.0), FULL_SMAA_RT_METRICS.xy, texcoord);\n"
    "    }\n"
    "\n"
    "    float offset = fma(-(255.0 / 127.0), SMAASearchLength(searchTex, e, 0.0), 3.25);\n"
    "    return fma(FULL_SMAA_RT_METRICS.x, offset, texcoord.x);\n"
    "\n"
    "    // Non-optimized version:\n"
    "    // We correct the previous (-0.25, -0.125) offset we applied:\n"
    "    // texcoord.x += 0.25 * FULL_SMAA_RT_METRICS.x;\n"
    "\n"
    "    // The searches are bias by 1, so adjust the coords accordingly:\n"
    "    // texcoord.x += FULL_SMAA_RT_METRICS.x;\n"
    "\n"
    "    // Disambiguate the length added by the last step:\n"
    "    // texcoord.x += 2.0 * FULL_SMAA_RT_METRICS.x; // Undo last step\n"
    "    // texcoord.x -= FULL_SMAA_RT_METRICS.x * (255.0 / 127.0) * SMAASearchLength(searchTex, e, 0.0);\n"
    "    // return fma(FULL_SMAA_RT_METRICS.x, offset, texcoord.x);\n"
    "}\n"
    "\n"
    "float SMAASearchXRight(sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end) {\n"
    "    vec2 e = vec2(0.0, 1.0);\n"
    "    while (texcoord.x < end &&\n"
    "           e.g > 0.8281 && // Is there some edge not activated?\n"
    "           e.r == 0.0) { // Or is there a crossing edge that breaks the line?\n"
    "        e = textureLod(edgesTex, texcoord, 0.0).rg;\n"
    "        texcoord = fma(vec2(2.0, 0.0), FULL_SMAA_RT_METRICS.xy, texcoord);\n"
    "    }\n"
    "    float offset = fma(-(255.0 / 127.0), SMAASearchLength(searchTex, e, 0.5), 3.25);\n"
    "    return fma(-FULL_SMAA_RT_METRICS.x, offset, texcoord.x);\n"
    "}\n"
    "\n"
    "float SMAASearchYUp(sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end) {\n"
    "    vec2 e = vec2(1.0, 0.0);\n"
    "    while (texcoord.y < end &&\n"
    "           e.r > 0.8281 && // Is there some edge not activated?\n"
    "           e.g == 0.0) { // Or is there a crossing edge that breaks the line?\n"
    "        e = textureLod(edgesTex, texcoord, 0.0).rg;\n"
    "        texcoord = fma(vec2(0.0, 2.0), FULL_SMAA_RT_METRICS.xy, texcoord);\n"
    "    }\n"
    "    float offset = fma(-(255.0 / 127.0), SMAASearchLength(searchTex, e.gr, 0.0), 3.25);\n"
    "    return fma(-FULL_SMAA_RT_METRICS.y, offset, texcoord.y);\n"
    "}\n"
    "\n"
    "float SMAASearchYDown(sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end) {\n"
    "    vec2 e = vec2(1.0, 0.0);\n"
    "    while (texcoord.y > end &&\n"
    "           e.r > 0.8281 && // Is there some edge not activated?\n"
    "           e.g == 0.0) { // Or is there a crossing edge that breaks the line?\n"
    "        e = textureLod(edgesTex, texcoord, 0.0).rg;\n"
    "        texcoord = fma(-vec2(0.0, 2.0), FULL_SMAA_RT_METRICS.xy, texcoord);\n"
    "    }\n"
    "    float offset = fma(-(255.0 / 127.0), SMAASearchLength(searchTex, e.gr, 0.5), 3.25);\n"
    "    return fma(FULL_SMAA_RT_METRICS.y, offset, texcoord.y);\n"
    "}\n"
    "\n"
    "/**\n"
    " * Ok, we have the distance and both crossing edges. So, what are the areas\n"
    " * at each side of current edge?\n"
    " */\n"
    "vec2 SMAAArea(sampler2D areaTex, vec2 dist, float e1, float e2, float offset) {\n"
    "    // Rounding prevents precision errors of bilinear filtering:\n"
    "    vec2 texcoord = fma(vec2(SMAA_AREATEX_MAX_DISTANCE, SMAA_AREATEX_MAX_DISTANCE), round(4.0 * vec2(e1, e2)), "
    "dist);\n"
    "\n"
    "    // We do a scale and bias for mapping to texel space:\n"
    "    texcoord = fma(SMAA_AREATEX_PIXEL_SIZE, texcoord, 0.5 * SMAA_AREATEX_PIXEL_SIZE);\n"
    "\n"
    "    // Move to proper place, according to the subpixel offset:\n"
    "    texcoord.y = fma(SMAA_AREATEX_SUBTEX_SIZE, offset, texcoord.y);\n"
    "\n"
    "    // Do it!\n"
    "    return textureLod(areaTex, texcoord, 0.0).rg;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------\n"
    "// Corner Detection Functions\n"
    "\n"
    "void SMAADetectHorizontalCornerPattern(sampler2D edgesTex, inout vec2 weights, vec4 texcoord, vec2 d) {\n"
    "    #if !defined(SMAA_DISABLE_CORNER_DETECTION)\n"
    "    vec2 leftRight = step(d.xy, d.yx);\n"
    "    vec2 rounding = (1.0 - SMAA_CORNER_ROUNDING_NORM) * leftRight;\n"
    "\n"
    "    rounding /= leftRight.x + leftRight.y; // Reduce blending for pixels in the center of a line.\n"
    "\n"
    "    vec2 factor = vec2(1.0, 1.0);\n"
    "    factor.x -= rounding.x * textureLodOffset(edgesTex, texcoord.xy, 0.0, ivec2(0,  -1)).r;\n"
    "    factor.x -= rounding.y * textureLodOffset(edgesTex, texcoord.zw, 0.0, ivec2(1,  -1)).r;\n"
    "    factor.y -= rounding.x * textureLodOffset(edgesTex, texcoord.xy, 0.0, ivec2(0, 2)).r;\n"
    "    factor.y -= rounding.y * textureLodOffset(edgesTex, texcoord.zw, 0.0, ivec2(1, 2)).r;\n"
    "\n"
    "    weights *= saturate(factor);\n"
    "    #endif\n"
    "}\n"
    "\n"
    "void SMAADetectVerticalCornerPattern(sampler2D edgesTex, inout vec2 weights, vec4 texcoord, vec2 d) {\n"
    "    #if !defined(SMAA_DISABLE_CORNER_DETECTION)\n"
    "    vec2 leftRight = step(d.xy, d.yx);\n"
    "    vec2 rounding = (1.0 - SMAA_CORNER_ROUNDING_NORM) * leftRight;\n"
    "\n"
    "    rounding /= leftRight.x + leftRight.y;\n"
    "\n"
    "    vec2 factor = vec2(1.0, 1.0);\n"
    "    factor.x -= rounding.x * textureLodOffset(edgesTex, texcoord.xy, 0.0, ivec2( 1, 0)).g;\n"
    "    factor.x -= rounding.y * textureLodOffset(edgesTex, texcoord.zw, 0.0, ivec2( 1, -1)).g;\n"
    "    factor.y -= rounding.x * textureLodOffset(edgesTex, texcoord.xy, 0.0, ivec2(-2, 0)).g;\n"
    "    factor.y -= rounding.y * textureLodOffset(edgesTex, texcoord.zw, 0.0, ivec2(-2, -1)).g;\n"
    "\n"
    "    weights *= saturate(factor);\n"
    "    #endif\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------\n"
    "// Blending Weight Calculation Pixel Shader (Second Pass)\n"
    "\n"
    "vec4 SMAABlendingWeightCalculation(vec2 texcoord,\n"
    "                                   vec2 pixcoord,\n"
    "                                   vec4 offset[3],\n"
    "                                   sampler2D edgesTex,\n"
    "                                   sampler2D areaTex,\n"
    "                                   sampler2D searchTex,\n"
    "                                   vec4 subsampleIndices) { // Just pass zero for SMAA 1x, see "
    "@SUBSAMPLE_INDICES.\n"
    "    vec4 weights = vec4(0.0, 0.0, 0.0, 0.0);\n"
    "\n"
    "    vec2 e = texture(edgesTex, texcoord).rg;\n"
    "\n"
    "    if (e.g > 0.0) { // Edge at north\n"
    "        #if !defined(SMAA_DISABLE_DIAG_DETECTION)\n"
    "        // Diagonals have both north and west edges, so searching for them in\n"
    "        // one of the boundaries is enough.\n"
    "        weights.rg = SMAACalculateDiagWeights(edgesTex, areaTex, texcoord, e, subsampleIndices);\n"
    "\n"
    "        // We give priority to diagonals, so if we find a diagonal we skip\n"
    "        // horizontal/vertical processing.\n"
    "        if (weights.r == -weights.g) { // weights.r + weights.g == 0.0\n"
    "        #endif\n"
    "\n"
    "        vec2 d;\n"
    "\n"
    "        // Find the distance to the left:\n"
    "        vec3 coords;\n"
    "        coords.x = SMAASearchXLeft(edgesTex, searchTex, offset[0].xy, offset[2].x);\n"
    "        coords.y = offset[1].y; // offset[1].y = texcoord.y - 0.25 * FULL_SMAA_RT_METRICS.y (@CROSSING_OFFSET)\n"
    "        d.x = coords.x;\n"
    "\n"
    "        // Now fetch the left crossing edges, two at a time using bilinear\n"
    "        // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to\n"
    "        // discern what value each edge has:\n"
    "        float e1 = textureLod(edgesTex, coords.xy, 0.0).r;\n"
    "\n"
    "        // Find the distance to the right:\n"
    "        coords.z = SMAASearchXRight(edgesTex, searchTex, offset[0].zw, offset[2].y);\n"
    "        d.y = coords.z;\n"
    "\n"
    "        // We want the distances to be in pixel units (doing this here allow to\n"
    "        // better interleave arithmetic and memory accesses):\n"
    "        d = abs(round(fma(FULL_SMAA_RT_METRICS.zz, d, -pixcoord.xx)));\n"
    "\n"
    "        // SMAAArea below needs a sqrt, as the areas texture is compressed\n"
    "        // quadratically:\n"
    "        vec2 sqrt_d = sqrt(d);\n"
    "\n"
    "        // Fetch the right crossing edges:\n"
    "        float e2 = textureLodOffset(edgesTex, coords.zy, 0.0, ivec2(1, 0)).r;\n"
    "\n"
    "        // Ok, we know how this pattern looks like, now it is time for getting\n"
    "        // the actual area:\n"
    "        weights.rg = SMAAArea(areaTex, sqrt_d, e1, e2, subsampleIndices.y);\n"
    "\n"
    "        // Fix corners:\n"
    "        coords.y = texcoord.y;\n"
    "        SMAADetectHorizontalCornerPattern(edgesTex, weights.rg, coords.xyzy, d);\n"
    "\n"
    "        #if !defined(SMAA_DISABLE_DIAG_DETECTION)\n"
    "        } else {\n"
    "            e.r = 0.0; // Skip vertical processing.\n"
    "        }\n"
    "        #endif\n"
    "    }\n"
    "\n"
    "    if (e.r > 0.0) { // Edge at west\n"
    "        vec2 d;\n"
    "\n"
    "        // Find the distance to the top:\n"
    "        vec3 coords;\n"
    "        coords.y = SMAASearchYUp(edgesTex, searchTex, offset[1].xy, offset[2].z);\n"
    "        coords.x = offset[0].x; // offset[1].x = texcoord.x - 0.25 * FULL_SMAA_RT_METRICS.x;\n"
    "        d.x = coords.y;\n"
    "\n"
    "        // Fetch the top crossing edges:\n"
    "        float e1 = textureLod(edgesTex, coords.xy, 0.0).g;\n"
    "\n"
    "        // Find the distance to the bottom:\n"
    "        coords.z = SMAASearchYDown(edgesTex, searchTex, offset[1].zw, offset[2].w);\n"
    "        d.y = coords.z;\n"
    "\n"
    "        // We want the distances to be in pixel units:\n"
    "        d = abs(round(fma(FULL_SMAA_RT_METRICS.ww, d, -pixcoord.yy)));\n"
    "\n"
    "        // SMAAArea below needs a sqrt, as the areas texture is compressed\n"
    "        // quadratically:\n"
    "        vec2 sqrt_d = sqrt(d);\n"
    "\n"
    "        // Fetch the bottom crossing edges:\n"
    "        float e2 = textureLodOffset(edgesTex, coords.xz, 0.0, ivec2(0, -1)).g;\n"
    "\n"
    "        // Get the area for this direction:\n"
    "        weights.ba = SMAAArea(areaTex, sqrt_d, e1, e2, subsampleIndices.x);\n"
    "\n"
    "        // Fix corners:\n"
    "        coords.x = texcoord.x;\n"
    "        SMAADetectVerticalCornerPattern(edgesTex, weights.ba, coords.xyxz, d);\n"
    "    }\n"
    "\n"
    "    return weights;\n"
    "}\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "void SMAABlendingWeightComputeOffsets(vec2 texcoord,\n"
    "                                   out vec2 pixcoord,\n"
    "                                   out vec4 offset[3]) {\n"
    "    pixcoord = texcoord * FULL_SMAA_RT_METRICS.zw;\n"
    "\n"
    "    // We will use these offsets for the searches later on (see @PSEUDO_GATHER4):\n"
    "    offset[0] = fma(FULL_SMAA_RT_METRICS.xyxy, vec4(-0.25, 0.125,  1.25, 0.125), texcoord.xyxy);\n"
    "    offset[1] = fma(FULL_SMAA_RT_METRICS.xyxy, vec4(-0.125, 0.25, -0.125,  -1.25), texcoord.xyxy);\n"
    "\n"
    "    // And these for the searches, they indicate the ends of the loops:\n"
    "    offset[2] = fma(FULL_SMAA_RT_METRICS.xxyy,\n"
    "                    vec4(-2.0, 2.0, 2.0, -2.0) * float(SMAA_MAX_SEARCH_STEPS),\n"
    "                    vec4(offset[0].xz, offset[1].yw));\n"
    "}\n"
    "\n"
    "layout(location = 0) out vec4 color;\n"
    "\n"
    "uniform sampler2D edgeTex;\n"
    "uniform sampler2D areaTex;\n"
    "uniform sampler2D searchTex;\n"
    "\n"
    "in vec2 fTexCoord;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "    vec2 pixcoord;\n"
    "    vec4 offsets[3];\n"
    "    offsets[0] = vec4(0.0, 0.0, 0.0, 0.0);\n"
    "    offsets[1] = vec4(0.0, 0.0, 0.0, 0.0);\n"
    "    offsets[2] = vec4(0.0, 0.0, 0.0, 0.0);\n"
    "    SMAABlendingWeightComputeOffsets(fTexCoord, pixcoord, offsets);\n"
    "\n"
    "    color = SMAABlendingWeightCalculation(fTexCoord,\n"
    "                                   pixcoord, // TODO(croot): can we just use gl_FragCoord?\n"
    "                                   offsets,\n"
    "                                   edgeTex,\n"
    "                                   areaTex,\n"
    "                                   searchTex,\n"
    "                                   vec4(0.0, 0.0, 0.0, 0.0)); // Just pass zero for SMAA 1x, see "
    "@SUBSAMPLE_INDICES.\n"
    "}\n";

}  // namespace QueryRenderer

#endif  // SMAABLENDINGWEIGHTCALCULATION_FRAG_H_
