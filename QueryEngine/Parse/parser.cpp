#define YY_Parser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from parser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_Parser_LSP_NEEDED 
#define YY_Parser_MEMBERS                  \
    virtual ~Parser()   {} \
    private:                   \
       yyFlexLexer lexer;
#define YY_Parser_LEX_BODY  {return lexer.yylex();}
#define YY_Parser_ERROR_BODY  {cerr << "error encountered at line: "<<lexer.lineno()<<" last word parsed:"<<lexer.YYText()<<"\n";}
#line 10 "parser.y"

#include <iostream>
#include <fstream>
#include <FlexLexer.h>
#include <cstdlib>

// AST nodes
#include "ast/ASTNode.h"
#include "ast/Program.h"
#include "ast/SQLList.h"
#include "ast/SQL.h"
#include "ast/Schema.h"
#include "ast/BaseTableDef.h"
#include "ast/Table.h"
#include "ast/ColumnDef.h"
#include "ast/ColumnCommalist.h"
#include "ast/TableConstraintDef.h"
#include "ast/BaseTableElementCommalist.h"
#include "ast/BaseTableElement.h"
#include "ast/ColumnDefOpt.h"
#include "ast/ColumnDefOptList.h"
#include "ast/Literal.h"
#include "ast/DataType.h"
#include "ast/Column.h"

#include "ast/ManipulativeStatement.h"
#include "ast/SelectStatement.h"
#include "ast/Selection.h"
#include "ast/OptAllDistinct.h"
#include "ast/TableExp.h"
#include "ast/FromClause.h"
#include "ast/TableRefCommalist.h"
#include "ast/TableRef.h"

#include "ast/InsertStatement.h"
#include "ast/OptColumnCommalist.h"
#include "ast/ValuesOrQuerySpec.h"
#include "ast/QuerySpec.h"
#include "ast/InsertAtomCommalist.h"
#include "ast/InsertAtom.h"
#include "ast/Atom.h"

// define stack element type to be a 
// pointer to an AST node
#define YY_Parser_STYPE ASTNode*

extern ASTNode* parse_root;

// Variables declared in scanner.l
extern std::string strData[10];
extern int intData;

using namespace std;


#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_Parser_BISON 1

#ifndef YY_Parser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_Parser_COMPATIBILITY 1
 #else
  #define  YY_Parser_COMPATIBILITY 0
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_Parser_LTYPE
   #define YY_Parser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_Parser_STYPE 
   #define YY_Parser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_Parser_DEBUG
   #define  YY_Parser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_Parser_USE_GOTO
  #define YY_Parser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_Parser_USE_GOTO
 #define YY_Parser_USE_GOTO 0
#endif

#ifndef YY_Parser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_Parser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"
#ifndef YY_USE_CLASS
# ifndef YYSTYPE
#  define YYSTYPE int
#  define YYSTYPE_IS_TRIVIAL 1
# endif
#endif

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_Parser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_Parser_DEBUG */
#endif


#ifndef YY_Parser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_Parser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_Parser_LSP_NEEDED
#ifndef YY_Parser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_Parser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_Parser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_Parser_STYPE
#define YY_Parser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_Parser_PARSE
#define YY_Parser_PARSE yyparse
#endif
#ifndef YY_Parser_LEX
#define YY_Parser_LEX yylex
#endif
#ifndef YY_Parser_LVAL
#define YY_Parser_LVAL yylval
#endif
#ifndef YY_Parser_LLOC
#define YY_Parser_LLOC yylloc
#endif
#ifndef YY_Parser_CHAR
#define YY_Parser_CHAR yychar
#endif
#ifndef YY_Parser_NERRS
#define YY_Parser_NERRS yynerrs
#endif
#ifndef YY_Parser_DEBUG_FLAG
#define YY_Parser_DEBUG_FLAG yydebug
#endif
#ifndef YY_Parser_ERROR
#define YY_Parser_ERROR yyerror
#endif

#ifndef YY_Parser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_Parser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_Parser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_Parser_PARSE_PARAM
  #define YY_Parser_PARSE_PARAM void
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_Parser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_Parser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_Parser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_Parser_PURE
#  ifndef YYPURE
#    define YYPURE YY_Parser_PURE
#  endif
#endif

#ifdef YY_Parser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_Parser_DEBUG 
#  endif
#endif

#ifndef YY_Parser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_Parser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_Parser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_Parser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	AS	258
#define	DROP	259
#define	NAME	260
#define	TABLE	261
#define	CREATE	262
#define	INTNUM	263
#define	STRING	264
#define	UNKNOWN	265
#define	ALL	266
#define	BETWEEN	267
#define	BY	268
#define	DISTINCT	269
#define	FROM	270
#define	GROUP	271
#define	HAVING	272
#define	SELECT	273
#define	COMPARISON	274
#define	USER	275
#define	WHERE	276
#define	WITH	277
#define	EMPTY	278
#define	SELALL	279
#define	DOT	280
#define	UPDATE	281
#define	SET	282
#define	CURRENT	283
#define	OF	284
#define	NULLX	285
#define	ASSIGN	286
#define	INSERT	287
#define	INTO	288
#define	VALUES	289
#define	NOT	290
#define	UNIQUE	291
#define	PRIMARY	292
#define	FOREIGN	293
#define	KEY	294
#define	CHECK	295
#define	REFERENCES	296
#define	DEFAULT	297
#define	DATATYPE	298
#define	DECIMAL	299
#define	SMALLINT	300
#define	NUMERIC	301
#define	CHARACTER	302
#define	INTEGER	303
#define	REAL	304
#define	FLOAT	305
#define	DOUBLE	306
#define	PRECISION	307
#define	VARCHAR	308
#define	AVG	309
#define	MAX	310
#define	MIN	311
#define	SUM	312
#define	COUNT	313
#define	ALIAS	314
#define	INTORDER	315
#define	COLORDER	316
#define	ORDER	317
#define	ASC	318
#define	DESC	319
#define	LIMIT	320
#define	OFFSET	321
#define	DOTNAME	322


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_Parser_CLASS
#define YY_Parser_CLASS Parser
#endif
#ifndef YY_Parser_INHERIT
#define YY_Parser_INHERIT
#endif
#ifndef YY_Parser_MEMBERS
#define YY_Parser_MEMBERS 
#endif
#ifndef YY_Parser_LEX_BODY
#define YY_Parser_LEX_BODY  
#endif
#ifndef YY_Parser_ERROR_BODY
#define YY_Parser_ERROR_BODY  
#endif
#ifndef YY_Parser_CONSTRUCTOR_PARAM
#define YY_Parser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_Parser_CONSTRUCTOR_CODE
#define YY_Parser_CONSTRUCTOR_CODE
#endif
#ifndef YY_Parser_CONSTRUCTOR_INIT
#define YY_Parser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_Parser_USE_CONST_TOKEN
#define YY_Parser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_Parser_USE_CONST_TOKEN != 0
#ifndef YY_Parser_ENUM_TOKEN
#define YY_Parser_ENUM_TOKEN yy_Parser_enum_token
#endif
#endif

class YY_Parser_CLASS YY_Parser_INHERIT
{
public: 
#if YY_Parser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int AS;
static const int DROP;
static const int NAME;
static const int TABLE;
static const int CREATE;
static const int INTNUM;
static const int STRING;
static const int UNKNOWN;
static const int ALL;
static const int BETWEEN;
static const int BY;
static const int DISTINCT;
static const int FROM;
static const int GROUP;
static const int HAVING;
static const int SELECT;
static const int COMPARISON;
static const int USER;
static const int WHERE;
static const int WITH;
static const int EMPTY;
static const int SELALL;
static const int DOT;
static const int UPDATE;
static const int SET;
static const int CURRENT;
static const int OF;
static const int NULLX;
static const int ASSIGN;
static const int INSERT;
static const int INTO;
static const int VALUES;
static const int NOT;
static const int UNIQUE;
static const int PRIMARY;
static const int FOREIGN;
static const int KEY;
static const int CHECK;
static const int REFERENCES;
static const int DEFAULT;
static const int DATATYPE;
static const int DECIMAL;
static const int SMALLINT;
static const int NUMERIC;
static const int CHARACTER;
static const int INTEGER;
static const int REAL;
static const int FLOAT;
static const int DOUBLE;
static const int PRECISION;
static const int VARCHAR;
static const int AVG;
static const int MAX;
static const int MIN;
static const int SUM;
static const int COUNT;
static const int ALIAS;
static const int INTORDER;
static const int COLORDER;
static const int ORDER;
static const int ASC;
static const int DESC;
static const int LIMIT;
static const int OFFSET;
static const int DOTNAME;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_Parser_ENUM_TOKEN { YY_Parser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,AS=258
	,DROP=259
	,NAME=260
	,TABLE=261
	,CREATE=262
	,INTNUM=263
	,STRING=264
	,UNKNOWN=265
	,ALL=266
	,BETWEEN=267
	,BY=268
	,DISTINCT=269
	,FROM=270
	,GROUP=271
	,HAVING=272
	,SELECT=273
	,COMPARISON=274
	,USER=275
	,WHERE=276
	,WITH=277
	,EMPTY=278
	,SELALL=279
	,DOT=280
	,UPDATE=281
	,SET=282
	,CURRENT=283
	,OF=284
	,NULLX=285
	,ASSIGN=286
	,INSERT=287
	,INTO=288
	,VALUES=289
	,NOT=290
	,UNIQUE=291
	,PRIMARY=292
	,FOREIGN=293
	,KEY=294
	,CHECK=295
	,REFERENCES=296
	,DEFAULT=297
	,DATATYPE=298
	,DECIMAL=299
	,SMALLINT=300
	,NUMERIC=301
	,CHARACTER=302
	,INTEGER=303
	,REAL=304
	,FLOAT=305
	,DOUBLE=306
	,PRECISION=307
	,VARCHAR=308
	,AVG=309
	,MAX=310
	,MIN=311
	,SUM=312
	,COUNT=313
	,ALIAS=314
	,INTORDER=315
	,COLORDER=316
	,ORDER=317
	,ASC=318
	,DESC=319
	,LIMIT=320
	,OFFSET=321
	,DOTNAME=322


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_Parser_PARSE (YY_Parser_PARSE_PARAM);
 virtual void YY_Parser_ERROR(char *msg) YY_Parser_ERROR_BODY;
#ifdef YY_Parser_PURE
#ifdef YY_Parser_LSP_NEEDED
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL,YY_Parser_LTYPE *YY_Parser_LLOC) YY_Parser_LEX_BODY;
#else
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL) YY_Parser_LEX_BODY;
#endif
#else
 virtual int YY_Parser_LEX() YY_Parser_LEX_BODY;
 YY_Parser_STYPE YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
 YY_Parser_LTYPE YY_Parser_LLOC;
#endif
 int   YY_Parser_NERRS;
 int    YY_Parser_CHAR;
#endif
#if YY_Parser_DEBUG != 0
 int YY_Parser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM);
public:
 YY_Parser_MEMBERS 
};
/* other declare folow */
#if YY_Parser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_Parser_CLASS::AS=258;
const int YY_Parser_CLASS::DROP=259;
const int YY_Parser_CLASS::NAME=260;
const int YY_Parser_CLASS::TABLE=261;
const int YY_Parser_CLASS::CREATE=262;
const int YY_Parser_CLASS::INTNUM=263;
const int YY_Parser_CLASS::STRING=264;
const int YY_Parser_CLASS::UNKNOWN=265;
const int YY_Parser_CLASS::ALL=266;
const int YY_Parser_CLASS::BETWEEN=267;
const int YY_Parser_CLASS::BY=268;
const int YY_Parser_CLASS::DISTINCT=269;
const int YY_Parser_CLASS::FROM=270;
const int YY_Parser_CLASS::GROUP=271;
const int YY_Parser_CLASS::HAVING=272;
const int YY_Parser_CLASS::SELECT=273;
const int YY_Parser_CLASS::COMPARISON=274;
const int YY_Parser_CLASS::USER=275;
const int YY_Parser_CLASS::WHERE=276;
const int YY_Parser_CLASS::WITH=277;
const int YY_Parser_CLASS::EMPTY=278;
const int YY_Parser_CLASS::SELALL=279;
const int YY_Parser_CLASS::DOT=280;
const int YY_Parser_CLASS::UPDATE=281;
const int YY_Parser_CLASS::SET=282;
const int YY_Parser_CLASS::CURRENT=283;
const int YY_Parser_CLASS::OF=284;
const int YY_Parser_CLASS::NULLX=285;
const int YY_Parser_CLASS::ASSIGN=286;
const int YY_Parser_CLASS::INSERT=287;
const int YY_Parser_CLASS::INTO=288;
const int YY_Parser_CLASS::VALUES=289;
const int YY_Parser_CLASS::NOT=290;
const int YY_Parser_CLASS::UNIQUE=291;
const int YY_Parser_CLASS::PRIMARY=292;
const int YY_Parser_CLASS::FOREIGN=293;
const int YY_Parser_CLASS::KEY=294;
const int YY_Parser_CLASS::CHECK=295;
const int YY_Parser_CLASS::REFERENCES=296;
const int YY_Parser_CLASS::DEFAULT=297;
const int YY_Parser_CLASS::DATATYPE=298;
const int YY_Parser_CLASS::DECIMAL=299;
const int YY_Parser_CLASS::SMALLINT=300;
const int YY_Parser_CLASS::NUMERIC=301;
const int YY_Parser_CLASS::CHARACTER=302;
const int YY_Parser_CLASS::INTEGER=303;
const int YY_Parser_CLASS::REAL=304;
const int YY_Parser_CLASS::FLOAT=305;
const int YY_Parser_CLASS::DOUBLE=306;
const int YY_Parser_CLASS::PRECISION=307;
const int YY_Parser_CLASS::VARCHAR=308;
const int YY_Parser_CLASS::AVG=309;
const int YY_Parser_CLASS::MAX=310;
const int YY_Parser_CLASS::MIN=311;
const int YY_Parser_CLASS::SUM=312;
const int YY_Parser_CLASS::COUNT=313;
const int YY_Parser_CLASS::ALIAS=314;
const int YY_Parser_CLASS::INTORDER=315;
const int YY_Parser_CLASS::COLORDER=316;
const int YY_Parser_CLASS::ORDER=317;
const int YY_Parser_CLASS::ASC=318;
const int YY_Parser_CLASS::DESC=319;
const int YY_Parser_CLASS::LIMIT=320;
const int YY_Parser_CLASS::OFFSET=321;
const int YY_Parser_CLASS::DOTNAME=322;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_Parser_CLASS::token */
#endif
/*apres const  */
YY_Parser_CLASS::YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM) YY_Parser_CONSTRUCTOR_INIT
{
#if YY_Parser_DEBUG != 0
YY_Parser_DEBUG_FLAG=0;
#endif
YY_Parser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		134
#define	YYFLAG		-32768
#define	YYNTBASE	73

#define YYTRANSLATE(x) ((unsigned)(x) <= 322 ? yytranslate[x] : 104)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    69,
    70,    72,     2,    71,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    68,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67
};

#if YY_Parser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,    10,    12,    13,    17,    19,    26,
    30,    32,    36,    38,    40,    44,    45,    48,    51,    55,
    60,    63,    66,    69,    72,    78,    83,    89,    97,   108,
   110,   114,   116,   118,   120,   126,   131,   133,   135,   139,
   141,   143,   148,   150,   152,   153,   158,   160,   162,   165,
   167,   171,   173,   175,   177,   179,   181,   183,   185,   190,
   192,   197,   199,   204,   206,   211,   213,   215,   217,   222,
   224,   227
};

static const short yyrhs[] = {    74,
     0,     0,    75,    68,     0,    74,    75,    68,     0,    77,
     0,     0,    69,    85,    70,     0,    78,     0,     7,     6,
   101,    69,    79,    70,     0,     4,     6,   101,     0,    80,
     0,    79,    71,    80,     0,    81,     0,    84,     0,   103,
   102,    82,     0,     0,    82,    83,     0,    35,    30,     0,
    35,    30,    36,     0,    35,    30,    37,    39,     0,    42,
   100,     0,    42,    30,     0,    42,    20,     0,    41,   101,
     0,    41,   101,    69,    85,    70,     0,    36,    69,    85,
    70,     0,    37,    39,    69,    85,    70,     0,    38,    39,
    69,    85,    70,    41,   101,     0,    38,    39,    69,    85,
    70,    41,   101,    69,    85,    70,     0,   103,     0,    85,
    71,   103,     0,    86,     0,    91,     0,    87,     0,    32,
    33,   101,    76,    88,     0,    34,    69,    89,    70,     0,
    93,     0,    90,     0,    89,    71,    90,     0,    99,     0,
    30,     0,    18,    92,    94,    95,     0,    11,     0,    14,
     0,     0,    18,    92,    94,    95,     0,    72,     0,    96,
     0,    15,    97,     0,    98,     0,    97,    71,    98,     0,
   101,     0,   100,     0,    20,     0,     5,     0,     8,     0,
     5,     0,    47,     0,    47,    69,     8,    70,     0,    53,
     0,    53,    69,     8,    70,     0,    46,     0,    46,    69,
     8,    70,     0,    44,     0,    44,    69,     8,    70,     0,
    48,     0,    45,     0,    50,     0,    50,    69,     8,    70,
     0,    49,     0,    51,    52,     0,     5,     0
};

#endif

#if (YY_Parser_DEBUG != 0) || defined(YY_Parser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
    99,   100,   104,   105,   109,   112,   114,   118,   122,   123,
   127,   128,   132,   133,   137,   140,   142,   145,   148,   149,
   150,   151,   152,   154,   155,   159,   160,   161,   162,   166,
   168,   174,   178,   180,   197,   201,   203,   206,   208,   211,
   213,   216,   222,   224,   225,   228,   232,   237,   246,   250,
   252,   255,   260,   263,   268,   269,   274,   282,   283,   284,
   285,   286,   287,   289,   290,   292,   293,   294,   295,   296,
   297,   302
};

static const char * const yytname[] = {   "$","error","$illegal.","AS","DROP",
"NAME","TABLE","CREATE","INTNUM","STRING","UNKNOWN","ALL","BETWEEN","BY","DISTINCT",
"FROM","GROUP","HAVING","SELECT","COMPARISON","USER","WHERE","WITH","EMPTY",
"SELALL","DOT","UPDATE","SET","CURRENT","OF","NULLX","ASSIGN","INSERT","INTO",
"VALUES","NOT","UNIQUE","PRIMARY","FOREIGN","KEY","CHECK","REFERENCES","DEFAULT",
"DATATYPE","DECIMAL","SMALLINT","NUMERIC","CHARACTER","INTEGER","REAL","FLOAT",
"DOUBLE","PRECISION","VARCHAR","AVG","MAX","MIN","SUM","COUNT","ALIAS","INTORDER",
"COLORDER","ORDER","ASC","DESC","LIMIT","OFFSET","DOTNAME","';'","'('","')'",
"','","'*'","program","sql_list","sql","opt_column_commalist","schema","base_table_def",
"base_table_element_commalist","base_table_element","column_def","column_def_opt_list",
"column_def_opt","table_constraint_def","column_commalist","manipulative_statement",
"insert_statement","values_or_query_spec","insert_atom_commalist","insert_atom",
"select_statement","opt_all_distinct","query_spec","selection","table_exp","from_clause",
"table_ref_commalist","table_ref","atom","literal","table","data_type","column",
""
};
#endif

static const short yyr1[] = {     0,
    73,    73,    74,    74,    75,    76,    76,    77,    78,    78,
    79,    79,    80,    80,    81,    82,    82,    83,    83,    83,
    83,    83,    83,    83,    83,    84,    84,    84,    84,    85,
    85,    75,    86,    86,    87,    88,    88,    89,    89,    90,
    90,    91,    92,    92,    92,    93,    94,    95,    96,    97,
    97,    98,    99,    99,   100,   100,   101,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   103
};

static const short yyr2[] = {     0,
     1,     0,     2,     3,     1,     0,     3,     1,     6,     3,
     1,     3,     1,     1,     3,     0,     2,     2,     3,     4,
     2,     2,     2,     2,     5,     4,     5,     7,    10,     1,
     3,     1,     1,     1,     5,     4,     1,     1,     3,     1,
     1,     4,     1,     1,     0,     4,     1,     1,     2,     1,
     3,     1,     1,     1,     1,     1,     1,     1,     4,     1,
     4,     1,     4,     1,     4,     1,     1,     1,     4,     1,
     2,     1
};

static const short yydefact[] = {     2,
     0,     0,    45,     0,     1,     0,     5,     8,    32,    34,
    33,     0,     0,    43,    44,     0,     0,     0,     3,    57,
    10,     0,    47,     0,     6,     4,     0,     0,    42,    48,
     0,     0,    72,     0,     0,     0,     0,    11,    13,    14,
     0,    49,    50,    52,     0,    30,    45,     0,    35,    37,
     0,     0,     0,     9,     0,    64,    67,    62,    58,    66,
    70,    68,     0,    60,    16,     0,     7,     0,     0,     0,
     0,     0,     0,    12,     0,     0,     0,     0,    71,     0,
    15,    51,    31,     0,    55,    56,    54,    41,     0,    38,
    40,    53,    26,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    17,    46,    36,     0,    27,     0,    65,
    63,    59,    69,    61,    18,    24,    23,    22,    21,    39,
     0,    19,     0,     0,    28,    20,     0,     0,    25,     0,
    29,     0,     0,     0
};

static const short yydefgoto[] = {   132,
     5,     6,    32,     7,     8,    37,    38,    39,    81,   104,
    40,    45,     9,    10,    49,    89,    90,    11,    16,    50,
    24,    29,    30,    42,    43,    91,    92,    44,    65,    46
};

static const short yypact[] = {     2,
    15,    16,    -3,   -26,     2,   -53,-32768,-32768,-32768,-32768,
-32768,    20,    20,-32768,-32768,   -45,    20,     0,-32768,-32768,
-32768,   -39,-32768,    38,    -2,-32768,    -1,    20,-32768,-32768,
    64,    -8,-32768,     3,    31,    32,   -38,-32768,-32768,-32768,
     1,     5,-32768,-32768,   -30,-32768,    -3,     4,-32768,-32768,
    64,    11,    12,-32768,    -1,    13,-32768,    14,    17,-32768,
-32768,    18,    22,    19,-32768,    20,-32768,    64,   -45,     8,
   -28,    64,    64,-32768,    69,    70,    76,    77,-32768,    81,
   -23,-32768,-32768,    38,-32768,-32768,-32768,-32768,   -15,-32768,
-32768,-32768,-32768,   -13,   -11,    21,    23,    24,    26,    27,
    62,    20,     9,-32768,-32768,-32768,     8,-32768,    54,-32768,
-32768,-32768,-32768,-32768,    25,    29,-32768,-32768,-32768,-32768,
    20,-32768,    60,    64,    33,-32768,    -7,    64,-32768,    -5,
-32768,   100,   101,-32768
};

static const short yypgoto[] = {-32768,
-32768,    98,-32768,-32768,-32768,-32768,    49,-32768,-32768,-32768,
-32768,   -49,-32768,-32768,-32768,-32768,     6,-32768,    58,-32768,
    37,    28,-32768,-32768,    41,-32768,     7,   -12,-32768,   -24
};


#define	YYLAST		113


static const short yytable[] = {    21,
    22,    71,    41,    33,    25,     1,    17,    14,     2,    47,
    15,   101,    85,    85,    19,    86,    86,   102,   103,     3,
    12,    13,    94,    95,    20,    48,    23,    87,   117,    27,
    41,    54,    55,     4,    34,    35,    36,    88,   118,    67,
    68,    93,    68,    83,    56,    57,    58,    59,    60,    61,
    62,    63,    28,    64,   106,   107,   108,    68,   109,    68,
   122,   123,   129,    68,   131,    68,    31,    26,    33,    52,
    53,    51,    70,    79,   127,    66,    96,    97,   130,    72,
    73,    75,    76,    98,    99,    77,    78,    80,   100,   116,
   110,   115,   111,   112,   121,   113,   114,   124,   126,   133,
   134,   128,    18,    74,    69,    84,    82,     0,   125,   119,
     0,   105,   120
};

static const short yycheck[] = {    12,
    13,    51,    27,     5,    17,     4,    33,    11,     7,    18,
    14,    35,     5,     5,    68,     8,     8,    41,    42,    18,
     6,     6,    72,    73,     5,    34,    72,    20,    20,    69,
    55,    70,    71,    32,    36,    37,    38,    30,    30,    70,
    71,    70,    71,    68,    44,    45,    46,    47,    48,    49,
    50,    51,    15,    53,    70,    71,    70,    71,    70,    71,
    36,    37,    70,    71,    70,    71,    69,    68,     5,    39,
    39,    69,    69,    52,   124,    71,     8,     8,   128,    69,
    69,    69,    69,     8,     8,    69,    69,    69,     8,   102,
    70,    30,    70,    70,    41,    70,    70,    69,    39,     0,
     0,    69,     5,    55,    47,    69,    66,    -1,   121,   103,
    -1,    84,   107
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_Parser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_Parser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_Parser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_Parser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_Parser_CHAR = (token), YY_Parser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_Parser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_Parser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_Parser_PURE
/* UNPURE */
#define YYLEX           YY_Parser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_Parser_CHAR;                      /*  the lookahead symbol        */
YY_Parser_STYPE      YY_Parser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_Parser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_Parser_LSP_NEEDED
YY_Parser_LTYPE YY_Parser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_Parser_LSP_NEEDED
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL, &YY_Parser_LLOC)
#else
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_Parser_DEBUG != 0
int YY_Parser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_Parser_CLASS::
#endif
     YY_Parser_PARSE(YY_Parser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_Parser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_Parser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_Parser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_Parser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_Parser_LTYPE *yyls = yylsa;
  YY_Parser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_Parser_PURE
  int YY_Parser_CHAR;
  YY_Parser_STYPE YY_Parser_LVAL;
  int YY_Parser_NERRS;
#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE YY_Parser_LLOC;
#endif
#endif

  YY_Parser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_Parser_NERRS = 0;
  YY_Parser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_Parser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_Parser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_Parser_LSP_NEEDED
      YY_Parser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_Parser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_Parser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_Parser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_Parser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_Parser_LSP_NEEDED
      yyls = (YY_Parser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_Parser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_Parser_CHAR == YYEMPTY)
    {
#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_Parser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_Parser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_Parser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_Parser_CHAR);

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_Parser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_Parser_CHAR, YY_Parser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_Parser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_Parser_CHAR != YYEOF)
    YY_Parser_CHAR = YYEMPTY;

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 99 "parser.y"
{ yyval = new Program((SQLList*)yyvsp[0]); parse_root = yyval; ;
    break;}
case 2:
#line 100 "parser.y"
{ yyval = 0; parse_root = yyval; ;
    break;}
case 3:
#line 104 "parser.y"
{ yyval = new SQLList((SQL*)yyvsp[-1]); ;
    break;}
case 4:
#line 105 "parser.y"
{ yyval = new SQLList((SQLList*)yyvsp[-2], (SQL*)yyvsp[-1]); ;
    break;}
case 5:
#line 109 "parser.y"
{ yyval = new SQL((Schema*)yyvsp[0]); ;
    break;}
case 6:
#line 113 "parser.y"
{ yyval = new OptColumnCommalist(NULL); ;
    break;}
case 7:
#line 114 "parser.y"
{ yyval = new OptColumnCommalist((ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 8:
#line 118 "parser.y"
{ yyval = new Schema((BaseTableDef*)yyvsp[0]); ;
    break;}
case 9:
#line 122 "parser.y"
{ yyval = new BaseTableDef("CREATE", (Table*)yyvsp[-3], (BaseTableElementCommalist*)yyvsp[-1]); ;
    break;}
case 10:
#line 123 "parser.y"
{ yyval = new BaseTableDef("DROP", (Table*)yyvsp[0]); ;
    break;}
case 11:
#line 127 "parser.y"
{ yyval = new BaseTableElementCommalist( (BaseTableElement*)yyvsp[0]); ;
    break;}
case 12:
#line 128 "parser.y"
{ yyval = new BaseTableElementCommalist( (BaseTableElementCommalist*)yyvsp[-2], (BaseTableElement*)yyvsp[0]); ;
    break;}
case 13:
#line 132 "parser.y"
{ yyval = new BaseTableElement( (ColumnDef*)yyvsp[0]); ;
    break;}
case 14:
#line 133 "parser.y"
{ yyval = new BaseTableElement( (TableConstraintDef*)yyvsp[0]); ;
    break;}
case 15:
#line 137 "parser.y"
{ yyval = new ColumnDef( (Column*)yyvsp[-2], (DataType*)yyvsp[-1], (ColumnDefOptList*)yyvsp[0]); ;
    break;}
case 16:
#line 141 "parser.y"
{ yyval = NULL; ;
    break;}
case 17:
#line 142 "parser.y"
{ yyval = new ColumnDefOptList( (ColumnDefOptList*)yyvsp[-1], (ColumnDefOpt*)yyvsp[0]); ;
    break;}
case 18:
#line 147 "parser.y"
{ yyval = new ColumnDefOpt(0); ;
    break;}
case 19:
#line 148 "parser.y"
{ yyval = new ColumnDefOpt(1); ;
    break;}
case 20:
#line 149 "parser.y"
{ yyval = new ColumnDefOpt(2); ;
    break;}
case 21:
#line 150 "parser.y"
{ yyval = new ColumnDefOpt(3, (Literal*)yyvsp[0]); ;
    break;}
case 22:
#line 151 "parser.y"
{ yyval = new ColumnDefOpt(4); ;
    break;}
case 23:
#line 152 "parser.y"
{ yyval = new ColumnDefOpt(5); ;
    break;}
case 24:
#line 154 "parser.y"
{ yyval = new ColumnDefOpt(7, (Table*)yyvsp[0]); ;
    break;}
case 25:
#line 155 "parser.y"
{ yyval = new ColumnDefOpt(8, (Table*)yyvsp[-3], (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 26:
#line 159 "parser.y"
{ yyval = new TableConstraintDef(0, (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 27:
#line 160 "parser.y"
{ yyval = new TableConstraintDef(1, (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 28:
#line 161 "parser.y"
{ yyval = new TableConstraintDef(2, (ColumnCommalist*)yyvsp[-3], (Table*)yyvsp[0]); ;
    break;}
case 29:
#line 162 "parser.y"
{ yyval = new TableConstraintDef(2, (ColumnCommalist*)yyvsp[-6], (Table*)yyvsp[-3], (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 30:
#line 167 "parser.y"
{ yyval = new ColumnCommalist((Column*)yyvsp[0]); ;
    break;}
case 31:
#line 168 "parser.y"
{ yyval = new ColumnCommalist((ColumnCommalist*)yyvsp[-2], (Column*)yyvsp[0]); ;
    break;}
case 32:
#line 175 "parser.y"
{ yyval = new SQL((ManipulativeStatement*)yyvsp[0]); ;
    break;}
case 33:
#line 179 "parser.y"
{ yyval = new ManipulativeStatement((SelectStatement*)yyvsp[0]); ;
    break;}
case 34:
#line 180 "parser.y"
{ yyval = new ManipulativeStatement((InsertStatement*)yyvsp[0]); ;
    break;}
case 35:
#line 198 "parser.y"
{ yyval = new InsertStatement((Table*)yyvsp[-2], (OptColumnCommalist*)yyvsp[-1], (ValuesOrQuerySpec*)yyvsp[0]); ;
    break;}
case 36:
#line 202 "parser.y"
{ yyval = new ValuesOrQuerySpec((InsertAtomCommalist*)yyvsp[-1]); ;
    break;}
case 37:
#line 203 "parser.y"
{ yyval = new ValuesOrQuerySpec((QuerySpec*)yyvsp[0]); ;
    break;}
case 38:
#line 207 "parser.y"
{ yyval = new InsertAtomCommalist((InsertAtom*)yyvsp[0]); ;
    break;}
case 39:
#line 208 "parser.y"
{ yyval = new InsertAtomCommalist((InsertAtomCommalist*)yyvsp[-2], (InsertAtom*)yyvsp[0]); ;
    break;}
case 40:
#line 212 "parser.y"
{ yyval = new InsertAtom((Atom*)yyvsp[0]); ;
    break;}
case 41:
#line 213 "parser.y"
{ yyval = new InsertAtom(NULL); ;
    break;}
case 42:
#line 219 "parser.y"
{ yyval = new SelectStatement((OptAllDistinct*)yyvsp[-2], (Selection*)yyvsp[-1], (TableExp*)yyvsp[0]); ;
    break;}
case 43:
#line 223 "parser.y"
{ yyval = new OptAllDistinct("ALL"); ;
    break;}
case 44:
#line 224 "parser.y"
{ yyval = new OptAllDistinct("DISTINCT"); ;
    break;}
case 45:
#line 225 "parser.y"
{ yyval = new OptAllDistinct(""); ;
    break;}
case 46:
#line 229 "parser.y"
{ yyval = new QuerySpec((OptAllDistinct*)yyvsp[-2], (Selection*)yyvsp[-1], (TableExp*)yyvsp[0]); ;
    break;}
case 47:
#line 234 "parser.y"
{ yyval = new Selection("*"); ;
    break;}
case 48:
#line 243 "parser.y"
{ yyval = new TableExp((FromClause*)yyvsp[0]); ;
    break;}
case 49:
#line 247 "parser.y"
{ yyval = new FromClause((TableRefCommalist*)yyvsp[0]); ;
    break;}
case 50:
#line 251 "parser.y"
{ yyval = new TableRefCommalist((TableRef*)yyvsp[0]); ;
    break;}
case 51:
#line 252 "parser.y"
{ yyval = new TableRefCommalist((TableRefCommalist*)yyvsp[-2], (TableRef*)yyvsp[0]); ;
    break;}
case 52:
#line 256 "parser.y"
{ yyval = new TableRef((Table *)yyvsp[0]); ;
    break;}
case 53:
#line 262 "parser.y"
{ yyval = new Atom((Literal*)yyvsp[0]); ;
    break;}
case 54:
#line 263 "parser.y"
{ yyval = new Atom("USER"); ;
    break;}
case 55:
#line 268 "parser.y"
{ yyval = new Literal(strData[0]); ;
    break;}
case 56:
#line 269 "parser.y"
{ yyval = new Literal(intData); ;
    break;}
case 57:
#line 274 "parser.y"
{ yyval = new Table(strData[0]); ;
    break;}
case 58:
#line 282 "parser.y"
{ yyval = new DataType(0); ;
    break;}
case 59:
#line 283 "parser.y"
{ yyval = new DataType(0, intData); ;
    break;}
case 60:
#line 284 "parser.y"
{ yyval = new DataType(1); ;
    break;}
case 61:
#line 285 "parser.y"
{ yyval = new DataType(1, intData); ;
    break;}
case 62:
#line 286 "parser.y"
{ yyval = new DataType(2); ;
    break;}
case 63:
#line 287 "parser.y"
{ yyval = new DataType(2, intData); ;
    break;}
case 64:
#line 289 "parser.y"
{ yyval = new DataType(3); ;
    break;}
case 65:
#line 290 "parser.y"
{ yyval = new DataType(3, intData); ;
    break;}
case 66:
#line 292 "parser.y"
{ yyval = new DataType(4); ;
    break;}
case 67:
#line 293 "parser.y"
{ yyval = new DataType(5); ;
    break;}
case 68:
#line 294 "parser.y"
{ yyval = new DataType(6); ;
    break;}
case 69:
#line 295 "parser.y"
{ yyval = new DataType(6, intData); ;
    break;}
case 70:
#line 296 "parser.y"
{ yyval = new DataType(7); ;
    break;}
case 71:
#line 297 "parser.y"
{ yyval = new DataType(8); ;
    break;}
case 72:
#line 302 "parser.y"
{ yyval = new Column(strData[0]); ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_Parser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_Parser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_Parser_LLOC.first_line;
      yylsp->first_column = YY_Parser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_Parser_NERRS;

#ifdef YY_Parser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_Parser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_Parser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_Parser_ERROR_VERBOSE */
	YY_Parser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_Parser_CHAR == YYEOF)
	YYABORT;

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_Parser_CHAR, yytname[yychar1]);
#endif

      YY_Parser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_Parser_LSP_NEEDED
  yylsp--;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 305 "parser.y"

