#define YY_Parser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from parser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_Parser_LSP_NEEDED 
#define YY_Parser_MEMBERS                  \
    virtual ~Parser()   {} \
    void parse(const string & inputStr) { istringstream ss(inputStr); lexer.switch_streams(&ss,0);  yyparse(); /*yy_scan_string(inputStr); */ } \
    private:                   \
       yyFlexLexer lexer;
#define YY_Parser_LEX_BODY  {return lexer.yylex();}
#define YY_Parser_ERROR_BODY  {cerr << "error encountered at line: "<<lexer.lineno()<<" last word parsed:"<<lexer.YYText()<<"\n";}
#line 11 "parser.y"

#include <iostream>
#include <fstream>
#include <FlexLexer.h>
#include <cstdlib>
#include <string>
#include <sstream>

// AST nodes
#include "ast/ASTNode.h"
#include "ast/Program.h"
#include "ast/SQLList.h"
#include "ast/SQL.h"
#include "ast/Schema.h"
#include "ast/BaseTableDef.h"
#include "ast/Table.h"
#include "ast/ColumnDef.h"
#include "ast/ColumnCommalist.h"
#include "ast/TableConstraintDef.h"
#include "ast/BaseTableElementCommalist.h"
#include "ast/BaseTableElement.h"
#include "ast/ColumnDefOpt.h"
#include "ast/ColumnDefOptList.h"
#include "ast/Literal.h"
#include "ast/DataType.h"
#include "ast/Column.h"

#include "ast/ManipulativeStatement.h"
#include "ast/SelectStatement.h"
#include "ast/Selection.h"
#include "ast/OptAllDistinct.h"
#include "ast/TableExp.h"
#include "ast/FromClause.h"
#include "ast/TableRefCommalist.h"
#include "ast/TableRef.h"

#include "ast/InsertStatement.h"
#include "ast/OptColumnCommalist.h"
#include "ast/ValuesOrQuerySpec.h"
#include "ast/QuerySpec.h"
#include "ast/InsertAtomCommalist.h"
#include "ast/InsertAtom.h"
#include "ast/Atom.h"

#include "ast/SearchCondition.h"
#include "ast/ScalarExpCommalist.h"
#include "ast/ScalarExp.h"
#include "ast/FunctionRef.h"
#include "ast/Ammsc.h"
#include "ast/Predicate.h"
#include "ast/ComparisonPredicate.h"
#include "ast/BetweenPredicate.h"
#include "ast/LikePredicate.h"
#include "ast/OptEscape.h"
#include "ast/ColumnRef.h"

#include "ast/ColumnRefCommalist.h"
#include "ast/OptWhereClause.h"
#include "ast/OptGroupByClause.h"
#include "ast/OptHavingClause.h"
#include "ast/OptLimitClause.h"
#include "ast/OptAscDesc.h"
#include "ast/OrderingSpecCommalist.h"
#include "ast/OrderingSpec.h"
#include "ast/OptOrderByClause.h"

#include "ast/UpdateStatementSearched.h"
#include "ast/UpdateStatementPositioned.h"
#include "ast/AssignmentCommalist.h"
#include "ast/Assignment.h"
#include "ast/Cursor.h"


// define stack element type to be a 
// pointer to an AST node
#define YY_Parser_STYPE ASTNode*

extern ASTNode* parse_root;

// Variables declared in scanner.l
extern std::string strData[10];
extern double dData;

using namespace std;


#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_Parser_BISON 1

#ifndef YY_Parser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_Parser_COMPATIBILITY 1
 #else
  #define  YY_Parser_COMPATIBILITY 0
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_Parser_LTYPE
   #define YY_Parser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_Parser_STYPE 
   #define YY_Parser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_Parser_DEBUG
   #define  YY_Parser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_Parser_USE_GOTO
  #define YY_Parser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_Parser_USE_GOTO
 #define YY_Parser_USE_GOTO 0
#endif

#ifndef YY_Parser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_Parser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"
#ifndef YY_USE_CLASS
# ifndef YYSTYPE
#  define YYSTYPE int
#  define YYSTYPE_IS_TRIVIAL 1
# endif
#endif

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_Parser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_Parser_DEBUG */
#endif


#ifndef YY_Parser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_Parser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_Parser_LSP_NEEDED
#ifndef YY_Parser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_Parser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_Parser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_Parser_STYPE
#define YY_Parser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_Parser_PARSE
#define YY_Parser_PARSE yyparse
#endif
#ifndef YY_Parser_LEX
#define YY_Parser_LEX yylex
#endif
#ifndef YY_Parser_LVAL
#define YY_Parser_LVAL yylval
#endif
#ifndef YY_Parser_LLOC
#define YY_Parser_LLOC yylloc
#endif
#ifndef YY_Parser_CHAR
#define YY_Parser_CHAR yychar
#endif
#ifndef YY_Parser_NERRS
#define YY_Parser_NERRS yynerrs
#endif
#ifndef YY_Parser_DEBUG_FLAG
#define YY_Parser_DEBUG_FLAG yydebug
#endif
#ifndef YY_Parser_ERROR
#define YY_Parser_ERROR yyerror
#endif

#ifndef YY_Parser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_Parser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_Parser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_Parser_PARSE_PARAM
  #define YY_Parser_PARSE_PARAM void
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_Parser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_Parser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_Parser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_Parser_PURE
#  ifndef YYPURE
#    define YYPURE YY_Parser_PURE
#  endif
#endif

#ifdef YY_Parser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_Parser_DEBUG 
#  endif
#endif

#ifndef YY_Parser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_Parser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_Parser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_Parser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	OR	258
#define	AND	259
#define	NOT	260
#define	COMPARISON	261
#define	UMINUS	262
#define	AS	263
#define	DROP	264
#define	NAME	265
#define	TABLE	266
#define	CREATE	267
#define	INTNUM	268
#define	STRING	269
#define	APPROXNUM	270
#define	UNKNOWN	271
#define	ALL	272
#define	BETWEEN	273
#define	BY	274
#define	DISTINCT	275
#define	FROM	276
#define	GROUP	277
#define	HAVING	278
#define	SELECT	279
#define	USER	280
#define	WHERE	281
#define	WITH	282
#define	EMPTY	283
#define	SELALL	284
#define	DOT	285
#define	UPDATE	286
#define	SET	287
#define	CURRENT	288
#define	OF	289
#define	NULLX	290
#define	ASSIGN	291
#define	INSERT	292
#define	INTO	293
#define	VALUES	294
#define	UNIQUE	295
#define	PRIMARY	296
#define	FOREIGN	297
#define	KEY	298
#define	CHECK	299
#define	REFERENCES	300
#define	DEFAULT	301
#define	DATATYPE	302
#define	DECIMAL	303
#define	SMALLINT	304
#define	NUMERIC	305
#define	CHARACTER	306
#define	INTEGER	307
#define	REAL	308
#define	FLOAT	309
#define	DOUBLE	310
#define	PRECISION	311
#define	VARCHAR	312
#define	AVG	313
#define	MAX	314
#define	MIN	315
#define	SUM	316
#define	COUNT	317
#define	ALIAS	318
#define	INTORDER	319
#define	COLORDER	320
#define	ORDER	321
#define	ASC	322
#define	DESC	323
#define	LIMIT	324
#define	OFFSET	325
#define	DOTNAME	326
#define	ESCAPE	327
#define	LIKE	328


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_Parser_CLASS
#define YY_Parser_CLASS Parser
#endif
#ifndef YY_Parser_INHERIT
#define YY_Parser_INHERIT
#endif
#ifndef YY_Parser_MEMBERS
#define YY_Parser_MEMBERS 
#endif
#ifndef YY_Parser_LEX_BODY
#define YY_Parser_LEX_BODY  
#endif
#ifndef YY_Parser_ERROR_BODY
#define YY_Parser_ERROR_BODY  
#endif
#ifndef YY_Parser_CONSTRUCTOR_PARAM
#define YY_Parser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_Parser_CONSTRUCTOR_CODE
#define YY_Parser_CONSTRUCTOR_CODE
#endif
#ifndef YY_Parser_CONSTRUCTOR_INIT
#define YY_Parser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_Parser_USE_CONST_TOKEN
#define YY_Parser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_Parser_USE_CONST_TOKEN != 0
#ifndef YY_Parser_ENUM_TOKEN
#define YY_Parser_ENUM_TOKEN yy_Parser_enum_token
#endif
#endif

class YY_Parser_CLASS YY_Parser_INHERIT
{
public: 
#if YY_Parser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int OR;
static const int AND;
static const int NOT;
static const int COMPARISON;
static const int UMINUS;
static const int AS;
static const int DROP;
static const int NAME;
static const int TABLE;
static const int CREATE;
static const int INTNUM;
static const int STRING;
static const int APPROXNUM;
static const int UNKNOWN;
static const int ALL;
static const int BETWEEN;
static const int BY;
static const int DISTINCT;
static const int FROM;
static const int GROUP;
static const int HAVING;
static const int SELECT;
static const int USER;
static const int WHERE;
static const int WITH;
static const int EMPTY;
static const int SELALL;
static const int DOT;
static const int UPDATE;
static const int SET;
static const int CURRENT;
static const int OF;
static const int NULLX;
static const int ASSIGN;
static const int INSERT;
static const int INTO;
static const int VALUES;
static const int UNIQUE;
static const int PRIMARY;
static const int FOREIGN;
static const int KEY;
static const int CHECK;
static const int REFERENCES;
static const int DEFAULT;
static const int DATATYPE;
static const int DECIMAL;
static const int SMALLINT;
static const int NUMERIC;
static const int CHARACTER;
static const int INTEGER;
static const int REAL;
static const int FLOAT;
static const int DOUBLE;
static const int PRECISION;
static const int VARCHAR;
static const int AVG;
static const int MAX;
static const int MIN;
static const int SUM;
static const int COUNT;
static const int ALIAS;
static const int INTORDER;
static const int COLORDER;
static const int ORDER;
static const int ASC;
static const int DESC;
static const int LIMIT;
static const int OFFSET;
static const int DOTNAME;
static const int ESCAPE;
static const int LIKE;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_Parser_ENUM_TOKEN { YY_Parser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,OR=258
	,AND=259
	,NOT=260
	,COMPARISON=261
	,UMINUS=262
	,AS=263
	,DROP=264
	,NAME=265
	,TABLE=266
	,CREATE=267
	,INTNUM=268
	,STRING=269
	,APPROXNUM=270
	,UNKNOWN=271
	,ALL=272
	,BETWEEN=273
	,BY=274
	,DISTINCT=275
	,FROM=276
	,GROUP=277
	,HAVING=278
	,SELECT=279
	,USER=280
	,WHERE=281
	,WITH=282
	,EMPTY=283
	,SELALL=284
	,DOT=285
	,UPDATE=286
	,SET=287
	,CURRENT=288
	,OF=289
	,NULLX=290
	,ASSIGN=291
	,INSERT=292
	,INTO=293
	,VALUES=294
	,UNIQUE=295
	,PRIMARY=296
	,FOREIGN=297
	,KEY=298
	,CHECK=299
	,REFERENCES=300
	,DEFAULT=301
	,DATATYPE=302
	,DECIMAL=303
	,SMALLINT=304
	,NUMERIC=305
	,CHARACTER=306
	,INTEGER=307
	,REAL=308
	,FLOAT=309
	,DOUBLE=310
	,PRECISION=311
	,VARCHAR=312
	,AVG=313
	,MAX=314
	,MIN=315
	,SUM=316
	,COUNT=317
	,ALIAS=318
	,INTORDER=319
	,COLORDER=320
	,ORDER=321
	,ASC=322
	,DESC=323
	,LIMIT=324
	,OFFSET=325
	,DOTNAME=326
	,ESCAPE=327
	,LIKE=328


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_Parser_PARSE (YY_Parser_PARSE_PARAM);
 virtual void YY_Parser_ERROR(char *msg) YY_Parser_ERROR_BODY;
#ifdef YY_Parser_PURE
#ifdef YY_Parser_LSP_NEEDED
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL,YY_Parser_LTYPE *YY_Parser_LLOC) YY_Parser_LEX_BODY;
#else
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL) YY_Parser_LEX_BODY;
#endif
#else
 virtual int YY_Parser_LEX() YY_Parser_LEX_BODY;
 YY_Parser_STYPE YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
 YY_Parser_LTYPE YY_Parser_LLOC;
#endif
 int   YY_Parser_NERRS;
 int    YY_Parser_CHAR;
#endif
#if YY_Parser_DEBUG != 0
 int YY_Parser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM);
public:
 YY_Parser_MEMBERS 
};
/* other declare folow */
#if YY_Parser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_Parser_CLASS::OR=258;
const int YY_Parser_CLASS::AND=259;
const int YY_Parser_CLASS::NOT=260;
const int YY_Parser_CLASS::COMPARISON=261;
const int YY_Parser_CLASS::UMINUS=262;
const int YY_Parser_CLASS::AS=263;
const int YY_Parser_CLASS::DROP=264;
const int YY_Parser_CLASS::NAME=265;
const int YY_Parser_CLASS::TABLE=266;
const int YY_Parser_CLASS::CREATE=267;
const int YY_Parser_CLASS::INTNUM=268;
const int YY_Parser_CLASS::STRING=269;
const int YY_Parser_CLASS::APPROXNUM=270;
const int YY_Parser_CLASS::UNKNOWN=271;
const int YY_Parser_CLASS::ALL=272;
const int YY_Parser_CLASS::BETWEEN=273;
const int YY_Parser_CLASS::BY=274;
const int YY_Parser_CLASS::DISTINCT=275;
const int YY_Parser_CLASS::FROM=276;
const int YY_Parser_CLASS::GROUP=277;
const int YY_Parser_CLASS::HAVING=278;
const int YY_Parser_CLASS::SELECT=279;
const int YY_Parser_CLASS::USER=280;
const int YY_Parser_CLASS::WHERE=281;
const int YY_Parser_CLASS::WITH=282;
const int YY_Parser_CLASS::EMPTY=283;
const int YY_Parser_CLASS::SELALL=284;
const int YY_Parser_CLASS::DOT=285;
const int YY_Parser_CLASS::UPDATE=286;
const int YY_Parser_CLASS::SET=287;
const int YY_Parser_CLASS::CURRENT=288;
const int YY_Parser_CLASS::OF=289;
const int YY_Parser_CLASS::NULLX=290;
const int YY_Parser_CLASS::ASSIGN=291;
const int YY_Parser_CLASS::INSERT=292;
const int YY_Parser_CLASS::INTO=293;
const int YY_Parser_CLASS::VALUES=294;
const int YY_Parser_CLASS::UNIQUE=295;
const int YY_Parser_CLASS::PRIMARY=296;
const int YY_Parser_CLASS::FOREIGN=297;
const int YY_Parser_CLASS::KEY=298;
const int YY_Parser_CLASS::CHECK=299;
const int YY_Parser_CLASS::REFERENCES=300;
const int YY_Parser_CLASS::DEFAULT=301;
const int YY_Parser_CLASS::DATATYPE=302;
const int YY_Parser_CLASS::DECIMAL=303;
const int YY_Parser_CLASS::SMALLINT=304;
const int YY_Parser_CLASS::NUMERIC=305;
const int YY_Parser_CLASS::CHARACTER=306;
const int YY_Parser_CLASS::INTEGER=307;
const int YY_Parser_CLASS::REAL=308;
const int YY_Parser_CLASS::FLOAT=309;
const int YY_Parser_CLASS::DOUBLE=310;
const int YY_Parser_CLASS::PRECISION=311;
const int YY_Parser_CLASS::VARCHAR=312;
const int YY_Parser_CLASS::AVG=313;
const int YY_Parser_CLASS::MAX=314;
const int YY_Parser_CLASS::MIN=315;
const int YY_Parser_CLASS::SUM=316;
const int YY_Parser_CLASS::COUNT=317;
const int YY_Parser_CLASS::ALIAS=318;
const int YY_Parser_CLASS::INTORDER=319;
const int YY_Parser_CLASS::COLORDER=320;
const int YY_Parser_CLASS::ORDER=321;
const int YY_Parser_CLASS::ASC=322;
const int YY_Parser_CLASS::DESC=323;
const int YY_Parser_CLASS::LIMIT=324;
const int YY_Parser_CLASS::OFFSET=325;
const int YY_Parser_CLASS::DOTNAME=326;
const int YY_Parser_CLASS::ESCAPE=327;
const int YY_Parser_CLASS::LIKE=328;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_Parser_CLASS::token */
#endif
/*apres const  */
YY_Parser_CLASS::YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM) YY_Parser_CONSTRUCTOR_INIT
{
#if YY_Parser_DEBUG != 0
YY_Parser_DEBUG_FLAG=0;
#endif
YY_Parser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		270
#define	YYFLAG		-32768
#define	YYNTBASE	83

#define YYTRANSLATE(x) ((unsigned)(x) <= 328 ? yytranslate[x] : 139)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    80,
    81,     9,     7,    82,     8,    11,    10,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    79,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78
};

#if YY_Parser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,    10,    12,    13,    17,    19,    26,
    30,    32,    36,    38,    40,    44,    45,    48,    51,    55,
    60,    63,    66,    69,    74,    77,    83,    88,    94,   102,
   113,   115,   119,   120,   124,   126,   130,   133,   136,   137,
   139,   141,   143,   145,   147,   149,   151,   157,   162,   164,
   166,   170,   172,   174,   179,   181,   183,   184,   193,   194,
   196,   200,   204,   208,   214,   219,   221,   222,   224,   231,
   234,   236,   240,   242,   245,   246,   247,   251,   253,   257,
   260,   261,   262,   265,   269,   273,   276,   280,   282,   284,
   286,   288,   292,   299,   305,   311,   316,   317,   320,   322,
   326,   330,   334,   338,   342,   345,   348,   350,   352,   354,
   358,   360,   362,   367,   373,   379,   384,   386,   388,   390,
   394,   398,   400,   405,   407,   412,   414,   419,   421,   426,
   428,   430,   432,   437,   439,   442,   444,   448,   454,   458,
   460,   462,   464,   466,   468,   470
};

static const short yyrhs[] = {    84,
     0,     0,    85,    79,     0,    84,    85,    79,     0,    87,
     0,     0,    80,    95,    81,     0,    88,     0,    17,    16,
   133,    80,    89,    81,     0,    14,    16,   133,     0,    90,
     0,    89,    82,    90,     0,    91,     0,    94,     0,   136,
   134,    92,     0,     0,    92,    93,     0,     5,    40,     0,
     5,    40,    45,     0,     5,    40,    46,    48,     0,    51,
   132,     0,    51,    40,     0,    51,    30,     0,    49,    80,
   122,    81,     0,    50,   133,     0,    50,   133,    80,    95,
    81,     0,    45,    80,    95,    81,     0,    46,    48,    80,
    95,    81,     0,    47,    48,    80,    95,    81,    50,   133,
     0,    47,    48,    80,    95,    81,    50,   133,    80,    95,
    81,     0,   136,     0,    95,    82,   136,     0,     0,    71,
    24,    97,     0,    98,     0,    97,    82,    98,     0,    18,
    99,     0,   135,    99,     0,     0,    72,     0,    73,     0,
   100,     0,   105,     0,   101,     0,   107,     0,   110,     0,
    42,    43,   133,    86,   102,     0,    44,    80,   103,    81,
     0,   111,     0,   104,     0,   103,    82,   104,     0,   130,
     0,    40,     0,    29,   106,   112,   113,     0,    22,     0,
    25,     0,     0,    36,   133,    37,   108,    31,    38,    39,
   137,     0,     0,   109,     0,   108,    82,   109,     0,   136,
     6,   129,     0,   136,     6,    40,     0,    36,   133,    37,
   108,   117,     0,    29,   106,   112,   113,     0,   128,     0,
     0,     9,     0,   114,   117,   118,   120,    96,   121,     0,
    26,   115,     0,   116,     0,   115,    82,   116,     0,   133,
     0,    31,   122,     0,     0,     0,    27,    24,   119,     0,
   135,     0,   119,    82,   135,     0,    28,   122,     0,     0,
     0,    74,    18,     0,   122,     3,   122,     0,   122,     4,
   122,     0,     5,   122,     0,    80,   122,    81,     0,   123,
     0,   124,     0,   125,     0,   126,     0,   129,     6,   129,
     0,   129,     5,    23,   129,     4,   129,     0,   129,    23,
   129,     4,   129,     0,   129,     5,    78,   130,   127,     0,
   129,    78,   130,   127,     0,     0,    77,   130,     0,   129,
     0,   128,    82,   129,     0,   129,     7,   129,     0,   129,
     8,   129,     0,   129,     9,   129,     0,   129,    10,   129,
     0,     7,   129,     0,     8,   129,     0,   130,     0,   135,
     0,   131,     0,    80,   129,    81,     0,   132,     0,    30,
     0,   138,    80,     9,    81,     0,   138,    80,    25,   135,
    81,     0,   138,    80,    22,   129,    81,     0,   138,    80,
   129,    81,     0,    19,     0,    18,     0,    15,     0,    15,
    11,    15,     0,    15,    13,    15,     0,    56,     0,    56,
    80,    18,    81,     0,    62,     0,    62,    80,    18,    81,
     0,    55,     0,    55,    80,    18,    81,     0,    53,     0,
    53,    80,    18,    81,     0,    57,     0,    54,     0,    59,
     0,    59,    80,    18,    81,     0,    58,     0,    60,    61,
     0,    15,     0,    15,    11,    15,     0,    15,    11,    15,
    11,    15,     0,    15,    13,    15,     0,    15,     0,    15,
     0,    63,     0,    65,     0,    64,     0,    66,     0,    67,
     0
};

#endif

#if (YY_Parser_DEBUG != 0) || defined(YY_Parser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   139,   140,   144,   145,   149,   152,   154,   158,   162,   163,
   167,   168,   172,   173,   177,   180,   182,   185,   188,   189,
   190,   191,   192,   193,   194,   195,   199,   200,   201,   202,
   206,   208,   211,   213,   216,   218,   221,   223,   226,   228,
   229,   235,   239,   241,   242,   243,   258,   262,   264,   267,
   269,   272,   274,   277,   283,   285,   286,   289,   294,   296,
   297,   300,   302,   305,   309,   313,   314,   315,   318,   328,
   332,   334,   337,   342,   344,   347,   349,   352,   354,   357,
   359,   362,   364,   369,   371,   372,   373,   374,   377,   379,
   380,   387,   392,   394,   397,   399,   402,   404,   407,   409,
   412,   414,   415,   416,   417,   418,   419,   420,   421,   422,
   425,   428,   431,   433,   434,   435,   439,   440,   445,   446,
   447,   453,   454,   455,   456,   457,   458,   460,   461,   463,
   464,   465,   466,   467,   468,   471,   473,   474,   475,   479,
   483,   486,   488,   489,   490,   491
};

static const char * const yytname[] = {   "$","error","$illegal.","OR","AND",
"NOT","COMPARISON","'+'","'-'","'*'","'/'","'.'","UMINUS","AS","DROP","NAME",
"TABLE","CREATE","INTNUM","STRING","APPROXNUM","UNKNOWN","ALL","BETWEEN","BY",
"DISTINCT","FROM","GROUP","HAVING","SELECT","USER","WHERE","WITH","EMPTY","SELALL",
"DOT","UPDATE","SET","CURRENT","OF","NULLX","ASSIGN","INSERT","INTO","VALUES",
"UNIQUE","PRIMARY","FOREIGN","KEY","CHECK","REFERENCES","DEFAULT","DATATYPE",
"DECIMAL","SMALLINT","NUMERIC","CHARACTER","INTEGER","REAL","FLOAT","DOUBLE",
"PRECISION","VARCHAR","AVG","MAX","MIN","SUM","COUNT","ALIAS","INTORDER","COLORDER",
"ORDER","ASC","DESC","LIMIT","OFFSET","DOTNAME","ESCAPE","LIKE","';'","'('",
"')'","','","program","sql_list","sql","opt_column_commalist","schema","base_table_def",
"base_table_element_commalist","base_table_element","column_def","column_def_opt_list",
"column_def_opt","table_constraint_def","column_commalist","opt_order_by_clause",
"ordering_spec_commalist","ordering_spec","opt_asc_desc","manipulative_statement",
"insert_statement","values_or_query_spec","insert_atom_commalist","insert_atom",
"select_statement","opt_all_distinct","update_statement_positioned","assignment_commalist",
"assignment","update_statement_searched","query_spec","selection","table_exp",
"from_clause","table_ref_commalist","table_ref","opt_where_clause","opt_group_by_clause",
"column_ref_commalist","opt_having_clause","opt_limit_clause","search_condition",
"predicate","comparison_predicate","between_predicate","like_predicate","opt_escape",
"scalar_exp_commalist","scalar_exp","atom","function_ref","literal","table",
"data_type","column_ref","column","cursor","ammsc",""
};
#endif

static const short yyr1[] = {     0,
    83,    83,    84,    84,    85,    86,    86,    87,    88,    88,
    89,    89,    90,    90,    91,    92,    92,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    94,    94,    94,    94,
    95,    95,    96,    96,    97,    97,    98,    98,    99,    99,
    99,    85,   100,   100,   100,   100,   101,   102,   102,   103,
   103,   104,   104,   105,   106,   106,   106,   107,   108,   108,
   108,   109,   109,   110,   111,   112,   112,   112,   113,   114,
   115,   115,   116,   117,   117,   118,   118,   119,   119,   120,
   120,   121,   121,   122,   122,   122,   122,   122,   123,   123,
   123,   124,   125,   125,   126,   126,   127,   127,   128,   128,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   130,   130,   131,   131,   131,   131,   132,   132,   133,   133,
   133,   134,   134,   134,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   135,   135,   135,   135,   136,
   137,   138,   138,   138,   138,   138
};

static const short yyr2[] = {     0,
     1,     0,     2,     3,     1,     0,     3,     1,     6,     3,
     1,     3,     1,     1,     3,     0,     2,     2,     3,     4,
     2,     2,     2,     4,     2,     5,     4,     5,     7,    10,
     1,     3,     0,     3,     1,     3,     2,     2,     0,     1,
     1,     1,     1,     1,     1,     1,     5,     4,     1,     1,
     3,     1,     1,     4,     1,     1,     0,     8,     0,     1,
     3,     3,     3,     5,     4,     1,     0,     1,     6,     2,
     1,     3,     1,     2,     0,     0,     3,     1,     3,     2,
     0,     0,     2,     3,     3,     2,     3,     1,     1,     1,
     1,     3,     6,     5,     5,     4,     0,     2,     1,     3,
     3,     3,     3,     3,     2,     2,     1,     1,     1,     3,
     1,     1,     4,     5,     5,     4,     1,     1,     1,     3,
     3,     1,     4,     1,     4,     1,     4,     1,     4,     1,
     1,     1,     4,     1,     2,     1,     3,     5,     3,     1,
     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     2,
     0,     0,    57,     0,     0,     1,     0,     5,     8,    42,
    44,    43,    45,    46,     0,     0,    55,    56,    67,   119,
     0,     0,     0,     3,    10,     0,     0,     0,    68,   136,
   118,   117,   112,   142,   144,   143,   145,   146,     0,     0,
    66,    99,   107,   109,   111,   108,     0,     0,     0,    59,
     6,     4,     0,   105,   106,     0,     0,     0,     0,    54,
    75,     0,     0,     0,     0,     0,     0,   120,   121,   140,
    75,    60,     0,     0,     0,     0,     0,     0,     0,    11,
    13,    14,     0,   137,   139,   110,    70,    71,    73,     0,
    76,   100,   101,   102,   103,   104,     0,     0,     0,     0,
     0,     0,    64,     0,     0,    31,    57,     0,    47,    49,
     0,     0,     0,     9,     0,   128,   131,   126,   122,   130,
   134,   132,     0,   124,    16,     0,     0,     0,     0,    74,
    88,    89,    90,    91,     0,     0,    81,   113,     0,     0,
   116,     0,    61,    63,    62,     7,     0,    67,     0,     0,
     0,     0,    12,     0,     0,     0,     0,   135,     0,    15,
   138,    72,    86,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    33,   115,   114,     0,    32,     0,    53,
     0,    50,    52,    27,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    17,    87,    84,    85,     0,
     0,    92,     0,    97,    77,    78,    80,     0,    82,   141,
    58,    65,    48,     0,    28,     0,   129,   127,   123,   133,
   125,    18,     0,    25,    23,    22,    21,     0,    97,     0,
     0,    96,     0,     0,     0,    69,    51,     0,    19,     0,
     0,     0,     0,    95,    94,    98,    79,    39,    34,    35,
    39,    83,    29,    20,    24,     0,    93,    40,    41,    37,
     0,    38,     0,    26,    36,     0,    30,     0,     0,     0
};

static const short yydefgoto[] = {   268,
     6,     7,    75,     8,     9,    79,    80,    81,   160,   196,
    82,   105,   209,   249,   250,   260,    10,    11,   109,   181,
   182,    12,    19,    13,    71,    72,    14,   110,    40,    60,
    61,    87,    88,    91,   137,   205,   174,   236,   130,   131,
   132,   133,   134,   232,    41,   135,    43,    44,    45,    89,
   125,    46,   106,   211,    47
};

static const short yypact[] = {    52,
    -8,    26,    16,    36,   -26,    52,   -23,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    36,    36,-32768,-32768,   196,    39,
    50,    36,    12,-32768,-32768,    30,   267,   267,-32768,    54,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   267,    71,
    21,   131,-32768,-32768,-32768,-32768,    37,   108,   110,   114,
    62,-32768,    81,-32768,-32768,   139,   141,    23,    36,-32768,
   142,   267,   267,   267,   267,   267,   176,-32768,-32768,-32768,
     8,-32768,   156,   114,    -1,   112,   172,   175,     2,-32768,
-32768,-32768,   211,   191,-32768,-32768,   146,-32768,-32768,    94,
   197,   131,   106,   106,-32768,-32768,   149,   267,   212,    27,
    55,   114,-32768,   214,    65,-32768,    16,   155,-32768,-32768,
   114,   157,   158,-32768,    81,   165,-32768,   167,   173,-32768,
-32768,   177,   194,   178,-32768,   216,    36,    94,    94,   145,
-32768,-32768,-32768,-32768,   170,   248,   208,-32768,    69,   202,
-32768,   245,-32768,-32768,   131,-32768,   114,   196,   113,    86,
   114,   114,-32768,   269,   270,   271,   272,-32768,   273,    56,
-32768,-32768,-32768,     1,    17,    94,    94,    -7,   267,   267,
   151,   212,    94,   221,-32768,-32768,   278,-32768,    71,-32768,
    90,-32768,-32768,-32768,   105,   107,   215,   217,   218,   219,
   220,   255,   222,    36,   115,-32768,-32768,   299,-32768,   267,
   151,   131,   209,   227,   223,-32768,   145,   282,   233,-32768,
-32768,-32768,-32768,   113,-32768,   258,-32768,-32768,-32768,-32768,
-32768,   154,    94,   229,-32768,-32768,-32768,   242,   227,   267,
   151,-32768,   212,   148,   292,-32768,-32768,    36,-32768,   263,
    11,   114,   267,-32768,   131,-32768,-32768,   124,   230,-32768,
   124,-32768,   234,-32768,-32768,   126,   131,-32768,-32768,-32768,
   148,-32768,   114,-32768,-32768,   128,-32768,   313,   315,-32768
};

static const short yypgoto[] = {-32768,
-32768,   310,-32768,-32768,-32768,-32768,   203,-32768,-32768,-32768,
-32768,   -98,-32768,-32768,    58,    66,-32768,-32768,-32768,-32768,
   109,-32768,   213,-32768,-32768,   224,-32768,-32768,   174,   150,
-32768,-32768,   198,   250,-32768,-32768,-32768,-32768,  -109,-32768,
-32768,-32768,-32768,    95,-32768,   -18,  -142,-32768,   132,    -4,
-32768,   -97,   -47,-32768,-32768
};


#define	YYLAST		347


static const short yytable[] = {    21,
    42,   140,    73,   166,   167,    83,   183,    15,    54,    55,
    25,    26,   150,   166,   167,   200,    22,    51,   163,   164,
    58,   168,   169,    63,    64,    65,    66,   107,   204,    63,
    64,    65,    66,    63,    64,    65,    66,    17,   101,   170,
    18,    16,   108,    92,    93,    94,    95,    96,   100,    48,
    20,    49,   185,   186,    73,    24,   198,   199,   229,   128,
   192,    27,    28,   207,    56,     1,    57,    83,     2,    30,
   201,   183,    31,    32,   206,    63,    64,    65,    66,   139,
     3,   197,   114,   115,    33,   145,    50,     4,   246,   102,
    52,   255,   142,     5,   171,    70,    59,    86,   128,   178,
    27,    28,    62,    86,   193,   194,   195,   141,    30,    53,
   165,    31,    32,   241,    65,    66,    67,    34,    35,    36,
    37,    38,    68,    33,    69,    76,    77,    78,    70,    42,
    31,    32,    31,    32,   129,   247,   251,    63,    64,    65,
    66,    74,    33,   256,   225,   146,   147,   166,   167,   175,
   202,   203,   180,    84,   226,    85,    34,    35,    36,    37,
    38,   104,    30,   251,   266,   248,   184,   147,    31,    32,
   213,   214,    90,   129,   168,   169,    63,    64,    65,    66,
    33,   228,    27,    28,    97,   215,   147,   216,   147,   224,
    30,   111,   170,    31,    32,   258,   259,    98,   239,   240,
    99,   126,    27,    28,    29,    33,   264,   147,   267,   147,
    30,   245,   230,    31,    32,    63,    64,    65,    66,   112,
    27,    28,   113,   136,   257,    33,    30,   127,    30,   138,
   161,    31,    32,   253,   149,   173,   151,   152,    34,    35,
    36,    37,    38,    33,   154,   243,   155,   171,    63,    64,
    65,    66,   156,   144,   158,    39,   157,   159,    34,    35,
    36,    37,    38,   116,   117,   118,   119,   120,   121,   122,
   123,   172,   124,    27,    28,    39,    34,    35,    36,    37,
    38,    30,   176,   177,    31,    32,   187,   188,   189,   190,
   191,   208,   210,    39,   222,   217,    33,   218,   219,   220,
   221,   223,   167,   231,   233,   234,   235,   238,   242,   252,
   254,   261,   269,   263,   270,    23,   262,   153,   265,   148,
   103,   179,   237,   244,   162,   143,   227,     0,   212,    34,
    35,    36,    37,    38,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    39
};

static const short yycheck[] = {     4,
    19,    99,    50,     3,     4,    53,   149,    16,    27,    28,
    15,    16,   111,     3,     4,    23,    43,    22,   128,   129,
    39,     5,     6,     7,     8,     9,    10,    29,   171,     7,
     8,     9,    10,     7,     8,     9,    10,    22,    31,    23,
    25,    16,    44,    62,    63,    64,    65,    66,    67,    11,
    15,    13,   151,   152,   102,    79,   166,   167,   201,     5,
     5,     7,     8,   173,    11,    14,    13,   115,    17,    15,
    78,   214,    18,    19,   172,     7,     8,     9,    10,    98,
    29,    81,    81,    82,    30,   104,    37,    36,   231,    82,
    79,    81,    38,    42,    78,    15,    26,    81,     5,   147,
     7,     8,    82,    81,    49,    50,    51,    81,    15,    80,
   129,    18,    19,   223,     9,    10,    80,    63,    64,    65,
    66,    67,    15,    30,    15,    45,    46,    47,    15,   148,
    18,    19,    18,    19,    80,   233,   234,     7,     8,     9,
    10,    80,    30,   242,    30,    81,    82,     3,     4,    81,
   169,   170,    40,    15,    40,    15,    63,    64,    65,    66,
    67,     6,    15,   261,   263,    18,    81,    82,    18,    19,
    81,    82,    31,    80,     5,     6,     7,     8,     9,    10,
    30,   200,     7,     8,     9,    81,    82,    81,    82,   194,
    15,    80,    23,    18,    19,    72,    73,    22,    45,    46,
    25,    11,     7,     8,     9,    30,    81,    82,    81,    82,
    15,   230,     4,    18,    19,     7,     8,     9,    10,    48,
     7,     8,    48,    27,   243,    30,    15,    82,    15,    81,
    15,    18,    19,   238,    80,    28,    80,    80,    63,    64,
    65,    66,    67,    30,    80,     4,    80,    78,     7,     8,
     9,    10,    80,    40,    61,    80,    80,    80,    63,    64,
    65,    66,    67,    53,    54,    55,    56,    57,    58,    59,
    60,    24,    62,     7,     8,    80,    63,    64,    65,    66,
    67,    15,    81,    39,    18,    19,    18,    18,    18,    18,
    18,    71,    15,    80,    40,    81,    30,    81,    81,    81,
    81,    80,     4,    77,    82,    24,    74,    50,    80,    18,
    48,    82,     0,    80,     0,     6,   251,   115,   261,   107,
    71,   148,   214,   229,   127,   102,   195,    -1,   179,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    80
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_Parser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_Parser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_Parser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_Parser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_Parser_CHAR = (token), YY_Parser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_Parser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_Parser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_Parser_PURE
/* UNPURE */
#define YYLEX           YY_Parser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_Parser_CHAR;                      /*  the lookahead symbol        */
YY_Parser_STYPE      YY_Parser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_Parser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_Parser_LSP_NEEDED
YY_Parser_LTYPE YY_Parser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_Parser_LSP_NEEDED
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL, &YY_Parser_LLOC)
#else
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_Parser_DEBUG != 0
int YY_Parser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_Parser_CLASS::
#endif
     YY_Parser_PARSE(YY_Parser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_Parser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_Parser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_Parser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_Parser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_Parser_LTYPE *yyls = yylsa;
  YY_Parser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_Parser_PURE
  int YY_Parser_CHAR;
  YY_Parser_STYPE YY_Parser_LVAL;
  int YY_Parser_NERRS;
#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE YY_Parser_LLOC;
#endif
#endif

  YY_Parser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_Parser_NERRS = 0;
  YY_Parser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_Parser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_Parser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_Parser_LSP_NEEDED
      YY_Parser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_Parser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_Parser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_Parser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_Parser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_Parser_LSP_NEEDED
      yyls = (YY_Parser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_Parser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_Parser_CHAR == YYEMPTY)
    {
#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_Parser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_Parser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_Parser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_Parser_CHAR);

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_Parser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_Parser_CHAR, YY_Parser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_Parser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_Parser_CHAR != YYEOF)
    YY_Parser_CHAR = YYEMPTY;

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 139 "parser.y"
{ yyval = new Program((SQLList*)yyvsp[0]); parse_root = yyval; ;
    break;}
case 2:
#line 140 "parser.y"
{ yyval = 0; parse_root = yyval; ;
    break;}
case 3:
#line 144 "parser.y"
{ yyval = new SQLList((SQL*)yyvsp[-1]); ;
    break;}
case 4:
#line 145 "parser.y"
{ yyval = new SQLList((SQLList*)yyvsp[-2], (SQL*)yyvsp[-1]); ;
    break;}
case 5:
#line 149 "parser.y"
{ yyval = new SQL((Schema*)yyvsp[0]); ;
    break;}
case 6:
#line 153 "parser.y"
{ yyval = new OptColumnCommalist(NULL); ;
    break;}
case 7:
#line 154 "parser.y"
{ yyval = new OptColumnCommalist((ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 8:
#line 158 "parser.y"
{ yyval = new Schema((BaseTableDef*)yyvsp[0]); ;
    break;}
case 9:
#line 162 "parser.y"
{ yyval = new BaseTableDef("CREATE", (Table*)yyvsp[-3], (BaseTableElementCommalist*)yyvsp[-1]); ;
    break;}
case 10:
#line 163 "parser.y"
{ yyval = new BaseTableDef("DROP", (Table*)yyvsp[0]); ;
    break;}
case 11:
#line 167 "parser.y"
{ yyval = new BaseTableElementCommalist( (BaseTableElement*)yyvsp[0]); ;
    break;}
case 12:
#line 168 "parser.y"
{ yyval = new BaseTableElementCommalist( (BaseTableElementCommalist*)yyvsp[-2], (BaseTableElement*)yyvsp[0]); ;
    break;}
case 13:
#line 172 "parser.y"
{ yyval = new BaseTableElement( (ColumnDef*)yyvsp[0]); ;
    break;}
case 14:
#line 173 "parser.y"
{ yyval = new BaseTableElement( (TableConstraintDef*)yyvsp[0]); ;
    break;}
case 15:
#line 177 "parser.y"
{ yyval = new ColumnDef( (Column*)yyvsp[-2], (DataType*)yyvsp[-1], (ColumnDefOptList*)yyvsp[0]); ;
    break;}
case 16:
#line 181 "parser.y"
{ yyval = NULL; ;
    break;}
case 17:
#line 182 "parser.y"
{ yyval = new ColumnDefOptList( (ColumnDefOptList*)yyvsp[-1], (ColumnDefOpt*)yyvsp[0]); ;
    break;}
case 18:
#line 187 "parser.y"
{ yyval = new ColumnDefOpt(0); ;
    break;}
case 19:
#line 188 "parser.y"
{ yyval = new ColumnDefOpt(1); ;
    break;}
case 20:
#line 189 "parser.y"
{ yyval = new ColumnDefOpt(2); ;
    break;}
case 21:
#line 190 "parser.y"
{ yyval = new ColumnDefOpt(3, (Literal*)yyvsp[0]); ;
    break;}
case 22:
#line 191 "parser.y"
{ yyval = new ColumnDefOpt(4); ;
    break;}
case 23:
#line 192 "parser.y"
{ yyval = new ColumnDefOpt(5); ;
    break;}
case 24:
#line 193 "parser.y"
{ yyval = new ColumnDefOpt(6, (SearchCondition*)yyvsp[-1]); ;
    break;}
case 25:
#line 194 "parser.y"
{ yyval = new ColumnDefOpt(7, (Table*)yyvsp[0]); ;
    break;}
case 26:
#line 195 "parser.y"
{ yyval = new ColumnDefOpt(8, (Table*)yyvsp[-3], (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 27:
#line 199 "parser.y"
{ yyval = new TableConstraintDef(0, (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 28:
#line 200 "parser.y"
{ yyval = new TableConstraintDef(1, (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 29:
#line 201 "parser.y"
{ yyval = new TableConstraintDef(2, (ColumnCommalist*)yyvsp[-3], (Table*)yyvsp[0]); ;
    break;}
case 30:
#line 202 "parser.y"
{ yyval = new TableConstraintDef(2, (ColumnCommalist*)yyvsp[-6], (Table*)yyvsp[-3], (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 31:
#line 207 "parser.y"
{ yyval = new ColumnCommalist((Column*)yyvsp[0]); ;
    break;}
case 32:
#line 208 "parser.y"
{ yyval = new ColumnCommalist((ColumnCommalist*)yyvsp[-2], (Column*)yyvsp[0]); ;
    break;}
case 33:
#line 212 "parser.y"
{ yyval = NULL; ;
    break;}
case 34:
#line 213 "parser.y"
{ yyval = new OptOrderByClause((OrderingSpecCommalist*)yyvsp[0]); ;
    break;}
case 35:
#line 217 "parser.y"
{ yyval = new OrderingSpecCommalist((OrderingSpec*)yyvsp[0]); ;
    break;}
case 36:
#line 218 "parser.y"
{ yyval = new OrderingSpecCommalist((OrderingSpecCommalist*)yyvsp[-2], (OrderingSpec*)yyvsp[0]); ;
    break;}
case 37:
#line 222 "parser.y"
{ yyval = new OrderingSpec(dData, (OptAscDesc*)yyvsp[0]); ;
    break;}
case 38:
#line 223 "parser.y"
{ yyval = new OrderingSpec((ColumnRef*)yyvsp[-1], (OptAscDesc*)yyvsp[0]); ;
    break;}
case 39:
#line 227 "parser.y"
{ yyval = new OptAscDesc(""); ;
    break;}
case 40:
#line 228 "parser.y"
{ yyval = new OptAscDesc("ASC"); ;
    break;}
case 41:
#line 229 "parser.y"
{ yyval = new OptAscDesc("DESC"); ;
    break;}
case 42:
#line 236 "parser.y"
{ yyval = new SQL((ManipulativeStatement*)yyvsp[0]); ;
    break;}
case 43:
#line 240 "parser.y"
{ yyval = new ManipulativeStatement((SelectStatement*)yyvsp[0]); ;
    break;}
case 44:
#line 241 "parser.y"
{ yyval = new ManipulativeStatement((InsertStatement*)yyvsp[0]); ;
    break;}
case 45:
#line 242 "parser.y"
{ yyval = new ManipulativeStatement((UpdateStatementPositioned*)yyvsp[0]); ;
    break;}
case 46:
#line 243 "parser.y"
{ yyval = new ManipulativeStatement((UpdateStatementSearched*)yyvsp[0]); ;
    break;}
case 47:
#line 259 "parser.y"
{ yyval = new InsertStatement((Table*)yyvsp[-2], (OptColumnCommalist*)yyvsp[-1], (ValuesOrQuerySpec*)yyvsp[0]); ;
    break;}
case 48:
#line 263 "parser.y"
{ yyval = new ValuesOrQuerySpec((InsertAtomCommalist*)yyvsp[-1]); ;
    break;}
case 49:
#line 264 "parser.y"
{ yyval = new ValuesOrQuerySpec((QuerySpec*)yyvsp[0]); ;
    break;}
case 50:
#line 268 "parser.y"
{ yyval = new InsertAtomCommalist((InsertAtom*)yyvsp[0]); ;
    break;}
case 51:
#line 269 "parser.y"
{ yyval = new InsertAtomCommalist((InsertAtomCommalist*)yyvsp[-2], (InsertAtom*)yyvsp[0]); ;
    break;}
case 52:
#line 273 "parser.y"
{ yyval = new InsertAtom((Atom*)yyvsp[0]); ;
    break;}
case 53:
#line 274 "parser.y"
{ yyval = new InsertAtom(NULL); ;
    break;}
case 54:
#line 280 "parser.y"
{ yyval = new SelectStatement((OptAllDistinct*)yyvsp[-2], (Selection*)yyvsp[-1], (TableExp*)yyvsp[0]); ;
    break;}
case 55:
#line 284 "parser.y"
{ yyval = new OptAllDistinct("ALL"); ;
    break;}
case 56:
#line 285 "parser.y"
{ yyval = new OptAllDistinct("DISTINCT"); ;
    break;}
case 57:
#line 286 "parser.y"
{ yyval = new OptAllDistinct(""); ;
    break;}
case 58:
#line 291 "parser.y"
{ yyval = new UpdateStatementPositioned((Table*)yyvsp[-6], (AssignmentCommalist*)yyvsp[-4], (Cursor*)yyvsp[0]); ;
    break;}
case 59:
#line 295 "parser.y"
{ yyval = NULL; ;
    break;}
case 60:
#line 296 "parser.y"
{ yyval = new AssignmentCommalist((Assignment*)yyvsp[0]); ;
    break;}
case 61:
#line 297 "parser.y"
{ yyval = new AssignmentCommalist((AssignmentCommalist*)yyvsp[-2], (Assignment*)yyvsp[0]); ;
    break;}
case 62:
#line 301 "parser.y"
{ yyval = new Assignment((Column*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 63:
#line 302 "parser.y"
{ yyval = new Assignment((Column*)yyvsp[-2], NULL); ;
    break;}
case 64:
#line 306 "parser.y"
{ yyval = new UpdateStatementSearched((Table*)yyvsp[-3], (AssignmentCommalist*)yyvsp[-1], (OptWhereClause*)yyvsp[0]); ;
    break;}
case 65:
#line 310 "parser.y"
{ yyval = new QuerySpec((OptAllDistinct*)yyvsp[-2], (Selection*)yyvsp[-1], (TableExp*)yyvsp[0]); ;
    break;}
case 66:
#line 314 "parser.y"
{ yyval = new Selection((ScalarExpCommalist*)yyvsp[0]); ;
    break;}
case 68:
#line 315 "parser.y"
{ yyval = new Selection("*"); ;
    break;}
case 69:
#line 324 "parser.y"
{ yyval = new TableExp((FromClause*)yyvsp[-5], (OptWhereClause*)yyvsp[-4], (OptGroupByClause*)yyvsp[-3], (OptHavingClause*)yyvsp[-2],
                                                    (OptOrderByClause*)yyvsp[-1], (OptLimitClause*)yyvsp[0]); ;
    break;}
case 70:
#line 329 "parser.y"
{ yyval = new FromClause((TableRefCommalist*)yyvsp[0]); ;
    break;}
case 71:
#line 333 "parser.y"
{ yyval = new TableRefCommalist((TableRef*)yyvsp[0]); ;
    break;}
case 72:
#line 334 "parser.y"
{ yyval = new TableRefCommalist((TableRefCommalist*)yyvsp[-2], (TableRef*)yyvsp[0]); ;
    break;}
case 73:
#line 338 "parser.y"
{ yyval = new TableRef((Table *)yyvsp[0]); ;
    break;}
case 74:
#line 343 "parser.y"
{ yyval = new OptWhereClause((SearchCondition*)yyvsp[0]); ;
    break;}
case 75:
#line 344 "parser.y"
{ yyval = NULL; ;
    break;}
case 76:
#line 348 "parser.y"
{ yyval = NULL; ;
    break;}
case 77:
#line 349 "parser.y"
{ yyval = new OptGroupByClause((ColumnRefCommalist*)yyvsp[0]); ;
    break;}
case 78:
#line 353 "parser.y"
{ yyval = new ColumnRefCommalist((ColumnRef*)yyvsp[0]); ;
    break;}
case 79:
#line 354 "parser.y"
{ yyval = new ColumnRefCommalist((ColumnRefCommalist*)yyvsp[-2], (ColumnRef*)yyvsp[0]); ;
    break;}
case 80:
#line 358 "parser.y"
{ yyval = new OptHavingClause((SearchCondition*)yyvsp[0]); ;
    break;}
case 81:
#line 359 "parser.y"
{ yyval = NULL; ;
    break;}
case 82:
#line 363 "parser.y"
{ yyval = NULL; ;
    break;}
case 83:
#line 364 "parser.y"
{ yyval = new OptLimitClause(dData); ;
    break;}
case 84:
#line 370 "parser.y"
{ yyval = new SearchCondition(0, (SearchCondition*)yyvsp[-2], (SearchCondition*)yyvsp[-1]); ;
    break;}
case 85:
#line 371 "parser.y"
{ yyval = new SearchCondition(1, (SearchCondition*)yyvsp[-2], (SearchCondition*)yyvsp[-1]); ;
    break;}
case 86:
#line 372 "parser.y"
{ yyval = new SearchCondition(2, (SearchCondition*)yyvsp[0]); ;
    break;}
case 87:
#line 373 "parser.y"
{ yyval = new SearchCondition(3, (SearchCondition*)yyvsp[-1]); ;
    break;}
case 88:
#line 374 "parser.y"
{ yyval = new SearchCondition((Predicate*)yyvsp[0]); ;
    break;}
case 89:
#line 378 "parser.y"
{ yyval = new Predicate((ComparisonPredicate*)yyvsp[0]); ;
    break;}
case 90:
#line 379 "parser.y"
{ yyval = new Predicate((BetweenPredicate*)yyvsp[0]); ;
    break;}
case 91:
#line 380 "parser.y"
{ yyval = new Predicate((LikePredicate*)yyvsp[0]); ;
    break;}
case 92:
#line 388 "parser.y"
{ yyval = new ComparisonPredicate((ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]) ;
    break;}
case 93:
#line 393 "parser.y"
{ yyval = new BetweenPredicate(2, (ScalarExp*)yyvsp[-5], (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 94:
#line 394 "parser.y"
{ yyval = new BetweenPredicate(1, (ScalarExp*)yyvsp[-4], (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 95:
#line 398 "parser.y"
{ yyval = new LikePredicate(2, (ScalarExp*)yyvsp[-4], (Atom*)yyvsp[-1], (OptEscape*)yyvsp[0]); ;
    break;}
case 96:
#line 399 "parser.y"
{ yyval = new LikePredicate(1, (ScalarExp*)yyvsp[-3], (Atom*)yyvsp[-1], (OptEscape*)yyvsp[0]); ;
    break;}
case 97:
#line 403 "parser.y"
{ yyval = NULL; ;
    break;}
case 98:
#line 404 "parser.y"
{ yyval = new OptEscape((Atom*)yyvsp[0]); ;
    break;}
case 99:
#line 408 "parser.y"
{ yyval = new ScalarExpCommalist((ScalarExp*)yyvsp[0]); ;
    break;}
case 100:
#line 409 "parser.y"
{ yyval = new ScalarExpCommalist((ScalarExpCommalist*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 101:
#line 413 "parser.y"
{ yyval = new ScalarExp(1, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 102:
#line 414 "parser.y"
{ yyval = new ScalarExp(2, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 103:
#line 415 "parser.y"
{ yyval = new ScalarExp(3, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 104:
#line 416 "parser.y"
{ yyval = new ScalarExp(4, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 105:
#line 417 "parser.y"
{ yyval = new ScalarExp(5, (ScalarExp*)yyvsp[0]);  ;
    break;}
case 106:
#line 418 "parser.y"
{ yyval = new ScalarExp(6, (ScalarExp*)yyvsp[0]); ;
    break;}
case 107:
#line 419 "parser.y"
{ yyval = new ScalarExp((Atom*)yyvsp[0]); ;
    break;}
case 108:
#line 420 "parser.y"
{ yyval = new ScalarExp((ColumnRef*)yyvsp[0]); ;
    break;}
case 109:
#line 421 "parser.y"
{ yyval = new ScalarExp((FunctionRef*)yyvsp[0]); ;
    break;}
case 110:
#line 422 "parser.y"
{ yyval = new ScalarExp(0, (ScalarExp*)yyvsp[-1]); ;
    break;}
case 111:
#line 427 "parser.y"
{ yyval = new Atom((Literal*)yyvsp[0]); ;
    break;}
case 112:
#line 428 "parser.y"
{ yyval = new Atom("USER"); ;
    break;}
case 113:
#line 432 "parser.y"
{ yyval = new FunctionRef((Ammsc*)yyvsp[-3]);;
    break;}
case 114:
#line 433 "parser.y"
{ yyval = new FunctionRef((Ammsc*)yyvsp[-4], (ColumnRef*)yyvsp[-1]); ;
    break;}
case 115:
#line 434 "parser.y"
{ yyval = new FunctionRef(0, (Ammsc*)yyvsp[-4], (ScalarExp*)yyvsp[-1]); ;
    break;}
case 116:
#line 435 "parser.y"
{ yyval = new FunctionRef(1, (Ammsc*)yyvsp[-3], (ScalarExp*)yyvsp[-1]); ;
    break;}
case 117:
#line 439 "parser.y"
{ yyval = new Literal(strData[0]); ;
    break;}
case 118:
#line 440 "parser.y"
{ yyval = new Literal(dData); ;
    break;}
case 119:
#line 445 "parser.y"
{ yyval = new Table(strData[0]); ;
    break;}
case 120:
#line 446 "parser.y"
{ yyval = new Table(0, strData[0], strData[1]);;
    break;}
case 121:
#line 447 "parser.y"
{ yyval = new Table(1, strData[0], strData[1]);  ;
    break;}
case 122:
#line 453 "parser.y"
{ yyval = new DataType(0); ;
    break;}
case 123:
#line 454 "parser.y"
{ yyval = new DataType(0, dData); ;
    break;}
case 124:
#line 455 "parser.y"
{ yyval = new DataType(1); ;
    break;}
case 125:
#line 456 "parser.y"
{ yyval = new DataType(1, dData); ;
    break;}
case 126:
#line 457 "parser.y"
{ yyval = new DataType(2); ;
    break;}
case 127:
#line 458 "parser.y"
{ yyval = new DataType(2, dData); ;
    break;}
case 128:
#line 460 "parser.y"
{ yyval = new DataType(3); ;
    break;}
case 129:
#line 461 "parser.y"
{ yyval = new DataType(3, dData); ;
    break;}
case 130:
#line 463 "parser.y"
{ yyval = new DataType(4); ;
    break;}
case 131:
#line 464 "parser.y"
{ yyval = new DataType(5); ;
    break;}
case 132:
#line 465 "parser.y"
{ yyval = new DataType(6); ;
    break;}
case 133:
#line 466 "parser.y"
{ yyval = new DataType(6, dData); ;
    break;}
case 134:
#line 467 "parser.y"
{ yyval = new DataType(7); ;
    break;}
case 135:
#line 468 "parser.y"
{ yyval = new DataType(8); ;
    break;}
case 136:
#line 472 "parser.y"
{ yyval = new ColumnRef(strData[0]); ;
    break;}
case 137:
#line 473 "parser.y"
{ yyval = new ColumnRef(0, strData[0], strData[1]); ;
    break;}
case 138:
#line 474 "parser.y"
{ yyval = new ColumnRef(strData[0], strData[1], strData[2]);;
    break;}
case 139:
#line 475 "parser.y"
{ yyval = new ColumnRef(1, strData[0], strData[1]); ;
    break;}
case 140:
#line 479 "parser.y"
{ yyval = new Column(strData[0]); ;
    break;}
case 141:
#line 483 "parser.y"
{ yyval = new Cursor(strData[0]); ;
    break;}
case 142:
#line 487 "parser.y"
{ yyval = new Ammsc("AVG"); ;
    break;}
case 143:
#line 488 "parser.y"
{ yyval = new Ammsc("MIN"); ;
    break;}
case 144:
#line 489 "parser.y"
{ yyval = new Ammsc("MAX"); ;
    break;}
case 145:
#line 490 "parser.y"
{ yyval = new Ammsc("SUM"); ;
    break;}
case 146:
#line 491 "parser.y"
{ yyval = new Ammsc("COUNT"); ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_Parser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_Parser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_Parser_LLOC.first_line;
      yylsp->first_column = YY_Parser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_Parser_NERRS;

#ifdef YY_Parser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_Parser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_Parser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_Parser_ERROR_VERBOSE */
	YY_Parser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_Parser_CHAR == YYEOF)
	YYABORT;

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_Parser_CHAR, yytname[yychar1]);
#endif

      YY_Parser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_Parser_LSP_NEEDED
  yylsp--;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 494 "parser.y"

