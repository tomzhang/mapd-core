#define YY_Parser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from parser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_Parser_LSP_NEEDED 
#define YY_Parser_MEMBERS                  \
    virtual ~Parser()   {} \
    int parse(const string & inputStr, ASTNode *& parseRoot, string &lastParsed) { istringstream ss(inputStr); lexer.switch_streams(&ss,0);  yyparse(parseRoot); lastParsed = lexer.YYText(); return yynerrs; } \
    private:                   \
       yyFlexLexer lexer;
#define YY_Parser_LEX_BODY  {return lexer.yylex();}
#define YY_Parser_ERROR_BODY  {cerr << "Syntax error on line " << lexer.lineno() << ". Last word parsed:" << lexer.YYText() << endl;}
#line 11 "parser.y"

#include <iostream>
#include <fstream>
#include <FlexLexer.h>
#include <cstdlib>
#include <string>
#include <sstream>

// AST nodes
#include "ast/ASTNode.h"
#include "ast/Program.h"
#include "ast/SQLList.h"
#include "ast/SQL.h"
#include "ast/Schema.h"
#include "ast/BaseTableDef.h"
#include "ast/Table.h"
#include "ast/ColumnDef.h"
#include "ast/ColumnCommalist.h"
#include "ast/TableConstraintDef.h"
#include "ast/BaseTableElementCommalist.h"
#include "ast/BaseTableElement.h"
#include "ast/ColumnDefOpt.h"
#include "ast/ColumnDefOptList.h"
#include "ast/Literal.h"
#include "ast/DataType.h"
#include "ast/Column.h"

#include "ast/ManipulativeStatement.h"
#include "ast/SelectStatement.h"
#include "ast/Selection.h"
#include "ast/OptAllDistinct.h"
#include "ast/TableExp.h"
#include "ast/FromClause.h"
#include "ast/TableRefCommalist.h"
#include "ast/TableRef.h"

#include "ast/InsertStatement.h"
#include "ast/OptColumnCommalist.h"
#include "ast/ValuesOrQuerySpec.h"
#include "ast/QuerySpec.h"
#include "ast/InsertAtomCommalist.h"
#include "ast/InsertAtom.h"
#include "ast/Atom.h"

#include "ast/SearchCondition.h"
#include "ast/ScalarExpCommalist.h"
#include "ast/ScalarExp.h"
#include "ast/FunctionRef.h"
#include "ast/Ammsc.h"
#include "ast/Predicate.h"
#include "ast/ComparisonPredicate.h"
#include "ast/BetweenPredicate.h"
#include "ast/LikePredicate.h"
#include "ast/OptEscape.h"
#include "ast/ColumnRef.h"

#include "ast/ColumnRefCommalist.h"
#include "ast/OptWhereClause.h"
#include "ast/OptGroupByClause.h"
#include "ast/OptHavingClause.h"
#include "ast/OptLimitClause.h"
#include "ast/OptAscDesc.h"
#include "ast/OrderingSpecCommalist.h"
#include "ast/OrderingSpec.h"
#include "ast/OptOrderByClause.h"

#include "ast/UpdateStatementSearched.h"
#include "ast/UpdateStatementPositioned.h"
#include "ast/AssignmentCommalist.h"
#include "ast/Assignment.h"
#include "ast/Cursor.h"

#include "ast/TestForNull.h"
#include "ast/InPredicate.h"
#include "ast/ExistenceTest.h"
#include "ast/AllOrAnyPredicate.h"
#include "ast/AnyAllSome.h"
#include "ast/AtomCommalist.h"
#include "ast/Subquery.h"

using namespace std;
using namespace SQL_Namespace;

// define stack element type to be a 
// pointer to an AST node
#define YY_Parser_STYPE ASTNode*
#define YY_Parser_PARSE_PARAM ASTNode*& parseRoot

extern ASTNode* parse_root;

// Variables declared in scanner.l
extern std::string strData[10];
extern double dData[10];




#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_Parser_BISON 1

#ifndef YY_Parser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_Parser_COMPATIBILITY 1
 #else
  #define  YY_Parser_COMPATIBILITY 0
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_Parser_LTYPE
   #define YY_Parser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_Parser_STYPE 
   #define YY_Parser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_Parser_DEBUG
   #define  YY_Parser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_Parser_USE_GOTO
  #define YY_Parser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_Parser_USE_GOTO
 #define YY_Parser_USE_GOTO 0
#endif

#ifndef YY_Parser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_Parser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"
#ifndef YY_USE_CLASS
# ifndef YYSTYPE
#  define YYSTYPE int
#  define YYSTYPE_IS_TRIVIAL 1
# endif
#endif

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_Parser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_Parser_DEBUG */
#endif


#ifndef YY_Parser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_Parser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_Parser_LSP_NEEDED
#ifndef YY_Parser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_Parser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_Parser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_Parser_STYPE
#define YY_Parser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_Parser_PARSE
#define YY_Parser_PARSE yyparse
#endif
#ifndef YY_Parser_LEX
#define YY_Parser_LEX yylex
#endif
#ifndef YY_Parser_LVAL
#define YY_Parser_LVAL yylval
#endif
#ifndef YY_Parser_LLOC
#define YY_Parser_LLOC yylloc
#endif
#ifndef YY_Parser_CHAR
#define YY_Parser_CHAR yychar
#endif
#ifndef YY_Parser_NERRS
#define YY_Parser_NERRS yynerrs
#endif
#ifndef YY_Parser_DEBUG_FLAG
#define YY_Parser_DEBUG_FLAG yydebug
#endif
#ifndef YY_Parser_ERROR
#define YY_Parser_ERROR yyerror
#endif

#ifndef YY_Parser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_Parser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_Parser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_Parser_PARSE_PARAM
  #define YY_Parser_PARSE_PARAM void
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_Parser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_Parser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_Parser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_Parser_PURE
#  ifndef YYPURE
#    define YYPURE YY_Parser_PURE
#  endif
#endif

#ifdef YY_Parser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_Parser_DEBUG 
#  endif
#endif

#ifndef YY_Parser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_Parser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_Parser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_Parser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	OR	258
#define	AND	259
#define	NOT	260
#define	COMPARISON	261
#define	UMINUS	262
#define	AS	263
#define	DROP	264
#define	NAME	265
#define	TABLE	266
#define	CREATE	267
#define	INTNUM	268
#define	STRING	269
#define	APPROXNUM	270
#define	UNKNOWN	271
#define	ALL	272
#define	BETWEEN	273
#define	BY	274
#define	DISTINCT	275
#define	FROM	276
#define	GROUP	277
#define	HAVING	278
#define	SELECT	279
#define	USER	280
#define	WHERE	281
#define	WITH	282
#define	EMPTY	283
#define	SELALL	284
#define	DOT	285
#define	UPDATE	286
#define	SET	287
#define	CURRENT	288
#define	OF	289
#define	NULLX	290
#define	ASSIGN	291
#define	INSERT	292
#define	INTO	293
#define	VALUES	294
#define	UNIQUE	295
#define	PRIMARY	296
#define	FOREIGN	297
#define	KEY	298
#define	CHECK	299
#define	REFERENCES	300
#define	DEFAULT	301
#define	DATATYPE	302
#define	DECIMAL	303
#define	SMALLINT	304
#define	NUMERIC	305
#define	CHARACTER	306
#define	INTEGER	307
#define	REAL	308
#define	FLOAT	309
#define	DOUBLE	310
#define	PRECISION	311
#define	VARCHAR	312
#define	AVG	313
#define	MAX	314
#define	MIN	315
#define	SUM	316
#define	COUNT	317
#define	ALIAS	318
#define	INTORDER	319
#define	COLORDER	320
#define	ORDER	321
#define	ASC	322
#define	DESC	323
#define	LIMIT	324
#define	OFFSET	325
#define	DOTNAME	326
#define	ESCAPE	327
#define	LIKE	328
#define	IS	329
#define	IN	330
#define	ANY	331
#define	SOME	332
#define	EXISTS	333


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_Parser_CLASS
#define YY_Parser_CLASS Parser
#endif
#ifndef YY_Parser_INHERIT
#define YY_Parser_INHERIT
#endif
#ifndef YY_Parser_MEMBERS
#define YY_Parser_MEMBERS 
#endif
#ifndef YY_Parser_LEX_BODY
#define YY_Parser_LEX_BODY  
#endif
#ifndef YY_Parser_ERROR_BODY
#define YY_Parser_ERROR_BODY  
#endif
#ifndef YY_Parser_CONSTRUCTOR_PARAM
#define YY_Parser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_Parser_CONSTRUCTOR_CODE
#define YY_Parser_CONSTRUCTOR_CODE
#endif
#ifndef YY_Parser_CONSTRUCTOR_INIT
#define YY_Parser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_Parser_USE_CONST_TOKEN
#define YY_Parser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_Parser_USE_CONST_TOKEN != 0
#ifndef YY_Parser_ENUM_TOKEN
#define YY_Parser_ENUM_TOKEN yy_Parser_enum_token
#endif
#endif

class YY_Parser_CLASS YY_Parser_INHERIT
{
public: 
#if YY_Parser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int OR;
static const int AND;
static const int NOT;
static const int COMPARISON;
static const int UMINUS;
static const int AS;
static const int DROP;
static const int NAME;
static const int TABLE;
static const int CREATE;
static const int INTNUM;
static const int STRING;
static const int APPROXNUM;
static const int UNKNOWN;
static const int ALL;
static const int BETWEEN;
static const int BY;
static const int DISTINCT;
static const int FROM;
static const int GROUP;
static const int HAVING;
static const int SELECT;
static const int USER;
static const int WHERE;
static const int WITH;
static const int EMPTY;
static const int SELALL;
static const int DOT;
static const int UPDATE;
static const int SET;
static const int CURRENT;
static const int OF;
static const int NULLX;
static const int ASSIGN;
static const int INSERT;
static const int INTO;
static const int VALUES;
static const int UNIQUE;
static const int PRIMARY;
static const int FOREIGN;
static const int KEY;
static const int CHECK;
static const int REFERENCES;
static const int DEFAULT;
static const int DATATYPE;
static const int DECIMAL;
static const int SMALLINT;
static const int NUMERIC;
static const int CHARACTER;
static const int INTEGER;
static const int REAL;
static const int FLOAT;
static const int DOUBLE;
static const int PRECISION;
static const int VARCHAR;
static const int AVG;
static const int MAX;
static const int MIN;
static const int SUM;
static const int COUNT;
static const int ALIAS;
static const int INTORDER;
static const int COLORDER;
static const int ORDER;
static const int ASC;
static const int DESC;
static const int LIMIT;
static const int OFFSET;
static const int DOTNAME;
static const int ESCAPE;
static const int LIKE;
static const int IS;
static const int IN;
static const int ANY;
static const int SOME;
static const int EXISTS;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_Parser_ENUM_TOKEN { YY_Parser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,OR=258
	,AND=259
	,NOT=260
	,COMPARISON=261
	,UMINUS=262
	,AS=263
	,DROP=264
	,NAME=265
	,TABLE=266
	,CREATE=267
	,INTNUM=268
	,STRING=269
	,APPROXNUM=270
	,UNKNOWN=271
	,ALL=272
	,BETWEEN=273
	,BY=274
	,DISTINCT=275
	,FROM=276
	,GROUP=277
	,HAVING=278
	,SELECT=279
	,USER=280
	,WHERE=281
	,WITH=282
	,EMPTY=283
	,SELALL=284
	,DOT=285
	,UPDATE=286
	,SET=287
	,CURRENT=288
	,OF=289
	,NULLX=290
	,ASSIGN=291
	,INSERT=292
	,INTO=293
	,VALUES=294
	,UNIQUE=295
	,PRIMARY=296
	,FOREIGN=297
	,KEY=298
	,CHECK=299
	,REFERENCES=300
	,DEFAULT=301
	,DATATYPE=302
	,DECIMAL=303
	,SMALLINT=304
	,NUMERIC=305
	,CHARACTER=306
	,INTEGER=307
	,REAL=308
	,FLOAT=309
	,DOUBLE=310
	,PRECISION=311
	,VARCHAR=312
	,AVG=313
	,MAX=314
	,MIN=315
	,SUM=316
	,COUNT=317
	,ALIAS=318
	,INTORDER=319
	,COLORDER=320
	,ORDER=321
	,ASC=322
	,DESC=323
	,LIMIT=324
	,OFFSET=325
	,DOTNAME=326
	,ESCAPE=327
	,LIKE=328
	,IS=329
	,IN=330
	,ANY=331
	,SOME=332
	,EXISTS=333


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_Parser_PARSE (YY_Parser_PARSE_PARAM);
 virtual void YY_Parser_ERROR(char *msg) YY_Parser_ERROR_BODY;
#ifdef YY_Parser_PURE
#ifdef YY_Parser_LSP_NEEDED
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL,YY_Parser_LTYPE *YY_Parser_LLOC) YY_Parser_LEX_BODY;
#else
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL) YY_Parser_LEX_BODY;
#endif
#else
 virtual int YY_Parser_LEX() YY_Parser_LEX_BODY;
 YY_Parser_STYPE YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
 YY_Parser_LTYPE YY_Parser_LLOC;
#endif
 int   YY_Parser_NERRS;
 int    YY_Parser_CHAR;
#endif
#if YY_Parser_DEBUG != 0
 int YY_Parser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM);
public:
 YY_Parser_MEMBERS 
};
/* other declare folow */
#if YY_Parser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_Parser_CLASS::OR=258;
const int YY_Parser_CLASS::AND=259;
const int YY_Parser_CLASS::NOT=260;
const int YY_Parser_CLASS::COMPARISON=261;
const int YY_Parser_CLASS::UMINUS=262;
const int YY_Parser_CLASS::AS=263;
const int YY_Parser_CLASS::DROP=264;
const int YY_Parser_CLASS::NAME=265;
const int YY_Parser_CLASS::TABLE=266;
const int YY_Parser_CLASS::CREATE=267;
const int YY_Parser_CLASS::INTNUM=268;
const int YY_Parser_CLASS::STRING=269;
const int YY_Parser_CLASS::APPROXNUM=270;
const int YY_Parser_CLASS::UNKNOWN=271;
const int YY_Parser_CLASS::ALL=272;
const int YY_Parser_CLASS::BETWEEN=273;
const int YY_Parser_CLASS::BY=274;
const int YY_Parser_CLASS::DISTINCT=275;
const int YY_Parser_CLASS::FROM=276;
const int YY_Parser_CLASS::GROUP=277;
const int YY_Parser_CLASS::HAVING=278;
const int YY_Parser_CLASS::SELECT=279;
const int YY_Parser_CLASS::USER=280;
const int YY_Parser_CLASS::WHERE=281;
const int YY_Parser_CLASS::WITH=282;
const int YY_Parser_CLASS::EMPTY=283;
const int YY_Parser_CLASS::SELALL=284;
const int YY_Parser_CLASS::DOT=285;
const int YY_Parser_CLASS::UPDATE=286;
const int YY_Parser_CLASS::SET=287;
const int YY_Parser_CLASS::CURRENT=288;
const int YY_Parser_CLASS::OF=289;
const int YY_Parser_CLASS::NULLX=290;
const int YY_Parser_CLASS::ASSIGN=291;
const int YY_Parser_CLASS::INSERT=292;
const int YY_Parser_CLASS::INTO=293;
const int YY_Parser_CLASS::VALUES=294;
const int YY_Parser_CLASS::UNIQUE=295;
const int YY_Parser_CLASS::PRIMARY=296;
const int YY_Parser_CLASS::FOREIGN=297;
const int YY_Parser_CLASS::KEY=298;
const int YY_Parser_CLASS::CHECK=299;
const int YY_Parser_CLASS::REFERENCES=300;
const int YY_Parser_CLASS::DEFAULT=301;
const int YY_Parser_CLASS::DATATYPE=302;
const int YY_Parser_CLASS::DECIMAL=303;
const int YY_Parser_CLASS::SMALLINT=304;
const int YY_Parser_CLASS::NUMERIC=305;
const int YY_Parser_CLASS::CHARACTER=306;
const int YY_Parser_CLASS::INTEGER=307;
const int YY_Parser_CLASS::REAL=308;
const int YY_Parser_CLASS::FLOAT=309;
const int YY_Parser_CLASS::DOUBLE=310;
const int YY_Parser_CLASS::PRECISION=311;
const int YY_Parser_CLASS::VARCHAR=312;
const int YY_Parser_CLASS::AVG=313;
const int YY_Parser_CLASS::MAX=314;
const int YY_Parser_CLASS::MIN=315;
const int YY_Parser_CLASS::SUM=316;
const int YY_Parser_CLASS::COUNT=317;
const int YY_Parser_CLASS::ALIAS=318;
const int YY_Parser_CLASS::INTORDER=319;
const int YY_Parser_CLASS::COLORDER=320;
const int YY_Parser_CLASS::ORDER=321;
const int YY_Parser_CLASS::ASC=322;
const int YY_Parser_CLASS::DESC=323;
const int YY_Parser_CLASS::LIMIT=324;
const int YY_Parser_CLASS::OFFSET=325;
const int YY_Parser_CLASS::DOTNAME=326;
const int YY_Parser_CLASS::ESCAPE=327;
const int YY_Parser_CLASS::LIKE=328;
const int YY_Parser_CLASS::IS=329;
const int YY_Parser_CLASS::IN=330;
const int YY_Parser_CLASS::ANY=331;
const int YY_Parser_CLASS::SOME=332;
const int YY_Parser_CLASS::EXISTS=333;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_Parser_CLASS::token */
#endif
/*apres const  */
YY_Parser_CLASS::YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM) YY_Parser_CONSTRUCTOR_INIT
{
#if YY_Parser_DEBUG != 0
YY_Parser_DEBUG_FLAG=0;
#endif
YY_Parser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		325
#define	YYFLAG		-32768
#define	YYNTBASE	88

#define YYTRANSLATE(x) ((unsigned)(x) <= 333 ? yytranslate[x] : 151)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    85,
    86,     9,     7,    87,     8,    11,    10,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    84,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83
};

#if YY_Parser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,    10,    12,    13,    17,    19,    26,
    30,    32,    36,    38,    40,    44,    45,    48,    51,    55,
    60,    63,    66,    69,    74,    77,    83,    88,    94,   102,
   113,   118,   120,   124,   125,   129,   131,   135,   138,   141,
   142,   144,   146,   148,   150,   152,   154,   156,   162,   167,
   169,   171,   175,   177,   179,   184,   186,   188,   189,   198,
   199,   201,   205,   209,   213,   219,   224,   226,   228,   235,
   238,   243,   245,   249,   251,   254,   255,   256,   260,   262,
   266,   269,   270,   271,   274,   279,   283,   287,   290,   294,
   296,   298,   300,   302,   304,   306,   308,   310,   314,   318,
   325,   331,   337,   342,   343,   346,   351,   355,   362,   368,
   375,   381,   383,   387,   392,   394,   396,   398,   401,   408,
   410,   414,   418,   422,   426,   430,   433,   436,   438,   440,
   442,   446,   448,   450,   455,   461,   467,   472,   474,   476,
   478,   480,   484,   488,   490,   495,   497,   502,   504,   509,
   516,   518,   523,   530,   532,   534,   536,   541,   543,   546,
   548,   552,   558,   562,   564,   566,   568,   570,   572,   574
};

static const short yyrhs[] = {    89,
     0,     0,    90,    84,     0,    89,    90,    84,     0,    92,
     0,     0,    85,   100,    86,     0,    93,     0,    17,    16,
   145,    85,    94,    86,     0,    14,    16,   145,     0,    95,
     0,    94,    87,    95,     0,    96,     0,    99,     0,   148,
   146,    97,     0,     0,    97,    98,     0,     5,    40,     0,
     5,    40,    45,     0,     5,    40,    46,    48,     0,    51,
   144,     0,    51,    40,     0,    51,    30,     0,    49,    85,
   127,    86,     0,    50,   145,     0,    50,   145,    85,   100,
    86,     0,    45,    85,   100,    86,     0,    46,    48,    85,
   100,    86,     0,    47,    48,    85,   100,    86,    50,   145,
     0,    47,    48,    85,   100,    86,    50,   145,    85,   100,
    86,     0,    49,    85,   127,    86,     0,   148,     0,   100,
    87,   148,     0,     0,    71,    24,   102,     0,   103,     0,
   102,    87,   103,     0,    18,   104,     0,   147,   104,     0,
     0,    72,     0,    73,     0,   105,     0,   110,     0,   106,
     0,   112,     0,   115,     0,    42,    43,   145,    91,   107,
     0,    44,    85,   108,    86,     0,   116,     0,   109,     0,
   108,    87,   109,     0,   142,     0,    40,     0,    29,   111,
   117,   118,     0,    22,     0,    25,     0,     0,    36,   145,
    37,   113,    31,    38,    39,   149,     0,     0,   114,     0,
   113,    87,   114,     0,   148,     6,   141,     0,   148,     6,
    40,     0,    36,   145,    37,   113,   122,     0,    29,   111,
   117,   118,     0,   140,     0,     9,     0,   119,   122,   123,
   125,   101,   126,     0,    26,   120,     0,    26,    85,   110,
    86,     0,   121,     0,   120,    87,   121,     0,   145,     0,
    31,   127,     0,     0,     0,    27,    24,   124,     0,   147,
     0,   124,    87,   147,     0,    28,   127,     0,     0,     0,
    74,    18,     0,    74,    18,    75,    18,     0,   127,     3,
   127,     0,   127,     4,   127,     0,     5,   127,     0,    85,
   127,    86,     0,   128,     0,   129,     0,   130,     0,   131,
     0,   133,     0,   134,     0,   136,     0,   138,     0,   141,
     6,   141,     0,   141,     6,   139,     0,   141,     5,    23,
   141,     4,   141,     0,   141,    23,   141,     4,   141,     0,
   141,     5,    78,   142,   132,     0,   141,    78,   142,   132,
     0,     0,    77,   142,     0,   147,    79,     5,    40,     0,
   147,    79,    40,     0,   141,     5,    80,    85,   139,    86,
     0,   141,    80,    85,   139,    86,     0,   141,     5,    80,
    85,   135,    86,     0,   141,    80,    85,   135,    86,     0,
   142,     0,   135,    87,   142,     0,   141,     6,   137,   139,
     0,    81,     0,    22,     0,    82,     0,    83,   139,     0,
    85,    29,   111,   117,   118,    86,     0,   141,     0,   140,
    87,   141,     0,   141,     7,   141,     0,   141,     8,   141,
     0,   141,     9,   141,     0,   141,    10,   141,     0,     7,
   141,     0,     8,   141,     0,   142,     0,   147,     0,   143,
     0,    85,   141,    86,     0,   144,     0,    30,     0,   150,
    85,     9,    86,     0,   150,    85,    25,   147,    86,     0,
   150,    85,    22,   141,    86,     0,   150,    85,   141,    86,
     0,    19,     0,    18,     0,    20,     0,    15,     0,    15,
    11,    15,     0,    15,    13,    15,     0,    56,     0,    56,
    85,    18,    86,     0,    62,     0,    62,    85,    18,    86,
     0,    55,     0,    55,    85,    18,    86,     0,    55,    85,
    18,    87,    18,    86,     0,    53,     0,    53,    85,    18,
    86,     0,    53,    85,    18,    87,    18,    86,     0,    57,
     0,    54,     0,    59,     0,    59,    85,    18,    86,     0,
    58,     0,    60,    61,     0,    15,     0,    15,    11,    15,
     0,    15,    11,    15,    11,    15,     0,    15,    13,    15,
     0,    15,     0,    15,     0,    63,     0,    65,     0,    64,
     0,    66,     0,    67,     0
};

#endif

#if (YY_Parser_DEBUG != 0) || defined(YY_Parser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   151,   152,   156,   157,   161,   164,   166,   170,   174,   175,
   179,   180,   184,   185,   189,   192,   194,   197,   200,   201,
   202,   203,   204,   205,   206,   207,   211,   212,   213,   214,
   215,   218,   220,   223,   225,   228,   230,   233,   235,   238,
   240,   241,   247,   251,   253,   254,   255,   270,   274,   276,
   279,   281,   284,   286,   289,   295,   297,   298,   301,   306,
   308,   309,   312,   314,   317,   321,   325,   327,   330,   341,
   342,   345,   347,   350,   355,   357,   360,   362,   365,   367,
   370,   372,   375,   377,   379,   382,   384,   385,   386,   387,
   390,   392,   393,   394,   395,   396,   397,   400,   403,   406,
   408,   411,   413,   416,   418,   421,   423,   426,   428,   429,
   430,   433,   435,   438,   442,   444,   445,   448,   452,   458,
   460,   463,   465,   466,   467,   468,   469,   470,   471,   472,
   473,   476,   479,   482,   484,   485,   486,   490,   491,   492,
   496,   497,   498,   504,   505,   506,   507,   508,   509,   510,
   511,   512,   513,   514,   515,   516,   517,   518,   519,   522,
   524,   525,   526,   530,   534,   537,   539,   540,   541,   542
};

static const char * const yytname[] = {   "$","error","$illegal.","OR","AND",
"NOT","COMPARISON","'+'","'-'","'*'","'/'","'.'","UMINUS","AS","DROP","NAME",
"TABLE","CREATE","INTNUM","STRING","APPROXNUM","UNKNOWN","ALL","BETWEEN","BY",
"DISTINCT","FROM","GROUP","HAVING","SELECT","USER","WHERE","WITH","EMPTY","SELALL",
"DOT","UPDATE","SET","CURRENT","OF","NULLX","ASSIGN","INSERT","INTO","VALUES",
"UNIQUE","PRIMARY","FOREIGN","KEY","CHECK","REFERENCES","DEFAULT","DATATYPE",
"DECIMAL","SMALLINT","NUMERIC","CHARACTER","INTEGER","REAL","FLOAT","DOUBLE",
"PRECISION","VARCHAR","AVG","MAX","MIN","SUM","COUNT","ALIAS","INTORDER","COLORDER",
"ORDER","ASC","DESC","LIMIT","OFFSET","DOTNAME","ESCAPE","LIKE","IS","IN","ANY",
"SOME","EXISTS","';'","'('","')'","','","program","sql_list","sql","opt_column_commalist",
"schema","base_table_def","base_table_element_commalist","base_table_element",
"column_def","column_def_opt_list","column_def_opt","table_constraint_def","column_commalist",
"opt_order_by_clause","ordering_spec_commalist","ordering_spec","opt_asc_desc",
"manipulative_statement","insert_statement","values_or_query_spec","insert_atom_commalist",
"insert_atom","select_statement","opt_all_distinct","update_statement_positioned",
"assignment_commalist","assignment","update_statement_searched","query_spec",
"selection","table_exp","from_clause","table_ref_commalist","table_ref","opt_where_clause",
"opt_group_by_clause","column_ref_commalist","opt_having_clause","opt_limit_clause",
"search_condition","predicate","comparison_predicate","between_predicate","like_predicate",
"opt_escape","test_for_null","in_predicate","atom_commalist","all_or_any_predicate",
"any_all_some","existence_test","subquery","scalar_exp_commalist","scalar_exp",
"atom","function_ref","literal","table","data_type","column_ref","column","cursor",
"ammsc",""
};
#endif

static const short yyr1[] = {     0,
    88,    88,    89,    89,    90,    91,    91,    92,    93,    93,
    94,    94,    95,    95,    96,    97,    97,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    99,    99,    99,    99,
    99,   100,   100,   101,   101,   102,   102,   103,   103,   104,
   104,   104,    90,   105,   105,   105,   105,   106,   107,   107,
   108,   108,   109,   109,   110,   111,   111,   111,   112,   113,
   113,   113,   114,   114,   115,   116,   117,   117,   118,   119,
   119,   120,   120,   121,   122,   122,   123,   123,   124,   124,
   125,   125,   126,   126,   126,   127,   127,   127,   127,   127,
   128,   128,   128,   128,   128,   128,   128,   129,   129,   130,
   130,   131,   131,   132,   132,   133,   133,   134,   134,   134,
   134,   135,   135,   136,   137,   137,   137,   138,   139,   140,
   140,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   142,   142,   143,   143,   143,   143,   144,   144,   144,
   145,   145,   145,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   147,
   147,   147,   147,   148,   149,   150,   150,   150,   150,   150
};

static const short yyr2[] = {     0,
     1,     0,     2,     3,     1,     0,     3,     1,     6,     3,
     1,     3,     1,     1,     3,     0,     2,     2,     3,     4,
     2,     2,     2,     4,     2,     5,     4,     5,     7,    10,
     4,     1,     3,     0,     3,     1,     3,     2,     2,     0,
     1,     1,     1,     1,     1,     1,     1,     5,     4,     1,
     1,     3,     1,     1,     4,     1,     1,     0,     8,     0,
     1,     3,     3,     3,     5,     4,     1,     1,     6,     2,
     4,     1,     3,     1,     2,     0,     0,     3,     1,     3,
     2,     0,     0,     2,     4,     3,     3,     2,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     3,     6,
     5,     5,     4,     0,     2,     4,     3,     6,     5,     6,
     5,     1,     3,     4,     1,     1,     1,     2,     6,     1,
     3,     3,     3,     3,     3,     2,     2,     1,     1,     1,
     3,     1,     1,     4,     5,     5,     4,     1,     1,     1,
     1,     3,     3,     1,     4,     1,     4,     1,     4,     6,
     1,     4,     6,     1,     1,     1,     4,     1,     2,     1,
     3,     5,     3,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     2,
     0,     0,    58,     0,     0,     1,     0,     5,     8,    43,
    45,    44,    46,    47,     0,     0,    56,    57,     0,   141,
     0,     0,     0,     3,    10,     0,     0,     0,    68,   160,
   139,   138,   140,   133,   166,   168,   167,   169,   170,     0,
     0,    67,   120,   128,   130,   132,   129,     0,     0,     0,
    60,     6,     4,     0,   126,   127,     0,     0,     0,     0,
    55,    76,     0,     0,     0,     0,     0,     0,   142,   143,
   164,    76,    61,     0,     0,     0,     0,     0,     0,     0,
     0,    11,    13,    14,     0,   161,   163,   131,     0,    70,
    72,    74,     0,    77,   121,   122,   123,   124,   125,     0,
     0,     0,     0,     0,     0,    65,     0,     0,    32,    58,
     0,    48,    50,     0,     0,     0,     0,     9,     0,   151,
   155,   148,   144,   154,   158,   156,     0,   146,    16,     0,
     0,     0,     0,     0,     0,    75,    90,    91,    92,    93,
    94,    95,    96,    97,     0,   129,     0,    82,   134,     0,
     0,   137,     0,    62,    64,    63,     7,     0,     0,     0,
     0,     0,     0,     0,    12,     0,     0,     0,     0,   159,
     0,    15,   162,    71,    73,    88,     0,   118,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    34,   136,   135,     0,    33,     0,    54,     0,    51,    53,
    27,     0,     0,    31,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    17,    58,    89,    86,    87,     0,     0,
     0,   116,   115,   117,     0,     0,    99,    98,     0,   104,
     0,     0,   107,    78,    79,    81,     0,    83,   165,    59,
    66,    49,     0,    28,     0,   152,     0,   149,     0,   145,
   157,   147,    18,     0,    25,    23,    22,    21,     0,     0,
   104,     0,   114,     0,     0,   103,     0,     0,   112,   106,
     0,     0,     0,    69,    52,     0,     0,     0,    19,     0,
     0,     0,     0,     0,   102,     0,     0,   101,   105,   111,
     0,   109,    80,    40,    35,    36,    40,    84,    29,   153,
   150,    20,    24,     0,     0,   100,   110,   108,   113,    41,
    42,    38,     0,    39,     0,     0,    26,   119,    37,    85,
     0,    30,     0,     0,     0
};

static const short yydefgoto[] = {   323,
     6,     7,    76,     8,     9,    81,    82,    83,   172,   214,
    84,   108,   238,   295,   296,   312,    10,    11,   112,   198,
   199,    12,    19,    13,    72,    73,    14,   113,    41,    61,
    62,    90,    91,    94,   148,   234,   191,   274,   136,   137,
   138,   139,   140,   266,   141,   142,   267,   143,   226,   144,
   178,    42,   145,    44,    45,    46,    92,   129,    47,   109,
   240,    48
};

static const short yypact[] = {    98,
    -9,    -3,    49,     2,   -22,    98,   -47,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,     2,     2,-32768,-32768,   298,   117,
    45,     2,     4,-32768,-32768,     5,   340,   340,-32768,   178,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   340,
    78,    21,   253,-32768,-32768,-32768,-32768,    11,   110,   114,
   131,    47,-32768,   105,-32768,-32768,   138,   159,    33,     0,
-32768,   173,   340,   340,   340,   340,   340,   260,-32768,-32768,
-32768,    26,-32768,   184,   131,    92,   112,   135,   164,   115,
    14,-32768,-32768,-32768,   338,   232,-32768,-32768,   221,   158,
-32768,-32768,   191,   246,   253,   128,   128,-32768,-32768,   195,
   340,   262,    58,   150,   131,-32768,   314,    56,-32768,    49,
   204,-32768,-32768,   131,   206,   213,   191,-32768,   105,   223,
-32768,   224,   227,-32768,-32768,   230,   243,   234,-32768,   271,
   249,     2,   191,   235,   191,   160,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   219,   257,   313,   311,-32768,    70,
   254,-32768,   307,-32768,-32768,   253,-32768,   131,   298,   142,
   108,   131,   131,    28,-32768,   331,   332,   333,   339,-32768,
   348,    48,-32768,-32768,-32768,-32768,   327,-32768,    30,    53,
   191,   191,    46,   229,   340,   129,   282,    15,   262,   191,
   297,-32768,-32768,   354,-32768,    78,-32768,   116,-32768,-32768,
-32768,   136,   145,-32768,   152,   166,   285,   286,   287,   334,
   290,     2,   200,-32768,    49,-32768,   372,-32768,   340,   129,
   299,-32768,-32768,-32768,   323,   235,-32768,   253,   169,   305,
     9,   345,-32768,   315,-32768,   160,   377,   335,-32768,-32768,
-32768,-32768,   142,-32768,   360,-32768,   393,-32768,   394,-32768,
-32768,-32768,   225,   191,   328,-32768,-32768,-32768,   298,   177,
   305,     9,-32768,   340,   129,-32768,   197,   329,-32768,-32768,
   262,    77,   396,-32768,-32768,     2,   330,   336,-32768,   369,
    32,   131,    78,   340,-32768,   201,   337,   253,-32768,-32768,
   129,-32768,-32768,   192,   341,-32768,   192,   343,   342,-32768,
-32768,-32768,-32768,   214,   344,   253,-32768,-32768,-32768,-32768,
-32768,-32768,    77,-32768,   401,   131,-32768,-32768,-32768,-32768,
   216,-32768,   420,   421,-32768
};

static const short yypgoto[] = {-32768,
-32768,   418,-32768,-32768,-32768,-32768,   310,-32768,-32768,-32768,
-32768,  -111,-32768,-32768,   113,   134,-32768,-32768,-32768,-32768,
   189,   346,  -108,-32768,-32768,   347,-32768,-32768,  -154,  -190,
-32768,-32768,   301,   362,-32768,-32768,-32768,-32768,  -109,-32768,
-32768,-32768,-32768,   175,-32768,-32768,   176,-32768,-32768,-32768,
  -140,-32768,   -18,  -156,-32768,   226,    -4,-32768,   -79,   -35,
-32768,-32768
};


#define	YYLAST		452


static const short yytable[] = {    21,
    43,   159,   161,   200,   196,   241,    15,   164,    55,    56,
    25,    26,    16,   146,    20,    74,    20,    52,    85,   232,
    22,    59,   151,   176,   146,   179,    31,    32,    33,   230,
   181,   182,   181,   182,   181,   182,    24,   146,    34,    64,
    65,    66,    67,   227,    95,    96,    97,    98,    99,   103,
   202,   203,   210,   146,   233,   146,   104,   183,   184,    64,
    65,    66,    67,   261,    64,    65,    66,    67,   219,    74,
    17,   217,   218,    18,   269,   185,    64,    65,    66,    67,
   236,    51,   150,    85,    89,   263,   200,    53,   156,    54,
   268,    30,   305,   177,   294,    68,   211,   212,   213,   118,
   119,   146,   146,    60,   283,   269,   259,    63,   289,   235,
   146,     1,   105,   204,     2,   216,   180,   303,    88,    71,
   110,   287,   195,   220,    69,   221,     3,    49,    70,    50,
   186,    75,   187,     4,   309,   111,    66,    67,    88,     5,
    43,   157,   158,   152,   281,    71,    31,    32,    33,    77,
    78,    79,    86,    80,   133,   192,    27,    28,    34,    31,
    32,    33,   181,   182,    30,   228,   229,    31,    32,    33,
   304,    34,   264,    87,   146,    64,    65,    66,    67,    34,
   284,   197,   115,    64,    65,    66,    67,   153,    57,   107,
    58,   293,   297,   201,   158,   133,   114,    27,    28,   117,
   260,   242,   243,    93,   321,    30,    59,   255,    31,    32,
    33,   116,    35,    36,    37,    38,    39,    31,    32,    33,
    34,   244,   158,   183,   184,    64,    65,    66,    67,   256,
   245,   158,   134,   297,   135,    27,    28,   246,   247,   257,
    43,   185,   130,    30,   132,   288,    31,    32,    33,     3,
   222,   248,   249,    35,    36,    37,    38,    39,    34,    64,
    65,    66,    67,   310,   311,   306,    27,    28,   100,   279,
   280,   299,   147,   134,    30,   135,    30,    31,    32,    33,
   149,   101,   290,   291,   102,   173,   307,   291,   160,    34,
   162,    35,    36,    37,    38,    39,   186,   163,   187,   317,
   158,   322,   158,   170,    27,    28,    29,   166,   167,   223,
   224,   168,    30,   225,   169,    31,    32,    33,   171,   177,
    27,    28,    35,    36,    37,    38,    39,    34,    30,    27,
    28,    31,    32,    33,   174,   188,   189,    30,   190,   193,
    31,    32,    33,    34,    40,   194,    27,    28,   205,   206,
   207,   215,    34,   155,    30,   215,   208,    31,    32,    33,
    35,    36,    37,    38,    39,   209,   231,   237,   239,    34,
   250,   251,   252,   253,   254,   182,    35,    36,    37,    38,
    39,   265,    40,   262,   270,    35,    36,    37,    38,    39,
   120,   121,   122,   123,   124,   125,   126,   127,    40,   128,
   272,   271,    35,    36,    37,    38,    39,    40,   273,   276,
   277,   278,   282,   298,   292,   300,   302,   315,   320,   324,
   325,   301,   308,    23,    40,   319,   316,   313,   165,   318,
   314,   275,   175,   106,   131,   285,     0,   286,   258,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   154
};

static const short yycheck[] = {     4,
    19,   110,   114,   160,   159,   196,    16,   117,    27,    28,
    15,    16,    16,    93,    15,    51,    15,    22,    54,     5,
    43,    40,   102,   133,   104,   135,    18,    19,    20,   186,
     3,     4,     3,     4,     3,     4,    84,   117,    30,     7,
     8,     9,    10,   184,    63,    64,    65,    66,    67,    68,
   162,   163,     5,   133,    40,   135,    31,     5,     6,     7,
     8,     9,    10,   220,     7,     8,     9,    10,    23,   105,
    22,   181,   182,    25,   231,    23,     7,     8,     9,    10,
   190,    37,   101,   119,    85,   226,   243,    84,   107,    85,
   231,    15,   283,    85,    18,    85,    49,    50,    51,    86,
    87,   181,   182,    26,   259,   262,   215,    87,   265,   189,
   190,    14,    87,    86,    17,    86,   135,    86,    86,    15,
    29,   262,   158,    78,    15,    80,    29,    11,    15,    13,
    78,    85,    80,    36,   291,    44,     9,    10,    86,    42,
   159,    86,    87,    86,   254,    15,    18,    19,    20,    45,
    46,    47,    15,    49,     5,    86,     7,     8,    30,    18,
    19,    20,     3,     4,    15,   184,   185,    18,    19,    20,
   282,    30,     4,    15,   254,     7,     8,     9,    10,    30,
     4,    40,    48,     7,     8,     9,    10,    38,    11,     6,
    13,   271,   272,    86,    87,     5,    85,     7,     8,    85,
   219,    86,    87,    31,   316,    15,   225,   212,    18,    19,
    20,    48,    63,    64,    65,    66,    67,    18,    19,    20,
    30,    86,    87,     5,     6,     7,     8,     9,    10,    30,
    86,    87,    83,   313,    85,     7,     8,    86,    87,    40,
   259,    23,    11,    15,    87,   264,    18,    19,    20,    29,
    22,    86,    87,    63,    64,    65,    66,    67,    30,     7,
     8,     9,    10,    72,    73,   284,     7,     8,     9,    45,
    46,   276,    27,    83,    15,    85,    15,    18,    19,    20,
    86,    22,    86,    87,    25,    15,    86,    87,    85,    30,
    85,    63,    64,    65,    66,    67,    78,    85,    80,    86,
    87,    86,    87,    61,     7,     8,     9,    85,    85,    81,
    82,    85,    15,    85,    85,    18,    19,    20,    85,    85,
     7,     8,    63,    64,    65,    66,    67,    30,    15,     7,
     8,    18,    19,    20,    86,    79,    24,    15,    28,    86,
    18,    19,    20,    30,    85,    39,     7,     8,    18,    18,
    18,    29,    30,    40,    15,    29,    18,    18,    19,    20,
    63,    64,    65,    66,    67,    18,    85,    71,    15,    30,
    86,    86,    86,    40,    85,     4,    63,    64,    65,    66,
    67,    77,    85,    85,    40,    63,    64,    65,    66,    67,
    53,    54,    55,    56,    57,    58,    59,    60,    85,    62,
    24,    87,    63,    64,    65,    66,    67,    85,    74,    50,
    18,    18,    85,    18,    86,    86,    48,    75,    18,     0,
     0,    86,    86,     6,    85,   313,    85,    87,   119,    86,
   297,   243,   132,    72,    89,   261,    -1,   262,   213,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   105
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_Parser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_Parser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_Parser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_Parser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_Parser_CHAR = (token), YY_Parser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_Parser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_Parser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_Parser_PURE
/* UNPURE */
#define YYLEX           YY_Parser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_Parser_CHAR;                      /*  the lookahead symbol        */
YY_Parser_STYPE      YY_Parser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_Parser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_Parser_LSP_NEEDED
YY_Parser_LTYPE YY_Parser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_Parser_LSP_NEEDED
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL, &YY_Parser_LLOC)
#else
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_Parser_DEBUG != 0
int YY_Parser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_Parser_CLASS::
#endif
     YY_Parser_PARSE(YY_Parser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_Parser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_Parser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_Parser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_Parser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_Parser_LTYPE *yyls = yylsa;
  YY_Parser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_Parser_PURE
  int YY_Parser_CHAR;
  YY_Parser_STYPE YY_Parser_LVAL;
  int YY_Parser_NERRS;
#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE YY_Parser_LLOC;
#endif
#endif

  YY_Parser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_Parser_NERRS = 0;
  YY_Parser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_Parser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_Parser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_Parser_LSP_NEEDED
      YY_Parser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_Parser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_Parser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_Parser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_Parser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_Parser_LSP_NEEDED
      yyls = (YY_Parser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_Parser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_Parser_CHAR == YYEMPTY)
    {
#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_Parser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_Parser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_Parser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_Parser_CHAR);

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_Parser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_Parser_CHAR, YY_Parser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_Parser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_Parser_CHAR != YYEOF)
    YY_Parser_CHAR = YYEMPTY;

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 151 "parser.y"
{ yyval = new Program((SQLList*)yyvsp[0]); parseRoot = yyval; ;
    break;}
case 2:
#line 152 "parser.y"
{ yyval = 0; parseRoot = yyval; ;
    break;}
case 3:
#line 156 "parser.y"
{ yyval = new SQLList((SQL*)yyvsp[-1]); ;
    break;}
case 4:
#line 157 "parser.y"
{ yyval = new SQLList((SQLList*)yyvsp[-2], (SQL*)yyvsp[-1]); ;
    break;}
case 5:
#line 161 "parser.y"
{ yyval = new SQL((Schema*)yyvsp[0]); ;
    break;}
case 6:
#line 165 "parser.y"
{ yyval = new OptColumnCommalist(NULL); ;
    break;}
case 7:
#line 166 "parser.y"
{ yyval = new OptColumnCommalist((ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 8:
#line 170 "parser.y"
{ yyval = new Schema((BaseTableDef*)yyvsp[0]); ;
    break;}
case 9:
#line 174 "parser.y"
{ yyval = new BaseTableDef("CREATE", (Table*)yyvsp[-3], (BaseTableElementCommalist*)yyvsp[-1]); ;
    break;}
case 10:
#line 175 "parser.y"
{ yyval = new BaseTableDef("DROP", (Table*)yyvsp[0]); ;
    break;}
case 11:
#line 179 "parser.y"
{ yyval = new BaseTableElementCommalist( (BaseTableElement*)yyvsp[0]); ;
    break;}
case 12:
#line 180 "parser.y"
{ yyval = new BaseTableElementCommalist( (BaseTableElementCommalist*)yyvsp[-2], (BaseTableElement*)yyvsp[0]); ;
    break;}
case 13:
#line 184 "parser.y"
{ yyval = new BaseTableElement( (ColumnDef*)yyvsp[0]); ;
    break;}
case 14:
#line 185 "parser.y"
{ yyval = new BaseTableElement( (TableConstraintDef*)yyvsp[0]); ;
    break;}
case 15:
#line 189 "parser.y"
{ yyval = new ColumnDef( (Column*)yyvsp[-2], (DataType*)yyvsp[-1], (ColumnDefOptList*)yyvsp[0]); ;
    break;}
case 16:
#line 193 "parser.y"
{ yyval = NULL; ;
    break;}
case 17:
#line 194 "parser.y"
{ yyval = new ColumnDefOptList( (ColumnDefOptList*)yyvsp[-1], (ColumnDefOpt*)yyvsp[0]); ;
    break;}
case 18:
#line 199 "parser.y"
{ yyval = new ColumnDefOpt(0); ;
    break;}
case 19:
#line 200 "parser.y"
{ yyval = new ColumnDefOpt(1); ;
    break;}
case 20:
#line 201 "parser.y"
{ yyval = new ColumnDefOpt(2); ;
    break;}
case 21:
#line 202 "parser.y"
{ yyval = new ColumnDefOpt(3, (Literal*)yyvsp[0]); ;
    break;}
case 22:
#line 203 "parser.y"
{ yyval = new ColumnDefOpt(4); ;
    break;}
case 23:
#line 204 "parser.y"
{ yyval = new ColumnDefOpt(5); ;
    break;}
case 24:
#line 205 "parser.y"
{ yyval = new ColumnDefOpt(6, (SearchCondition*)yyvsp[-1]); ;
    break;}
case 25:
#line 206 "parser.y"
{ yyval = new ColumnDefOpt(7, (Table*)yyvsp[0]); ;
    break;}
case 26:
#line 207 "parser.y"
{ yyval = new ColumnDefOpt(8, (Table*)yyvsp[-3], (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 27:
#line 211 "parser.y"
{ yyval = new TableConstraintDef(0, (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 28:
#line 212 "parser.y"
{ yyval = new TableConstraintDef(1, (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 29:
#line 213 "parser.y"
{ yyval = new TableConstraintDef(2, (ColumnCommalist*)yyvsp[-3], (Table*)yyvsp[0]); ;
    break;}
case 30:
#line 214 "parser.y"
{ yyval = new TableConstraintDef(2, (ColumnCommalist*)yyvsp[-6], (Table*)yyvsp[-3], (ColumnCommalist*)yyvsp[-1]); ;
    break;}
case 31:
#line 215 "parser.y"
{yyval = new TableConstraintDef(3, (SearchCondition*)yyvsp[-1]); ;
    break;}
case 32:
#line 219 "parser.y"
{ yyval = new ColumnCommalist((Column*)yyvsp[0]); ;
    break;}
case 33:
#line 220 "parser.y"
{ yyval = new ColumnCommalist((ColumnCommalist*)yyvsp[-2], (Column*)yyvsp[0]); ;
    break;}
case 34:
#line 224 "parser.y"
{ yyval = NULL; ;
    break;}
case 35:
#line 225 "parser.y"
{ yyval = new OptOrderByClause((OrderingSpecCommalist*)yyvsp[0]); ;
    break;}
case 36:
#line 229 "parser.y"
{ yyval = new OrderingSpecCommalist((OrderingSpec*)yyvsp[0]); ;
    break;}
case 37:
#line 230 "parser.y"
{ yyval = new OrderingSpecCommalist((OrderingSpecCommalist*)yyvsp[-2], (OrderingSpec*)yyvsp[0]); ;
    break;}
case 38:
#line 234 "parser.y"
{ yyval = new OrderingSpec(dData[0], (OptAscDesc*)yyvsp[0]); ;
    break;}
case 39:
#line 235 "parser.y"
{ yyval = new OrderingSpec((ColumnRef*)yyvsp[-1], (OptAscDesc*)yyvsp[0]); ;
    break;}
case 40:
#line 239 "parser.y"
{ yyval = new OptAscDesc(""); ;
    break;}
case 41:
#line 240 "parser.y"
{ yyval = new OptAscDesc("ASC"); ;
    break;}
case 42:
#line 241 "parser.y"
{ yyval = new OptAscDesc("DESC"); ;
    break;}
case 43:
#line 248 "parser.y"
{ yyval = new SQL((ManipulativeStatement*)yyvsp[0]); ;
    break;}
case 44:
#line 252 "parser.y"
{ yyval = new ManipulativeStatement((SelectStatement*)yyvsp[0]); ;
    break;}
case 45:
#line 253 "parser.y"
{ yyval = new ManipulativeStatement((InsertStatement*)yyvsp[0]); ;
    break;}
case 46:
#line 254 "parser.y"
{ yyval = new ManipulativeStatement((UpdateStatementPositioned*)yyvsp[0]); ;
    break;}
case 47:
#line 255 "parser.y"
{ yyval = new ManipulativeStatement((UpdateStatementSearched*)yyvsp[0]); ;
    break;}
case 48:
#line 271 "parser.y"
{ yyval = new InsertStatement((Table*)yyvsp[-2], (OptColumnCommalist*)yyvsp[-1], (ValuesOrQuerySpec*)yyvsp[0]); ;
    break;}
case 49:
#line 275 "parser.y"
{ yyval = new ValuesOrQuerySpec((InsertAtomCommalist*)yyvsp[-1]); ;
    break;}
case 50:
#line 276 "parser.y"
{ yyval = new ValuesOrQuerySpec((QuerySpec*)yyvsp[0]); ;
    break;}
case 51:
#line 280 "parser.y"
{ yyval = new InsertAtomCommalist((InsertAtom*)yyvsp[0]); ;
    break;}
case 52:
#line 281 "parser.y"
{ yyval = new InsertAtomCommalist((InsertAtomCommalist*)yyvsp[-2], (InsertAtom*)yyvsp[0]); ;
    break;}
case 53:
#line 285 "parser.y"
{ yyval = new InsertAtom((Atom*)yyvsp[0]); ;
    break;}
case 54:
#line 286 "parser.y"
{ yyval = new InsertAtom(NULL); ;
    break;}
case 55:
#line 292 "parser.y"
{ yyval = new SelectStatement((OptAllDistinct*)yyvsp[-2], (Selection*)yyvsp[-1], (TableExp*)yyvsp[0]); ;
    break;}
case 56:
#line 296 "parser.y"
{ yyval = new OptAllDistinct("ALL"); ;
    break;}
case 57:
#line 297 "parser.y"
{ yyval = new OptAllDistinct("DISTINCT"); ;
    break;}
case 58:
#line 298 "parser.y"
{ yyval = new OptAllDistinct(""); ;
    break;}
case 59:
#line 303 "parser.y"
{ yyval = new UpdateStatementPositioned((Table*)yyvsp[-6], (AssignmentCommalist*)yyvsp[-4], (Cursor*)yyvsp[0]); ;
    break;}
case 60:
#line 307 "parser.y"
{ yyval = NULL; ;
    break;}
case 61:
#line 308 "parser.y"
{ yyval = new AssignmentCommalist((Assignment*)yyvsp[0]); ;
    break;}
case 62:
#line 309 "parser.y"
{ yyval = new AssignmentCommalist((AssignmentCommalist*)yyvsp[-2], (Assignment*)yyvsp[0]); ;
    break;}
case 63:
#line 313 "parser.y"
{ yyval = new Assignment((Column*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 64:
#line 314 "parser.y"
{ yyval = new Assignment((Column*)yyvsp[-2], NULL); ;
    break;}
case 65:
#line 318 "parser.y"
{ yyval = new UpdateStatementSearched((Table*)yyvsp[-3], (AssignmentCommalist*)yyvsp[-1], (OptWhereClause*)yyvsp[0]); ;
    break;}
case 66:
#line 322 "parser.y"
{ yyval = new QuerySpec((OptAllDistinct*)yyvsp[-2], (Selection*)yyvsp[-1], (TableExp*)yyvsp[0]); ;
    break;}
case 67:
#line 326 "parser.y"
{ yyval = new Selection((ScalarExpCommalist*)yyvsp[0]); ;
    break;}
case 68:
#line 327 "parser.y"
{ yyval = new Selection("*"); ;
    break;}
case 69:
#line 336 "parser.y"
{ yyval = new TableExp((FromClause*)yyvsp[-5], (OptWhereClause*)yyvsp[-4], (OptGroupByClause*)yyvsp[-3], (OptHavingClause*)yyvsp[-2],
                                                    (OptOrderByClause*)yyvsp[-1], (OptLimitClause*)yyvsp[0]); ;
    break;}
case 70:
#line 341 "parser.y"
{ yyval = new FromClause((TableRefCommalist*)yyvsp[0]); ;
    break;}
case 71:
#line 342 "parser.y"
{ yyval = new FromClause((SelectStatement*)yyvsp[-1]); ;
    break;}
case 72:
#line 346 "parser.y"
{ yyval = new TableRefCommalist((TableRef*)yyvsp[0]); ;
    break;}
case 73:
#line 347 "parser.y"
{ yyval = new TableRefCommalist((TableRefCommalist*)yyvsp[-2], (TableRef*)yyvsp[0]); ;
    break;}
case 74:
#line 351 "parser.y"
{ yyval = new TableRef((Table *)yyvsp[0]); ;
    break;}
case 75:
#line 356 "parser.y"
{ yyval = new OptWhereClause((SearchCondition*)yyvsp[0]); ;
    break;}
case 76:
#line 357 "parser.y"
{ yyval = NULL; ;
    break;}
case 77:
#line 361 "parser.y"
{ yyval = NULL; ;
    break;}
case 78:
#line 362 "parser.y"
{ yyval = new OptGroupByClause((ColumnRefCommalist*)yyvsp[0]); ;
    break;}
case 79:
#line 366 "parser.y"
{ yyval = new ColumnRefCommalist((ColumnRef*)yyvsp[0]); ;
    break;}
case 80:
#line 367 "parser.y"
{ yyval = new ColumnRefCommalist((ColumnRefCommalist*)yyvsp[-2], (ColumnRef*)yyvsp[0]); ;
    break;}
case 81:
#line 371 "parser.y"
{ yyval = new OptHavingClause((SearchCondition*)yyvsp[0]); ;
    break;}
case 82:
#line 372 "parser.y"
{ yyval = NULL; ;
    break;}
case 83:
#line 376 "parser.y"
{ yyval = NULL; ;
    break;}
case 84:
#line 377 "parser.y"
{ yyval = new OptLimitClause(dData[0]); ;
    break;}
case 85:
#line 379 "parser.y"
{ yyval = new OptLimitClause(1, dData[0], dData[1]); ;
    break;}
case 86:
#line 383 "parser.y"
{ yyval = new SearchCondition(0, (SearchCondition*)yyvsp[-2], (SearchCondition*)yyvsp[0]); ;
    break;}
case 87:
#line 384 "parser.y"
{ yyval = new SearchCondition(1, (SearchCondition*)yyvsp[-2], (SearchCondition*)yyvsp[0]); ;
    break;}
case 88:
#line 385 "parser.y"
{ yyval = new SearchCondition(2, (SearchCondition*)yyvsp[0]); ;
    break;}
case 89:
#line 386 "parser.y"
{ yyval = new SearchCondition(3, (SearchCondition*)yyvsp[-1]); ;
    break;}
case 90:
#line 387 "parser.y"
{ yyval = new SearchCondition((Predicate*)yyvsp[0]); ;
    break;}
case 91:
#line 391 "parser.y"
{ yyval = new Predicate((ComparisonPredicate*)yyvsp[0]); ;
    break;}
case 92:
#line 392 "parser.y"
{ yyval = new Predicate((BetweenPredicate*)yyvsp[0]); ;
    break;}
case 93:
#line 393 "parser.y"
{ yyval = new Predicate((LikePredicate*)yyvsp[0]); ;
    break;}
case 94:
#line 394 "parser.y"
{ yyval = new Predicate((TestForNull*)yyvsp[0]); ;
    break;}
case 95:
#line 395 "parser.y"
{ yyval = new Predicate((InPredicate*)yyvsp[0]); ;
    break;}
case 96:
#line 396 "parser.y"
{ yyval = new Predicate((AllOrAnyPredicate*)yyvsp[0]); ;
    break;}
case 97:
#line 397 "parser.y"
{ yyval = new Predicate((ExistenceTest*)yyvsp[0]); ;
    break;}
case 98:
#line 402 "parser.y"
{ yyval = new ComparisonPredicate(strData[5], (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 99:
#line 403 "parser.y"
{ yyval = new ComparisonPredicate(strData[5], (ScalarExp*)yyvsp[-2], (Subquery*)yyvsp[0]); ;
    break;}
case 100:
#line 407 "parser.y"
{ yyval = new BetweenPredicate(2, (ScalarExp*)yyvsp[-5], (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 101:
#line 408 "parser.y"
{ yyval = new BetweenPredicate(1, (ScalarExp*)yyvsp[-4], (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 102:
#line 412 "parser.y"
{ yyval = new LikePredicate(2, (ScalarExp*)yyvsp[-4], (Atom*)yyvsp[-1], (OptEscape*)yyvsp[0]); ;
    break;}
case 103:
#line 413 "parser.y"
{ yyval = new LikePredicate(1, (ScalarExp*)yyvsp[-3], (Atom*)yyvsp[-1], (OptEscape*)yyvsp[0]); ;
    break;}
case 104:
#line 417 "parser.y"
{ yyval = NULL; ;
    break;}
case 105:
#line 418 "parser.y"
{ yyval = new OptEscape((Atom*)yyvsp[0]); ;
    break;}
case 106:
#line 422 "parser.y"
{ yyval = new TestForNull(1, (ColumnRef*)yyvsp[-3]); ;
    break;}
case 107:
#line 423 "parser.y"
{ yyval = new TestForNull(0, (ColumnRef*)yyvsp[-2]); ;
    break;}
case 108:
#line 427 "parser.y"
{ yyval = new InPredicate(1, (ScalarExp*)yyvsp[-5], (Subquery*)yyvsp[-1]); ;
    break;}
case 109:
#line 428 "parser.y"
{ yyval = new InPredicate(0, (ScalarExp*)yyvsp[-4], (Subquery*)yyvsp[-1]); ;
    break;}
case 110:
#line 429 "parser.y"
{ yyval = new InPredicate(1, (ScalarExp*)yyvsp[-5], (AtomCommalist*)yyvsp[-1]); ;
    break;}
case 111:
#line 430 "parser.y"
{ yyval = new InPredicate(0, (ScalarExp*)yyvsp[-4], (AtomCommalist*)yyvsp[-1]); ;
    break;}
case 112:
#line 434 "parser.y"
{ yyval = new AtomCommalist((Atom*)yyvsp[0]); ;
    break;}
case 113:
#line 435 "parser.y"
{ yyval = new AtomCommalist((AtomCommalist*)yyvsp[-2], (Atom*)yyvsp[0]); ;
    break;}
case 114:
#line 439 "parser.y"
{ yyval = new AllOrAnyPredicate((ScalarExp*)yyvsp[-3], (AnyAllSome*)yyvsp[-1], (Subquery*)yyvsp[0]); ;
    break;}
case 115:
#line 443 "parser.y"
{ yyval = new AnyAllSome("ANY"); ;
    break;}
case 116:
#line 444 "parser.y"
{ yyval = new AnyAllSome("ALL"); ;
    break;}
case 117:
#line 445 "parser.y"
{ yyval = new AnyAllSome("SOME"); ;
    break;}
case 118:
#line 449 "parser.y"
{ yyval = new ExistenceTest((Subquery*)yyvsp[0]); ;
    break;}
case 119:
#line 453 "parser.y"
{ yyval = new Subquery((OptAllDistinct*)yyvsp[-3], (Selection*)yyvsp[-2], (TableExp*)yyvsp[-1]); ;
    break;}
case 120:
#line 459 "parser.y"
{ yyval = new ScalarExpCommalist((ScalarExp*)yyvsp[0]); ;
    break;}
case 121:
#line 460 "parser.y"
{ yyval = new ScalarExpCommalist((ScalarExpCommalist*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 122:
#line 464 "parser.y"
{ yyval = new ScalarExp(1, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 123:
#line 465 "parser.y"
{ yyval = new ScalarExp(2, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 124:
#line 466 "parser.y"
{ yyval = new ScalarExp(3, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 125:
#line 467 "parser.y"
{ yyval = new ScalarExp(4, (ScalarExp*)yyvsp[-2], (ScalarExp*)yyvsp[0]); ;
    break;}
case 126:
#line 468 "parser.y"
{ yyval = new ScalarExp(5, (ScalarExp*)yyvsp[0]);  ;
    break;}
case 127:
#line 469 "parser.y"
{ yyval = new ScalarExp(6, (ScalarExp*)yyvsp[0]); ;
    break;}
case 128:
#line 470 "parser.y"
{ yyval = new ScalarExp((Atom*)yyvsp[0]); ;
    break;}
case 129:
#line 471 "parser.y"
{ yyval = new ScalarExp((ColumnRef*)yyvsp[0]); ;
    break;}
case 130:
#line 472 "parser.y"
{ yyval = new ScalarExp((FunctionRef*)yyvsp[0]); ;
    break;}
case 131:
#line 473 "parser.y"
{ yyval = new ScalarExp(0, (ScalarExp*)yyvsp[-1]); ;
    break;}
case 132:
#line 478 "parser.y"
{ yyval = new Atom((Literal*)yyvsp[0]); ;
    break;}
case 133:
#line 479 "parser.y"
{ yyval = new Atom("USER"); ;
    break;}
case 134:
#line 483 "parser.y"
{ yyval = new FunctionRef((Ammsc*)yyvsp[-3]);;
    break;}
case 135:
#line 484 "parser.y"
{ yyval = new FunctionRef((Ammsc*)yyvsp[-4], (ColumnRef*)yyvsp[-1]); ;
    break;}
case 136:
#line 485 "parser.y"
{ yyval = new FunctionRef(0, (Ammsc*)yyvsp[-4], (ScalarExp*)yyvsp[-1]); ;
    break;}
case 137:
#line 486 "parser.y"
{ yyval = new FunctionRef(1, (Ammsc*)yyvsp[-3], (ScalarExp*)yyvsp[-1]); ;
    break;}
case 138:
#line 490 "parser.y"
{ yyval = new Literal(strData[0]); ;
    break;}
case 139:
#line 491 "parser.y"
{ yyval = new Literal(dData[0]); ;
    break;}
case 140:
#line 492 "parser.y"
{ yyval = new Literal(dData[0]); ;
    break;}
case 141:
#line 496 "parser.y"
{ yyval = new Table(strData[0]); ;
    break;}
case 142:
#line 497 "parser.y"
{ yyval = new Table(0, strData[0], strData[1]);;
    break;}
case 143:
#line 498 "parser.y"
{ yyval = new Table(1, strData[0], strData[1]);  ;
    break;}
case 144:
#line 504 "parser.y"
{ yyval = new DataType(0); ;
    break;}
case 145:
#line 505 "parser.y"
{ yyval = new DataType(0, dData[0]); ;
    break;}
case 146:
#line 506 "parser.y"
{ yyval = new DataType(1); ;
    break;}
case 147:
#line 507 "parser.y"
{ yyval = new DataType(1, dData[0]); ;
    break;}
case 148:
#line 508 "parser.y"
{ yyval = new DataType(2); ;
    break;}
case 149:
#line 509 "parser.y"
{ yyval = new DataType(2, dData[0]); ;
    break;}
case 150:
#line 510 "parser.y"
{ yyval = new DataType(2, dData[0], dData[1]); ;
    break;}
case 151:
#line 511 "parser.y"
{ yyval = new DataType(3); ;
    break;}
case 152:
#line 512 "parser.y"
{ yyval = new DataType(3, dData[0]); ;
    break;}
case 153:
#line 513 "parser.y"
{ yyval = new DataType(3, dData[0], dData[1]); ;
    break;}
case 154:
#line 514 "parser.y"
{ yyval = new DataType(4); ;
    break;}
case 155:
#line 515 "parser.y"
{ yyval = new DataType(5); ;
    break;}
case 156:
#line 516 "parser.y"
{ yyval = new DataType(6); ;
    break;}
case 157:
#line 517 "parser.y"
{ yyval = new DataType(6, dData[0]); ;
    break;}
case 158:
#line 518 "parser.y"
{ yyval = new DataType(7); ;
    break;}
case 159:
#line 519 "parser.y"
{ yyval = new DataType(8); ;
    break;}
case 160:
#line 523 "parser.y"
{ yyval = new ColumnRef(strData[0]); ;
    break;}
case 161:
#line 524 "parser.y"
{ yyval = new ColumnRef(0, strData[0], strData[1]); ;
    break;}
case 162:
#line 525 "parser.y"
{ yyval = new ColumnRef(strData[0], strData[1], strData[2]);;
    break;}
case 163:
#line 526 "parser.y"
{ yyval = new ColumnRef(1, strData[0], strData[1]); ;
    break;}
case 164:
#line 530 "parser.y"
{ yyval = new Column(strData[0]); ;
    break;}
case 165:
#line 534 "parser.y"
{ yyval = new Cursor(strData[0]); ;
    break;}
case 166:
#line 538 "parser.y"
{ yyval = new Ammsc("AVG"); ;
    break;}
case 167:
#line 539 "parser.y"
{ yyval = new Ammsc("MIN"); ;
    break;}
case 168:
#line 540 "parser.y"
{ yyval = new Ammsc("MAX"); ;
    break;}
case 169:
#line 541 "parser.y"
{ yyval = new Ammsc("SUM"); ;
    break;}
case 170:
#line 542 "parser.y"
{ yyval = new Ammsc("COUNT"); ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_Parser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_Parser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_Parser_LLOC.first_line;
      yylsp->first_column = YY_Parser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_Parser_NERRS;

#ifdef YY_Parser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_Parser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_Parser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_Parser_ERROR_VERBOSE */
	YY_Parser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_Parser_CHAR == YYEOF)
	YYABORT;

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_Parser_CHAR, yytname[yychar1]);
#endif

      YY_Parser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_Parser_LSP_NEEDED
  yylsp--;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 545 "parser.y"
