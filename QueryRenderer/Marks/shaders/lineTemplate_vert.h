#ifndef LINETEMPLATE_VERT_H_
#define LINETEMPLATE_VERT_H_

#include <string>

namespace QueryRenderer {
struct LineTemplate_Vert {
  static const std::string source;
};

const std::string LineTemplate_Vert::source =
    "// VERTEX SHADER\n"
    "\n"
    "#version 410 core\n"
    "\n"
    "#define inTx <inTxType>\n"
    "#define outTx <outTxType>\n"
    "\n"
    "#define inTy <inTyType>\n"
    "#define outTy <outTyType>\n"
    "\n"
    "#define useUid <useUid>\n"
    "\n"
    "in inTx x;\n"
    "in inTy y;\n"
    "\n"
    "#if useUid == 1\n"
    "uniform uint id;\n"
    "#endif\n"
    "\n"
    "#define usePerVertColor <usePerVertColor>\n"
    "#define useUstrokeColor <useUstrokeColor>\n"
    "#define inTstrokeColor <inTstrokeColorType>\n"
    "#define outTstrokeColor <outTstrokeColorType>\n"
    "\n"
    "#if useUstrokeColor == 1\n"
    "uniform inTstrokeColor strokeColor;\n"
    "#elif usePerVertColor == 1\n"
    "in inTstrokeColor strokeColor;\n"
    "#endif\n"
    "\n"
    "#define usePerVertWidth <usePerVertWidth>\n"
    "#define useUstrokeWidth <useUstrokeWidth>\n"
    "#define inTstrokeWidth <inTstrokeWidthType>\n"
    "#define outTstrokeWidth <outTstrokeWidthType>\n"
    "\n"
    "#if useUstrokeWidth == 1\n"
    "uniform inTstrokeWidth strokeWidth;\n"
    "#elif usePerVertWidth == 1\n"
    "in inTstrokeWidth strokeWidth;\n"
    "#endif\n"
    "\n"
    "#define useUniformBuffer <useUniformBuffer>\n"
    "#if useUniformBuffer == 1\n"
    "<lineData>\n"
    "#endif\n"
    "\n"
    "outTx getx(in inTx x) {\n"
    "  return x;\n"
    "}\n"
    "\n"
    "outTy gety(in inTy y) {\n"
    "  return y;\n"
    "}\n"
    "\n"
    "outTstrokeColor getstrokeColor(in inTstrokeColor strokeColor) {\n"
    "  return strokeColor;\n"
    "}\n"
    "\n"
    "outTstrokeWidth getstrokeWidth(in inTstrokeWidth strokeWidth)  {\n"
    "  return strokeWidth;\n"
    "}\n"
    "\n"
    "////////////////////////////////////////////////////////////////\n"
    "/**\n"
    " * Non-interpolated shader outputs.\n"
    " */\n"
    "flat out uint fPrimitiveId;  // the id of the primitive\n"
    "\n"
    "#if usePerVertColor == 1\n"
    "out vec4 fColor;\n"
    "#else\n"
    "flat out vec4 fColor;\n"
    "#endif\n"
    "\n"
    "void main() {\n"
    "  gl_Position = vec4(float(getx(x)), float(gety(y)), 0.5, 1.0);\n"
    "\n"
    "#if usePerVertColor == 1 || useUstrokeColor\n"
    "  fColor = getstrokeColor(strokeColor);\n"
    "#elif useUniformBuffer == 1\n"
    "  fColor = getstrokeColor(lineData.strokeColor);\n"
    "#endif\n"
    "\n"
    "  // ids from queries go from 0 to numrows-1, but since we're storing\n"
    "  // the ids as unsigned ints, and there isn't a way to specify the\n"
    "  // clear value for secondary buffers, we need to account for that\n"
    "  // offset here\n"
    "#if useUid == 1\n"
    "  fPrimitiveId = id + 1;\n"
    "#elif useUniformBuffer == 1\n"
    "  fPrimitiveId = lineData.id + 1;\n"
    "#endif\n"
    "}\n";

}  // namespace QueryRenderer

#endif  // LINETEMPLATE_VERT_H_
