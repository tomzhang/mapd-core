#ifndef LINETEMPLATE_VERT_H_
#define LINETEMPLATE_VERT_H_

#include <string>

namespace QueryRenderer {
struct LineTemplate_Vert {
  static const std::string source;
};

const std::string LineTemplate_Vert::source =
    "// VERTEX SHADER\n"
    "\n"
    "#version 450 core\n"
    "\n"
    "#define inTx <inTxType>\n"
    "#define outTx <outTxType>\n"
    "\n"
    "#define inTy <inTyType>\n"
    "#define outTy <outTyType>\n"
    "\n"
    "#define inTid <inTidType>\n"
    "#define inTidEnum <inTidEnum>\n"
    "#define usePerVertId <usePerVertId>\n"
    "#if usePerVertId == 1\n"
    "in uint id;\n"
    "#endif\n"
    "\n"
    "\n"
    "in inTx x;\n"
    "in inTy y;\n"
    "\n"
    "#define usePerVertColor <usePerVertColor>\n"
    "#define inTstrokeColor <inTstrokeColorType>\n"
    "#define inTstrokeColorEnum <inTstrokeColorEnum>\n"
    "#define outTstrokeColor <outTstrokeColorType>\n"
    "#define outTstrokeColorEnum <outTstrokeColorEnum>\n"
    "\n"
    "#if usePerVertColor == 1\n"
    "in inTstrokeColor strokeColor;\n"
    "#endif\n"
    "\n"
    "#define usePerVertWidth <usePerVertWidth>\n"
    "#define inTstrokeWidth <inTstrokeWidthType>\n"
    "#define outTstrokeWidth <outTstrokeWidthType>\n"
    "\n"
    "#if usePerVertWidth == 1\n"
    "in inTstrokeWidth strokeWidth;\n"
    "#endif\n"
    "\n"
    "\n"
    "#define useUniformBuffer <useUniformBuffer>\n"
    "#if useUniformBuffer == 1\n"
    "<lineData>\n"
    "#endif\n"
    "\n"
    "outTx getx(in inTx x) {\n"
    "  return x;\n"
    "}\n"
    "\n"
    "outTy gety(in inTy y) {\n"
    "  return y;\n"
    "}\n"
    "\n"
    "#if usePerVertColor == 1\n"
    // TODO(croot): create a set of color utility functions that
    // can be added #include -- need to create the utility functions
    // and create an ability to #include utilities
    "subroutine vec4 TransformColorToRGBSubroutine(in vec4);\n"
    "subroutine uniform TransformColorToRGBSubroutine transformColorToRGB;\n"
    "subroutine(TransformColorToRGBSubroutine) vec4 transformRGBtoRGB(in vec4 incolorRGB) {\n"
    "    return incolorRGB;\n"
    "}\n"
    "\n"
    "subroutine(TransformColorToRGBSubroutine) vec4 transformHSLtoRGB(in vec4 incolorHSL) {\n"
    "    float h = mod(incolorHSL[0], 360.0), s = incolorHSL[1], l = incolorHSL[2];\n"
    "    if (h < 0) {\n"
    "        h += 360.0;\n"
    "    }\n"
    "    float r = 0, g = 0, b = 0;\n"
    "    float C = s * (1 - abs(2 * l - 1));\n"
    "    float X = C * (1 - abs(mod(h / 60.0, 2.0) - 1));\n"
    "    float m = l - C / 2.0;\n"
    "\n"
    "    int huecat = int(h / 60.0);\n"
    "    if (huecat == 0) {\n"
    "        r = C;\n"
    "        g = X;\n"
    "    } else if (huecat == 1) {\n"
    "        r = X;\n"
    "        g = C;\n"
    "    } else if (huecat == 2) {\n"
    "        g = C;\n"
    "        b = X;\n"
    "    } else if (huecat == 3) {\n"
    "        g = X;\n"
    "        b = C;\n"
    "    } else if (huecat == 4) {\n"
    "        r = X;\n"
    "        b = C;\n"
    "    } else {\n"
    "        r = C;\n"
    "        b = X;\n"
    "    }\n"
    "\n"
    "    return vec4(r + m, g + m, b + m, incolorHSL[3]);\n"
    "}\n"
    "\n"
    "const float Kn = 18,\n"
    "              Xn = 0.950470,  // D65 standard referent\n"
    "              Yn = 1, Zn = 1.088830, \n"
    "              t0 = 4.0 / 29.0, t1 = 6.0 / 29.0,\n"
    "              t2 = 3.0 * pow(6.0 / 29.0, 2.0),\n"
    "              t3 = pow(6.0 / 29.0, 3.0);\n"
    "\n"
    "float xyz2rgb(in float xyzchannel) {\n"
    "    return (xyzchannel <= 0.0031308 ? 12.92 * xyzchannel : 1.055 * pow(xyzchannel, 1 / 2.4) - 0.055);\n"
    "}\n"
    "\n"
    "float lab2xyz(in float labchannel) {\n"
    "    return (labchannel > t1 ? labchannel * labchannel * labchannel : t2 * (labchannel - t0));\n"
    "}\n"
    "\n"
    "subroutine(TransformColorToRGBSubroutine) vec4 transformLABtoRGB(in vec4 incolorLAB) {\n"
    "    float y = (incolorLAB[0] + 16.0) / 116.0, x = isnan(incolorLAB[1]) ? y : y + incolorLAB[1] / 500.0,\n"
    "          z = isnan(incolorLAB[2]) ? y : y - incolorLAB[2] / 200.0;\n"
    "    y = Yn * lab2xyz(y);\n"
    "    x = Xn * lab2xyz(x);\n"
    "    z = Zn * lab2xyz(z);\n"
    "    return vec4(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z),  // D65 -> sRGB\n"
    "                xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n"
    "                xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n"
    "                incolorLAB.a);\n"
    "}\n"
    "\n"
    "subroutine(TransformColorToRGBSubroutine) vec4 transformHCLtoRGB(in vec4 incolorHCL) {\n"
    "    float h = radians(incolorHCL[0]);\n"
    "    return transformLABtoRGB(vec4(incolorHCL[2], cos(h) * incolorHCL[1], sin(h) * incolorHCL[1], "
    "incolorHCL[3]));\n"
    "}\n"
    "\n"
    "subroutine vec4 UnpackColorSubroutine(in uint);\n"
    "subroutine uniform UnpackColorSubroutine unpackColor;\n"
    "subroutine(UnpackColorSubroutine) vec4 unpackRGBAColor(in uint incolorRGB) {\n"
    "    vec4 color;\n"
    "    color.r = float((incolorRGB >> 24) & 0xFF) / 255.0;\n"
    "    color.g = float((incolorRGB >> 16) & 0xFF) / 255.0;\n"
    "    color.b = float((incolorRGB >> 8) & 0xFF) / 255.0;\n"
    "    color.a = float(incolorRGB & 0xFF) / 255.0;\n"
    "    return color;\n"
    "}\n"
    "\n"
    "subroutine(UnpackColorSubroutine) vec4 unpackLABColor(in uint incolorLAB) {\n"
    "    vec4 color;\n"
    "    color.r = 100.0 * (float((incolorLAB >> 24) & 0xFF) / 255.0);\n"
    "    color.g = 256.0 * (float((incolorLAB >> 16) & 0xFF) / 255.0) - 128.0;\n"
    "    color.b = 256.0 * (float((incolorLAB >> 8) & 0xFF) / 255.0) - 128.0;\n"
    "    color.a = float(incolorLAB & 0xFF) / 255.0;\n"
    "    return color;\n"
    "}\n"
    "\n"
    "outTstrokeColor getstrokeColor(in inTstrokeColor strokeColor) {\n"
    "#if (inTstrokeColorEnum == INT || inTstrokeColorEnum == UNSIGNED_INT) && outTstrokeColorEnum == FLOAT_VEC4\n"
    "    return unpackColor(strokeColor);\n"
    "#else\n"
    "    return strokeColor;\n"
    "#endif\n"
    "}\n"
    "#endif\n"
    "\n"
    "#if usePerVertWidth == 1\n"
    "outTstrokeWidth getstrokeWidth(in inTstrokeWidth strokeWidth)  {\n"
    "  return strokeWidth;\n"
    "}\n"
    "#endif\n"
    "\n"
    "// viewport data\n"
    "struct Viewport\n"
    "{\n"
    "    int x;\n"
    "    int y;\n"
    "    int width;\n"
    "    int height;\n"
    "};\n"
    "uniform Viewport viewport;\n"
    "\n"
    "vec2 NDCtoScreen(in outTx x, in outTy y) {\n"
    "  return vec2(float(x + 1) * (float(viewport.width) / 2.0) + viewport.x, float(y + 1) * (float(viewport.height) / "
    "2.0) + viewport.y);\n"
    "}\n"
    "\n"
    "#if usePerVertId == 1\n"
    "out inTid gId;\n"
    "#endif\n"
    "\n"
    "#if usePerVertColor == 1\n"
    "out vec4 gColor;\n"
    "#endif\n"
    "\n"
    "#if usePerVertWidth == 1\n"
    "out float gWidth;\n"
    "#endif\n"
    "\n"
    "void main() {\n"
    "  gl_Position = vec4(NDCtoScreen(getx(x), gety(y)), 0.5, 1.0);\n"
    "\n"
    "#if usePerVertId\n"
    "  gId = id;\n"
    "#endif\n"
    "\n"
    "#if usePerVertColor\n"
    "  gColor = transformColorToRGB(getstrokeColor(strokeColor));\n"
    "#endif\n"
    "\n"
    "#if usePerVertWidth\n"
    "  gWidth = getstrokeWidth(strokeWidth);\n"
    "#endif\n"
    "}\n";

}  // namespace QueryRenderer

#endif  // LINETEMPLATE_VERT_H_
