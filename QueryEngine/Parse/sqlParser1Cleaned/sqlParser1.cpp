#define YY_parse_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from sqlParser1.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#line 1 "sqlParser1.y"

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include "sqlParser1.h" 

#define YYDEBUG 1

#ifdef DEBUG
#define TRACE printf("reduce at line %d\n", __LINE__);
#else
#define TRACE
#endif

/* prototypes */
nodeType *opr(int oper, int nops, ...);
nodeType *id(char *s);
nodeType *id2(char *s);
nodeType *text(char *s);
nodeType *comp(char *s);
nodeType *compAssgn(char *s);
nodeType *con(float value);
void freeNode(nodeType *p);
int ex(nodeType *p);
int yylex(void);

int yyerror(const char *s);

extern int readInputForLexer(char* buffer,int *numBytesRead,int maxBytesToRead);

#line 33 "sqlParser1.y"
typedef union {
    char *sValue;                /* string*/
    char *sName;
    char *sParam;
    nodeType *nPtr;             /* node pointer */
    float fValue;                 /* approximate number */
    int iValue;
    char* sSubtok;      /* comparator subtokens */
    int iLength;
} yy_parse_stype;
#define YY_parse_STYPE yy_parse_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_parse_BISON 1

#ifndef YY_parse_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_parse_COMPATIBILITY 1
 #else
  #define  YY_parse_COMPATIBILITY 0
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_parse_LTYPE
   #define YY_parse_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_parse_STYPE 
   #define YY_parse_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_parse_DEBUG
   #define  YY_parse_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_parse_USE_GOTO
  #define YY_parse_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_parse_USE_GOTO
 #define YY_parse_USE_GOTO 0
#endif

#ifndef YY_parse_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_parse_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_parse_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_parse_DEBUG */
#endif


#ifndef YY_parse_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_parse_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_parse_LSP_NEEDED
#ifndef YY_parse_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_parse_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_parse_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_parse_STYPE
#define YY_parse_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_parse_PARSE
#define YY_parse_PARSE yyparse
#endif
#ifndef YY_parse_LEX
#define YY_parse_LEX yylex
#endif
#ifndef YY_parse_LVAL
#define YY_parse_LVAL yylval
#endif
#ifndef YY_parse_LLOC
#define YY_parse_LLOC yylloc
#endif
#ifndef YY_parse_CHAR
#define YY_parse_CHAR yychar
#endif
#ifndef YY_parse_NERRS
#define YY_parse_NERRS yynerrs
#endif
#ifndef YY_parse_DEBUG_FLAG
#define YY_parse_DEBUG_FLAG yydebug
#endif
#ifndef YY_parse_ERROR
#define YY_parse_ERROR yyerror
#endif

#ifndef YY_parse_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_parse_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_parse_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_parse_PARSE_PARAM
  #define YY_parse_PARSE_PARAM void
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_parse_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_parse_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_parse_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_parse_PURE
#  ifndef YYPURE
#    define YYPURE YY_parse_PURE
#  endif
#endif

#ifdef YY_parse_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_parse_DEBUG 
#  endif
#endif

#ifndef YY_parse_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_parse_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_parse_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_parse_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	NAME	258
#define	STRING	259
#define	INTNUM	260
#define	APPROXNUM	261
#define	OR	262
#define	AND	263
#define	NOT	264
#define	COMPARISON	265
#define	UMINUS	266
#define	ALL	267
#define	BETWEEN	268
#define	BY	269
#define	DISTINCT	270
#define	FROM	271
#define	GROUP	272
#define	HAVING	273
#define	SELECT	274
#define	USER	275
#define	WHERE	276
#define	WITH	277
#define	EMPTY	278
#define	SELALL	279
#define	DOT	280
#define	UPDATE	281
#define	SET	282
#define	CURRENT	283
#define	OF	284
#define	NULLX	285
#define	ASSIGN	286
#define	INSERT	287
#define	INTO	288
#define	VALUES	289
#define	CREATE	290
#define	TABLE	291
#define	UNIQUE	292
#define	PRIMARY	293
#define	FOREIGN	294
#define	KEY	295
#define	CHECK	296
#define	REFERENCES	297
#define	DEFAULT	298
#define	DROP	299
#define	DATATYPE	300
#define	DECIMAL	301
#define	SMALLINT	302
#define	NUMERIC	303
#define	CHARACTER	304
#define	INTEGER	305
#define	REAL	306
#define	FLOAT	307
#define	DOUBLE	308
#define	PRECISION	309
#define	VARCHAR	310
#define	AMMSC	311
#define	AVG	312
#define	MAX	313
#define	MIN	314
#define	SUM	315
#define	COUNT	316
#define	ALIAS	317
#define	INTORDER	318
#define	COLORDER	319
#define	AS	320
#define	ORDER	321
#define	ASC	322
#define	DESC	323
#define	LIMIT	324
#define	OFFSET	325


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_parse_CLASS
#define YY_parse_CLASS parse
#endif
#ifndef YY_parse_INHERIT
#define YY_parse_INHERIT
#endif
#ifndef YY_parse_MEMBERS
#define YY_parse_MEMBERS 
#endif
#ifndef YY_parse_LEX_BODY
#define YY_parse_LEX_BODY  
#endif
#ifndef YY_parse_ERROR_BODY
#define YY_parse_ERROR_BODY  
#endif
#ifndef YY_parse_CONSTRUCTOR_PARAM
#define YY_parse_CONSTRUCTOR_PARAM
#endif
#ifndef YY_parse_CONSTRUCTOR_CODE
#define YY_parse_CONSTRUCTOR_CODE
#endif
#ifndef YY_parse_CONSTRUCTOR_INIT
#define YY_parse_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_parse_USE_CONST_TOKEN
#define YY_parse_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_parse_USE_CONST_TOKEN != 0
#ifndef YY_parse_ENUM_TOKEN
#define YY_parse_ENUM_TOKEN yy_parse_enum_token
#endif
#endif

class YY_parse_CLASS YY_parse_INHERIT
{
public: 
#if YY_parse_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int NAME;
static const int STRING;
static const int INTNUM;
static const int APPROXNUM;
static const int OR;
static const int AND;
static const int NOT;
static const int COMPARISON;
static const int UMINUS;
static const int ALL;
static const int BETWEEN;
static const int BY;
static const int DISTINCT;
static const int FROM;
static const int GROUP;
static const int HAVING;
static const int SELECT;
static const int USER;
static const int WHERE;
static const int WITH;
static const int EMPTY;
static const int SELALL;
static const int DOT;
static const int UPDATE;
static const int SET;
static const int CURRENT;
static const int OF;
static const int NULLX;
static const int ASSIGN;
static const int INSERT;
static const int INTO;
static const int VALUES;
static const int CREATE;
static const int TABLE;
static const int UNIQUE;
static const int PRIMARY;
static const int FOREIGN;
static const int KEY;
static const int CHECK;
static const int REFERENCES;
static const int DEFAULT;
static const int DROP;
static const int DATATYPE;
static const int DECIMAL;
static const int SMALLINT;
static const int NUMERIC;
static const int CHARACTER;
static const int INTEGER;
static const int REAL;
static const int FLOAT;
static const int DOUBLE;
static const int PRECISION;
static const int VARCHAR;
static const int AMMSC;
static const int AVG;
static const int MAX;
static const int MIN;
static const int SUM;
static const int COUNT;
static const int ALIAS;
static const int INTORDER;
static const int COLORDER;
static const int AS;
static const int ORDER;
static const int ASC;
static const int DESC;
static const int LIMIT;
static const int OFFSET;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_parse_ENUM_TOKEN { YY_parse_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,NAME=258
	,STRING=259
	,INTNUM=260
	,APPROXNUM=261
	,OR=262
	,AND=263
	,NOT=264
	,COMPARISON=265
	,UMINUS=266
	,ALL=267
	,BETWEEN=268
	,BY=269
	,DISTINCT=270
	,FROM=271
	,GROUP=272
	,HAVING=273
	,SELECT=274
	,USER=275
	,WHERE=276
	,WITH=277
	,EMPTY=278
	,SELALL=279
	,DOT=280
	,UPDATE=281
	,SET=282
	,CURRENT=283
	,OF=284
	,NULLX=285
	,ASSIGN=286
	,INSERT=287
	,INTO=288
	,VALUES=289
	,CREATE=290
	,TABLE=291
	,UNIQUE=292
	,PRIMARY=293
	,FOREIGN=294
	,KEY=295
	,CHECK=296
	,REFERENCES=297
	,DEFAULT=298
	,DROP=299
	,DATATYPE=300
	,DECIMAL=301
	,SMALLINT=302
	,NUMERIC=303
	,CHARACTER=304
	,INTEGER=305
	,REAL=306
	,FLOAT=307
	,DOUBLE=308
	,PRECISION=309
	,VARCHAR=310
	,AMMSC=311
	,AVG=312
	,MAX=313
	,MIN=314
	,SUM=315
	,COUNT=316
	,ALIAS=317
	,INTORDER=318
	,COLORDER=319
	,AS=320
	,ORDER=321
	,ASC=322
	,DESC=323
	,LIMIT=324
	,OFFSET=325


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_parse_PARSE (YY_parse_PARSE_PARAM);
 virtual void YY_parse_ERROR(char *msg) YY_parse_ERROR_BODY;
#ifdef YY_parse_PURE
#ifdef YY_parse_LSP_NEEDED
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL,YY_parse_LTYPE *YY_parse_LLOC) YY_parse_LEX_BODY;
#else
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL) YY_parse_LEX_BODY;
#endif
#else
 virtual int YY_parse_LEX() YY_parse_LEX_BODY;
 YY_parse_STYPE YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
 YY_parse_LTYPE YY_parse_LLOC;
#endif
 int   YY_parse_NERRS;
 int    YY_parse_CHAR;
#endif
#if YY_parse_DEBUG != 0
 int YY_parse_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM);
public:
 YY_parse_MEMBERS 
};
/* other declare folow */
#if YY_parse_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_parse_CLASS::NAME=258;
const int YY_parse_CLASS::STRING=259;
const int YY_parse_CLASS::INTNUM=260;
const int YY_parse_CLASS::APPROXNUM=261;
const int YY_parse_CLASS::OR=262;
const int YY_parse_CLASS::AND=263;
const int YY_parse_CLASS::NOT=264;
const int YY_parse_CLASS::COMPARISON=265;
const int YY_parse_CLASS::UMINUS=266;
const int YY_parse_CLASS::ALL=267;
const int YY_parse_CLASS::BETWEEN=268;
const int YY_parse_CLASS::BY=269;
const int YY_parse_CLASS::DISTINCT=270;
const int YY_parse_CLASS::FROM=271;
const int YY_parse_CLASS::GROUP=272;
const int YY_parse_CLASS::HAVING=273;
const int YY_parse_CLASS::SELECT=274;
const int YY_parse_CLASS::USER=275;
const int YY_parse_CLASS::WHERE=276;
const int YY_parse_CLASS::WITH=277;
const int YY_parse_CLASS::EMPTY=278;
const int YY_parse_CLASS::SELALL=279;
const int YY_parse_CLASS::DOT=280;
const int YY_parse_CLASS::UPDATE=281;
const int YY_parse_CLASS::SET=282;
const int YY_parse_CLASS::CURRENT=283;
const int YY_parse_CLASS::OF=284;
const int YY_parse_CLASS::NULLX=285;
const int YY_parse_CLASS::ASSIGN=286;
const int YY_parse_CLASS::INSERT=287;
const int YY_parse_CLASS::INTO=288;
const int YY_parse_CLASS::VALUES=289;
const int YY_parse_CLASS::CREATE=290;
const int YY_parse_CLASS::TABLE=291;
const int YY_parse_CLASS::UNIQUE=292;
const int YY_parse_CLASS::PRIMARY=293;
const int YY_parse_CLASS::FOREIGN=294;
const int YY_parse_CLASS::KEY=295;
const int YY_parse_CLASS::CHECK=296;
const int YY_parse_CLASS::REFERENCES=297;
const int YY_parse_CLASS::DEFAULT=298;
const int YY_parse_CLASS::DROP=299;
const int YY_parse_CLASS::DATATYPE=300;
const int YY_parse_CLASS::DECIMAL=301;
const int YY_parse_CLASS::SMALLINT=302;
const int YY_parse_CLASS::NUMERIC=303;
const int YY_parse_CLASS::CHARACTER=304;
const int YY_parse_CLASS::INTEGER=305;
const int YY_parse_CLASS::REAL=306;
const int YY_parse_CLASS::FLOAT=307;
const int YY_parse_CLASS::DOUBLE=308;
const int YY_parse_CLASS::PRECISION=309;
const int YY_parse_CLASS::VARCHAR=310;
const int YY_parse_CLASS::AMMSC=311;
const int YY_parse_CLASS::AVG=312;
const int YY_parse_CLASS::MAX=313;
const int YY_parse_CLASS::MIN=314;
const int YY_parse_CLASS::SUM=315;
const int YY_parse_CLASS::COUNT=316;
const int YY_parse_CLASS::ALIAS=317;
const int YY_parse_CLASS::INTORDER=318;
const int YY_parse_CLASS::COLORDER=319;
const int YY_parse_CLASS::AS=320;
const int YY_parse_CLASS::ORDER=321;
const int YY_parse_CLASS::ASC=322;
const int YY_parse_CLASS::DESC=323;
const int YY_parse_CLASS::LIMIT=324;
const int YY_parse_CLASS::OFFSET=325;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_parse_CLASS::token */
#endif
/*apres const  */
YY_parse_CLASS::YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM) YY_parse_CONSTRUCTOR_INIT
{
#if YY_parse_DEBUG != 0
YY_parse_DEBUG_FLAG=0;
#endif
YY_parse_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		276
#define	YYFLAG		-32768
#define	YYNTBASE	80

#define YYTRANSLATE(x) ((unsigned)(x) <= 325 ? yytranslate[x] : 134)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    76,
    77,    13,    11,    78,    12,    79,    14,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    75,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74
};

#if YY_parse_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     9,    10,    14,    16,    18,    25,    29,
    31,    35,    37,    39,    43,    44,    47,    50,    54,    59,
    62,    65,    68,    73,    76,    82,    87,    93,   101,   112,
   117,   119,   123,   124,   128,   130,   134,   137,   140,   141,
   143,   145,   147,   149,   151,   153,   155,   161,   166,   168,
   170,   174,   176,   178,   183,   185,   187,   188,   197,   198,
   200,   204,   208,   212,   218,   223,   225,   227,   234,   237,
   239,   243,   245,   248,   249,   250,   254,   256,   260,   263,
   264,   265,   268,   273,   278,   282,   286,   289,   293,   295,
   297,   299,   303,   310,   316,   318,   322,   326,   330,   334,
   338,   341,   344,   346,   348,   350,   354,   356,   358,   363,
   369,   375,   380,   382,   384,   386,   388,   392,   396,   398,
   403,   405,   410,   412,   417,   424,   426,   431,   438,   440,
   442,   444,   449,   451,   454,   456,   460,   466,   470,   472,
   474,   476,   478,   480,   482
};

static const short yyrhs[] = {    81,
     0,    83,    75,     0,    81,    83,    75,     0,     0,    76,
    92,    77,     0,    84,     0,    85,     0,    39,    40,   128,
    76,    86,    77,     0,    48,    40,   128,     0,    87,     0,
    86,    78,    87,     0,    88,     0,    91,     0,   131,   129,
    89,     0,     0,    89,    90,     0,     9,    34,     0,     9,
    34,    41,     0,     9,    34,    42,    44,     0,    47,   127,
     0,    47,    34,     0,    47,    24,     0,    45,    76,   119,
    77,     0,    46,   128,     0,    46,   128,    76,    92,    77,
     0,    41,    76,    92,    77,     0,    42,    44,    76,    92,
    77,     0,    43,    44,    76,    92,    77,    46,   128,     0,
    43,    44,    76,    92,    77,    46,   128,    76,    92,    77,
     0,    45,    76,   119,    77,     0,   131,     0,    92,    78,
   131,     0,     0,    70,    18,    94,     0,    95,     0,    94,
    78,    95,     0,     5,    96,     0,   130,    96,     0,     0,
    71,     0,    72,     0,    97,     0,   102,     0,   104,     0,
   107,     0,    98,     0,    36,    37,   128,    82,    99,     0,
    38,    76,   100,    77,     0,   108,     0,   101,     0,   100,
    78,   101,     0,   125,     0,    34,     0,    23,   103,   109,
   110,     0,    16,     0,    19,     0,     0,    30,   128,    31,
   105,    25,    32,    33,   132,     0,     0,   106,     0,   105,
    78,   106,     0,   131,    10,   124,     0,   131,    10,    34,
     0,    30,   128,    31,   105,   114,     0,    23,   103,   109,
   110,     0,   123,     0,    13,     0,   111,   114,   115,   117,
    93,   118,     0,    20,   112,     0,   113,     0,   112,    78,
   113,     0,   128,     0,    25,   119,     0,     0,     0,    21,
    18,   116,     0,   130,     0,   116,    78,   130,     0,    22,
   119,     0,     0,     0,    73,     5,     0,    73,     5,    78,
     5,     0,    73,     5,    74,     5,     0,   119,     7,   119,
     0,   119,     8,   119,     0,     9,   119,     0,    76,   119,
    77,     0,   120,     0,   121,     0,   122,     0,   124,    10,
   124,     0,   124,     9,    17,   124,     8,   124,     0,   124,
    17,   124,     8,   124,     0,   124,     0,   123,    78,   124,
     0,   124,    11,   124,     0,   124,    12,   124,     0,   124,
    13,   124,     0,   124,    14,   124,     0,    11,   124,     0,
    12,   124,     0,   125,     0,   130,     0,   126,     0,    76,
   124,    77,     0,   127,     0,    24,     0,   133,    76,    13,
    77,     0,   133,    76,    19,   130,    77,     0,   133,    76,
    16,   124,    77,     0,   133,    76,   124,    77,     0,     4,
     0,     5,     0,     6,     0,     3,     0,     3,    79,     3,
     0,     3,    69,     3,     0,    53,     0,    53,    76,     5,
    77,     0,    59,     0,    59,    76,     5,    77,     0,    52,
     0,    52,    76,     5,    77,     0,    52,    76,     5,    78,
     5,    77,     0,    50,     0,    50,    76,     5,    77,     0,
    50,    76,     5,    78,     5,    77,     0,    54,     0,    51,
     0,    56,     0,    56,    76,     5,    77,     0,    55,     0,
    57,    58,     0,     3,     0,     3,    79,     3,     0,     3,
    79,     3,    79,     3,     0,     3,    69,     3,     0,     3,
     0,     3,     0,    61,     0,    63,     0,    62,     0,    64,
     0,    65,     0
};

#endif

#if (YY_parse_DEBUG != 0) || defined(YY_parse_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   101,   105,   107,   110,   112,   116,   119,   123,   125,   128,
   130,   133,   135,   138,   142,   144,   147,   149,   150,   151,
   152,   153,   154,   155,   156,   159,   161,   162,   164,   166,
   169,   171,   174,   176,   179,   181,   184,   186,   189,   191,
   192,   197,   201,   203,   204,   205,   219,   223,   225,   228,
   230,   233,   235,   238,   245,   247,   248,   251,   256,   258,
   259,   262,   264,   267,   271,   275,   277,   280,   289,   293,
   295,   298,   303,   305,   308,   310,   313,   315,   318,   320,
   323,   325,   326,   327,   330,   332,   333,   334,   335,   338,
   340,   348,   353,   355,   358,   360,   363,   365,   366,   367,
   368,   369,   370,   371,   372,   373,   376,   379,   389,   391,
   392,   393,   396,   398,   399,   402,   404,   405,   409,   411,
   412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
   422,   423,   424,   425,   428,   430,   431,   432,   436,   439,
   442,   444,   445,   446,   447
};

static const char * const yytname[] = {   "$","error","$illegal.","NAME","STRING",
"INTNUM","APPROXNUM","OR","AND","NOT","COMPARISON","'+'","'-'","'*'","'/'","UMINUS",
"ALL","BETWEEN","BY","DISTINCT","FROM","GROUP","HAVING","SELECT","USER","WHERE",
"WITH","EMPTY","SELALL","DOT","UPDATE","SET","CURRENT","OF","NULLX","ASSIGN",
"INSERT","INTO","VALUES","CREATE","TABLE","UNIQUE","PRIMARY","FOREIGN","KEY",
"CHECK","REFERENCES","DEFAULT","DROP","DATATYPE","DECIMAL","SMALLINT","NUMERIC",
"CHARACTER","INTEGER","REAL","FLOAT","DOUBLE","PRECISION","VARCHAR","AMMSC",
"AVG","MAX","MIN","SUM","COUNT","ALIAS","INTORDER","COLORDER","AS","ORDER","ASC",
"DESC","LIMIT","OFFSET","';'","'('","')'","','","'.'","program","sql_list","opt_column_commalist",
"sql","schema","base_table_def","base_table_element_commalist","base_table_element",
"column_def","column_def_opt_list","column_def_opt","table_constraint_def","column_commalist",
"opt_order_by_clause","ordering_spec_commalist","ordering_spec","opt_asc_desc",
"manipulative_statement","insert_statement","values_or_query_spec","insert_atom_commalist",
"insert_atom","select_statement","opt_all_distinct","update_statement_positioned",
"assignment_commalist","assignment","update_statement_searched","query_spec",
"selection","table_exp","from_clause","table_ref_commalist","table_ref","opt_where_clause",
"opt_group_by_clause","column_ref_commalist","opt_having_clause","opt_limit_clause",
"search_condition","predicate","comparison_predicate","between_predicate","scalar_exp_commalist",
"scalar_exp","atom","function_ref","literal","table","data_type","column_ref",
"column","cursor","ammsc",""
};
#endif

static const short yyr1[] = {     0,
    80,    81,    81,    82,    82,    83,    84,    85,    85,    86,
    86,    87,    87,    88,    89,    89,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    91,    91,    91,    91,    91,
    92,    92,    93,    93,    94,    94,    95,    95,    96,    96,
    96,    83,    97,    97,    97,    97,    98,    99,    99,   100,
   100,   101,   101,   102,   103,   103,   103,   104,   105,   105,
   105,   106,   106,   107,   108,   109,   109,   110,   111,   112,
   112,   113,   114,   114,   115,   115,   116,   116,   117,   117,
   118,   118,   118,   118,   119,   119,   119,   119,   119,   120,
   120,   121,   122,   122,   123,   123,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   125,   125,   126,   126,
   126,   126,   127,   127,   127,   128,   128,   128,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   130,   130,   130,   130,   131,   132,
   133,   133,   133,   133,   133
};

static const short yyr2[] = {     0,
     1,     2,     3,     0,     3,     1,     1,     6,     3,     1,
     3,     1,     1,     3,     0,     2,     2,     3,     4,     2,
     2,     2,     4,     2,     5,     4,     5,     7,    10,     4,
     1,     3,     0,     3,     1,     3,     2,     2,     0,     1,
     1,     1,     1,     1,     1,     1,     5,     4,     1,     1,
     3,     1,     1,     4,     1,     1,     0,     8,     0,     1,
     3,     3,     3,     5,     4,     1,     1,     6,     2,     1,
     3,     1,     2,     0,     0,     3,     1,     3,     2,     0,
     0,     2,     4,     4,     3,     3,     2,     3,     1,     1,
     1,     3,     6,     5,     1,     3,     3,     3,     3,     3,
     2,     2,     1,     1,     1,     3,     1,     1,     4,     5,
     5,     4,     1,     1,     1,     1,     3,     3,     1,     4,
     1,     4,     1,     4,     6,     1,     4,     6,     1,     1,
     1,     4,     1,     2,     1,     3,     5,     3,     1,     1,
     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    57,     0,     0,     0,     0,     1,     0,     6,     7,    42,
    46,    43,    44,    45,    55,    56,     0,   116,     0,     0,
     0,     0,     0,     2,   135,   113,   114,   115,     0,     0,
    67,   108,   141,   143,   142,   144,   145,     0,     0,    66,
    95,   103,   105,   107,   104,     0,     0,     0,    59,     4,
     0,     9,     3,     0,     0,   101,   102,     0,     0,    54,
    74,     0,     0,     0,     0,     0,     0,   118,   117,   139,
    74,    60,     0,     0,     0,     0,   138,   136,   106,    69,
    70,    72,     0,    75,    96,    97,    98,    99,   100,     0,
     0,     0,     0,     0,     0,    64,     0,     0,    31,    57,
     0,    47,    49,     0,     0,     0,     0,     0,    10,    12,
    13,     0,     0,     0,     0,     0,    73,    89,    90,    91,
     0,     0,    80,   109,     0,     0,   112,     0,    61,    63,
    62,     5,     0,     0,     0,     0,     0,     0,     0,     8,
     0,   126,   130,   123,   119,   129,   133,   131,     0,   121,
    15,   137,    71,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    33,   111,   110,     0,    32,     0,    53,
     0,    50,    52,     0,     0,     0,     0,    11,     0,     0,
     0,     0,   134,     0,    14,    88,    85,    86,     0,    92,
     0,    76,    77,    79,     0,    81,   140,    58,    65,    48,
     0,    26,     0,     0,    30,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,     0,     0,
    68,    51,    27,     0,   127,     0,   124,     0,   120,   132,
   122,    17,     0,    24,    22,    21,    20,     0,    94,    78,
    39,    34,    35,    39,    82,     0,     0,     0,    18,     0,
     0,     0,    93,    40,    41,    37,     0,    38,     0,     0,
    28,   128,   125,    19,    23,     0,    36,    84,    83,     0,
    25,     0,    29,     0,     0,     0
};

static const short yydefgoto[] = {   274,
     6,    75,     7,     8,     9,   108,   109,   110,   185,   215,
   111,    98,   196,   242,   243,   256,    10,    11,   102,   171,
   172,    12,    17,    13,    71,    72,    14,   103,    39,    60,
    61,    80,    81,    84,   123,   192,   164,   221,   117,   118,
   119,   120,    40,   121,    42,    43,    44,    82,   151,    45,
    99,   198,    46
};

static const short yypact[] = {   204,
    43,    18,     4,    20,    27,   204,     1,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   119,   -39,    42,    18,
    18,    18,     5,-32768,   -34,-32768,-32768,-32768,   227,   227,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   227,    66,    19,
   158,-32768,-32768,-32768,-32768,    16,    96,   105,   133,    85,
    87,-32768,-32768,   139,   165,-32768,-32768,    57,    18,-32768,
   183,   227,   227,   227,   227,   227,    90,-32768,-32768,-32768,
   -14,-32768,   193,   133,     6,   157,-32768,   131,-32768,   143,
-32768,-32768,   185,   205,   158,    91,    91,-32768,-32768,   151,
   227,   242,    71,   153,   133,-32768,   201,    38,-32768,    43,
   179,-32768,-32768,   184,   210,   231,   208,    49,-32768,-32768,
-32768,   217,   282,    18,   185,   185,   113,-32768,-32768,-32768,
   269,   275,   265,-32768,    99,   218,-32768,   261,-32768,-32768,
   158,-32768,   133,   119,    32,   133,   220,   221,   185,-32768,
   157,   222,-32768,   223,   224,-32768,-32768,   225,   244,   228,
-32768,-32768,-32768,-32768,    -3,    14,   185,   185,   288,   227,
   227,   242,   185,   236,-32768,-32768,   304,-32768,    66,-32768,
    69,-32768,-32768,    72,   133,   133,     0,-32768,   303,   305,
   306,   307,-32768,   308,     8,-32768,   301,-32768,   227,   158,
   127,   237,-32768,   113,   296,   243,-32768,-32768,-32768,-32768,
    32,-32768,    97,   101,-32768,   109,   115,   240,   241,   246,
   285,   248,    18,    83,-32768,   245,   227,   242,    29,   315,
-32768,-32768,-32768,   276,-32768,   316,-32768,   320,-32768,-32768,
-32768,   178,   185,   250,-32768,-32768,-32768,   227,   158,-32768,
   152,   249,-32768,   152,   -13,    18,   251,   252,-32768,   286,
     2,   133,   158,-32768,-32768,-32768,    29,-32768,   326,   327,
   257,-32768,-32768,-32768,-32768,   159,-32768,-32768,-32768,   133,
-32768,   164,-32768,   334,   335,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   330,-32768,-32768,-32768,   196,-32768,-32768,-32768,
-32768,  -133,-32768,-32768,    81,    95,-32768,-32768,-32768,-32768,
   140,-32768,   247,-32768,-32768,   253,-32768,-32768,   206,   173,
-32768,-32768,   229,   273,-32768,-32768,-32768,-32768,  -100,-32768,
-32768,-32768,-32768,   -16,  -123,-32768,   132,    -2,-32768,   -90,
   -43,-32768,-32768
};


#define	YYLAST		348


static const short yytable[] = {    19,
    41,   126,   174,   157,   158,    73,   157,   158,   157,   158,
    94,   173,    56,    57,   154,   155,   211,    50,    51,    52,
    18,    58,   159,   160,    63,    64,    65,    66,   100,    47,
   161,    25,   112,   241,    54,    26,    27,    28,   177,    48,
    20,   203,   204,   101,    55,    85,    86,    87,    88,    89,
    93,    73,   212,   213,   214,    32,   187,   188,    15,    21,
   259,    16,   194,    95,   260,   170,    22,    63,    64,    65,
    66,   193,    49,   186,   125,    24,   205,   173,   265,    53,
   131,    63,    64,    65,    66,    59,    26,    27,    28,   168,
    79,    67,    25,    26,    27,    28,    62,   112,    68,   156,
    29,    30,    90,    65,    66,    91,   235,    69,    92,    63,
    64,    65,    66,    32,   132,   133,   236,    41,   266,   157,
   158,    25,    26,    27,    28,   140,   141,   240,   244,    29,
    30,    31,   251,    79,   217,    70,   272,    63,    64,    65,
    66,    77,    32,   190,   191,   200,   201,   127,   202,   133,
    33,    34,    35,    36,    37,    25,    26,    27,    28,    70,
    74,   115,    76,    29,    30,    38,   244,    78,    63,    64,
    65,    66,   216,   223,   133,   165,    32,   224,   133,    33,
    34,    35,    36,    37,   128,   225,   226,    25,    26,    27,
    28,   227,   228,   115,    38,    29,    30,   104,   105,   106,
   239,   107,    97,    25,    26,    27,    28,    83,    32,   113,
   234,    29,    30,    33,    34,    35,    36,    37,   249,   250,
   114,   253,   254,   255,    32,   122,     1,   124,   116,    25,
    26,    27,    28,     2,   130,   271,   133,    29,    30,     3,
   273,   133,     4,   261,    25,    33,    34,    35,    36,    37,
    32,     5,   238,   137,   135,    63,    64,    65,    66,   136,
   116,    33,    34,    35,    36,    37,   142,   143,   144,   145,
   146,   147,   148,   149,   138,   150,    38,   159,   160,    63,
    64,    65,    66,   139,   152,   161,   163,    33,    34,    35,
    36,    37,   162,   167,   166,   175,   176,   179,   180,   181,
   182,   183,    38,   184,   189,   195,   197,   206,   158,   207,
   208,   209,   210,   219,   218,   220,   229,   230,   232,   245,
   247,   246,   231,   233,   248,   252,   257,   262,   263,   264,
   268,   269,   270,   275,   276,    23,   178,   267,   258,   169,
   222,   199,   153,    96,     0,   237,   134,   129
};

static const short yycheck[] = {     2,
    17,    92,   136,     7,     8,    49,     7,     8,     7,     8,
    25,   135,    29,    30,   115,   116,     9,    20,    21,    22,
     3,    38,     9,    10,    11,    12,    13,    14,    23,    69,
    17,     3,    76,     5,    69,     4,     5,     6,   139,    79,
    37,   175,   176,    38,    79,    62,    63,    64,    65,    66,
    67,    95,    45,    46,    47,    24,   157,   158,    16,    40,
    74,    19,   163,    78,    78,    34,    40,    11,    12,    13,
    14,   162,    31,    77,    91,    75,    77,   201,    77,    75,
    97,    11,    12,    13,    14,    20,     4,     5,     6,   133,
    77,    76,     3,     4,     5,     6,    78,   141,     3,   116,
    11,    12,    13,    13,    14,    16,    24,     3,    19,    11,
    12,    13,    14,    24,    77,    78,    34,   134,   252,     7,
     8,     3,     4,     5,     6,    77,    78,   218,   219,    11,
    12,    13,   233,    77,     8,     3,   270,    11,    12,    13,
    14,     3,    24,   160,   161,    77,    78,    77,    77,    78,
    61,    62,    63,    64,    65,     3,     4,     5,     6,     3,
    76,     9,    76,    11,    12,    76,   257,     3,    11,    12,
    13,    14,   189,    77,    78,    77,    24,    77,    78,    61,
    62,    63,    64,    65,    32,    77,    78,     3,     4,     5,
     6,    77,    78,     9,    76,    11,    12,    41,    42,    43,
   217,    45,    10,     3,     4,     5,     6,    25,    24,    79,
   213,    11,    12,    61,    62,    63,    64,    65,    41,    42,
    78,   238,    71,    72,    24,    21,    23,    77,    76,     3,
     4,     5,     6,    30,    34,    77,    78,    11,    12,    36,
    77,    78,    39,   246,     3,    61,    62,    63,    64,    65,
    24,    48,     8,    44,    76,    11,    12,    13,    14,    76,
    76,    61,    62,    63,    64,    65,    50,    51,    52,    53,
    54,    55,    56,    57,    44,    59,    76,     9,    10,    11,
    12,    13,    14,    76,     3,    17,    22,    61,    62,    63,
    64,    65,    18,    33,    77,    76,    76,    76,    76,    76,
    76,    58,    76,    76,    17,    70,     3,     5,     8,     5,
     5,     5,     5,    18,    78,    73,    77,    77,    34,     5,
     5,    46,    77,    76,     5,    76,    78,    77,    77,    44,
     5,     5,    76,     0,     0,     6,   141,   257,   244,   134,
   201,   169,   114,    71,    -1,   214,   100,    95
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_parse_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_parse_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_parse_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_parse_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_parse_CHAR = (token), YY_parse_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_parse_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_parse_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_parse_PURE
/* UNPURE */
#define YYLEX           YY_parse_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_parse_CHAR;                      /*  the lookahead symbol        */
YY_parse_STYPE      YY_parse_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_parse_NERRS;                 /*  number of parse errors so far */
#ifdef YY_parse_LSP_NEEDED
YY_parse_LTYPE YY_parse_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_parse_LSP_NEEDED
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL, &YY_parse_LLOC)
#else
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_parse_DEBUG != 0
int YY_parse_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_parse_CLASS::
#endif
     YY_parse_PARSE(YY_parse_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_parse_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_parse_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_parse_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_parse_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_parse_LTYPE *yyls = yylsa;
  YY_parse_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_parse_PURE
  int YY_parse_CHAR;
  YY_parse_STYPE YY_parse_LVAL;
  int YY_parse_NERRS;
#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE YY_parse_LLOC;
#endif
#endif

  YY_parse_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_parse_NERRS = 0;
  YY_parse_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_parse_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_parse_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_parse_LSP_NEEDED
      YY_parse_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_parse_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_parse_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_parse_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_parse_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_parse_LSP_NEEDED
      yyls = (YY_parse_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_parse_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_parse_CHAR == YYEMPTY)
    {
#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_parse_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_parse_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_parse_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_parse_CHAR);

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_parse_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_parse_CHAR, YY_parse_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_parse_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_parse_CHAR != YYEOF)
    YY_parse_CHAR = YYEMPTY;

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 102 "sqlParser1.y"
{ exit(0);;
    break;}
case 2:
#line 106 "sqlParser1.y"
{ ex(yyvsp[-1].nPtr); freeNode(yyvsp[-1].nPtr); ;
    break;}
case 3:
#line 107 "sqlParser1.y"
{ freeNode(yyvsp[-1].nPtr); ;
    break;}
case 4:
#line 111 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 5:
#line 112 "sqlParser1.y"
{ yyval.nPtr = yyvsp[-1].nPtr; ;
    break;}
case 6:
#line 116 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 7:
#line 120 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 8:
#line 124 "sqlParser1.y"
{ yyval.nPtr = opr(CREATE, 2, opr(TABLE, 1, yyvsp[-3].nPtr), yyvsp[-1].nPtr); ;
    break;}
case 9:
#line 125 "sqlParser1.y"
{ yyval.nPtr = opr(DROP, 1, opr(TABLE, 1, yyvsp[0].nPtr)); ;
    break;}
case 10:
#line 129 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 11:
#line 130 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 12:
#line 134 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 13:
#line 135 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 14:
#line 139 "sqlParser1.y"
{ yyval.nPtr = opr(DATATYPE, 3, yyvsp[-2].nPtr, yyvsp[-1].nPtr, yyvsp[0].nPtr); ;
    break;}
case 15:
#line 143 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 16:
#line 144 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-1].nPtr, yyvsp[0].nPtr); ;
    break;}
case 17:
#line 148 "sqlParser1.y"
{ yyval.nPtr = opr(NOT, 1, opr(NULLX, 0)); ;
    break;}
case 18:
#line 149 "sqlParser1.y"
{ yyval.nPtr = opr(UNIQUE, 1, opr(NOT, 1, opr(NULLX, 0))); ;
    break;}
case 19:
#line 150 "sqlParser1.y"
{ yyval.nPtr = opr(KEY, 1, opr(PRIMARY, 1, opr(NOT, 1, opr(NULLX, 0)))); ;
    break;}
case 20:
#line 151 "sqlParser1.y"
{ yyval.nPtr = opr(DEFAULT, 1, yyvsp[0].nPtr); ;
    break;}
case 21:
#line 152 "sqlParser1.y"
{ yyval.nPtr = opr(DEFAULT, 1, opr(NULLX, 0)); ;
    break;}
case 22:
#line 153 "sqlParser1.y"
{ yyval.nPtr = opr(DEFAULT, 1, opr(USER, 0)); ;
    break;}
case 23:
#line 154 "sqlParser1.y"
{ yyval.nPtr = opr(CHECK, 1, yyvsp[-1].nPtr); ;
    break;}
case 24:
#line 155 "sqlParser1.y"
{ yyval.nPtr = opr(REFERENCES, 1, yyvsp[0].nPtr); ;
    break;}
case 25:
#line 156 "sqlParser1.y"
{ yyval.nPtr = opr(REFERENCES, 2, yyvsp[-3].nPtr, yyvsp[-1].nPtr); ;
    break;}
case 26:
#line 160 "sqlParser1.y"
{ yyval.nPtr = opr(UNIQUE, 1, yyvsp[-1].nPtr); ;
    break;}
case 27:
#line 161 "sqlParser1.y"
{ yyval.nPtr = opr(KEY, 1, opr(PRIMARY, 1, yyvsp[-1].nPtr)); ;
    break;}
case 28:
#line 163 "sqlParser1.y"
{ yyval.nPtr = opr(KEY, 2, opr(FOREIGN, 1, yyvsp[-3].nPtr), opr(REFERENCES, 1, yyvsp[0].nPtr)); ;
    break;}
case 29:
#line 165 "sqlParser1.y"
{ yyval.nPtr = opr(KEY, 2, opr(FOREIGN, 1, yyvsp[-6].nPtr), opr(REFERENCES, 2, yyvsp[-3].nPtr, yyvsp[-1].nPtr)); ;
    break;}
case 30:
#line 166 "sqlParser1.y"
{ yyval.nPtr = opr(CHECK, 1, yyvsp[-1].nPtr); ;
    break;}
case 31:
#line 170 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 32:
#line 171 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 33:
#line 175 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 34:
#line 176 "sqlParser1.y"
{ yyval.nPtr = opr(ORDER, 1, opr(BY, 1, yyvsp[0].nPtr)); ;
    break;}
case 35:
#line 180 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 36:
#line 181 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 37:
#line 185 "sqlParser1.y"
{ yyval.nPtr = opr(INTORDER, 2, con(yyvsp[-1].iValue), yyvsp[0].nPtr); ;
    break;}
case 38:
#line 186 "sqlParser1.y"
{ yyval.nPtr = opr(COLORDER, 2, yyvsp[-1].nPtr, yyvsp[0].nPtr); ;
    break;}
case 39:
#line 190 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 40:
#line 191 "sqlParser1.y"
{ yyval.nPtr = opr(ASC, 0); ;
    break;}
case 41:
#line 192 "sqlParser1.y"
{ yyval.nPtr = opr(DESC, 0); ;
    break;}
case 42:
#line 198 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 43:
#line 202 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 44:
#line 203 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 45:
#line 204 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 46:
#line 205 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 47:
#line 220 "sqlParser1.y"
{ yyval.nPtr = opr(INSERT, 3, opr(INTO, 1, yyvsp[-2].nPtr), yyvsp[-1].nPtr, yyvsp[0].nPtr); ;
    break;}
case 48:
#line 224 "sqlParser1.y"
{ yyval.nPtr = opr(VALUES, 1, yyvsp[-1].nPtr); ;
    break;}
case 49:
#line 225 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 50:
#line 229 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 51:
#line 230 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 52:
#line 234 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 53:
#line 235 "sqlParser1.y"
{ yyval.nPtr = NULL; ;
    break;}
case 54:
#line 241 "sqlParser1.y"
{ yyval.nPtr = opr(SELECT, 3, yyvsp[-2].nPtr, yyvsp[-1].nPtr, yyvsp[0].nPtr); ;
    break;}
case 55:
#line 246 "sqlParser1.y"
{ yyval.nPtr = opr(ALL, 0); ;
    break;}
case 56:
#line 247 "sqlParser1.y"
{ yyval.nPtr = opr(DISTINCT, 0); ;
    break;}
case 57:
#line 248 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 58:
#line 253 "sqlParser1.y"
{ yyval.nPtr = opr(UPDATE, 5, yyvsp[-6].nPtr, opr(SET, 1, yyvsp[-4].nPtr), opr(WHERE, 0), opr(CURRENT, 0), opr(OF, 1, yyvsp[0].nPtr)); ;
    break;}
case 59:
#line 257 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 60:
#line 258 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr;;
    break;}
case 61:
#line 259 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 62:
#line 263 "sqlParser1.y"
{ yyval.nPtr = opr(ASSIGN, 3, yyvsp[-2].nPtr, compAssgn(yyvsp[-1].sSubtok), yyvsp[0].nPtr); ;
    break;}
case 63:
#line 264 "sqlParser1.y"
{ yyval.nPtr = opr(ASSIGN, 3, yyvsp[-2].nPtr, compAssgn(yyvsp[-1].sSubtok), opr(NULLX, 0)); ;
    break;}
case 64:
#line 268 "sqlParser1.y"
{ yyval.nPtr = opr(UPDATE, 3, yyvsp[-3].nPtr, opr(SET, 1, yyvsp[-1].nPtr), yyvsp[0].nPtr); ;
    break;}
case 65:
#line 272 "sqlParser1.y"
{ yyval.nPtr = opr(SELECT, 3, yyvsp[-2].nPtr, yyvsp[-1].nPtr, yyvsp[0].nPtr); ;
    break;}
case 66:
#line 276 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 67:
#line 277 "sqlParser1.y"
{ yyval.nPtr = opr(SELALL, 0); ;
    break;}
case 68:
#line 286 "sqlParser1.y"
{ yyval.nPtr = opr(FROM, 6, yyvsp[-5].nPtr, yyvsp[-4].nPtr, yyvsp[-3].nPtr, yyvsp[-2].nPtr, yyvsp[-1].nPtr, yyvsp[0].nPtr); ;
    break;}
case 69:
#line 290 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 70:
#line 294 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 71:
#line 295 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 72:
#line 299 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 73:
#line 304 "sqlParser1.y"
{ yyval.nPtr = opr(WHERE, 1, yyvsp[0].nPtr); ;
    break;}
case 74:
#line 305 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 75:
#line 309 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 76:
#line 310 "sqlParser1.y"
{ yyval.nPtr = opr(GROUP, 1, opr(BY, 1, yyvsp[0].nPtr)); ;
    break;}
case 77:
#line 314 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 78:
#line 315 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 79:
#line 319 "sqlParser1.y"
{ yyval.nPtr = opr(HAVING, 1, yyvsp[0].nPtr); ;
    break;}
case 80:
#line 320 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 81:
#line 324 "sqlParser1.y"
{ yyval.nPtr = opr(EMPTY, 0); ;
    break;}
case 82:
#line 325 "sqlParser1.y"
{ yyval.nPtr = opr(LIMIT, 1, con(yyvsp[0].iValue)); ;
    break;}
case 83:
#line 326 "sqlParser1.y"
{ yyval.nPtr = opr(LIMIT, 2, con(yyvsp[-2].iValue), con(yyvsp[0].iValue)); ;
    break;}
case 84:
#line 327 "sqlParser1.y"
{ yyval.nPtr = opr(LIMIT, 2, con(yyvsp[-2].iValue), con(yyvsp[0].iValue)); ;
    break;}
case 85:
#line 331 "sqlParser1.y"
{ yyval.nPtr = opr(OR, 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 86:
#line 332 "sqlParser1.y"
{ yyval.nPtr = opr(AND, 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 87:
#line 333 "sqlParser1.y"
{ yyval.nPtr = opr(NOT, 1, yyvsp[0].nPtr); ;
    break;}
case 88:
#line 334 "sqlParser1.y"
{ yyval.nPtr = yyvsp[-1].nPtr; ;
    break;}
case 89:
#line 335 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 90:
#line 339 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 91:
#line 340 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 92:
#line 349 "sqlParser1.y"
{ yyval.nPtr = opr(COMPARISON, 3, yyvsp[-2].nPtr, comp(yyvsp[-1].sSubtok), yyvsp[0].nPtr); ;
    break;}
case 93:
#line 354 "sqlParser1.y"
{ yyval.nPtr = opr(NOT, 1, opr(BETWEEN, 2, yyvsp[-5].nPtr, opr(AND, 2, yyvsp[-2].nPtr, yyvsp[0].nPtr))); ;
    break;}
case 94:
#line 355 "sqlParser1.y"
{ yyval.nPtr = opr(BETWEEN, 2, yyvsp[-4].nPtr, opr(AND, 2, yyvsp[-2].nPtr, yyvsp[0].nPtr)); ;
    break;}
case 95:
#line 359 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 96:
#line 360 "sqlParser1.y"
{ yyval.nPtr = opr(',', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 97:
#line 364 "sqlParser1.y"
{ yyval.nPtr = opr('+', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 98:
#line 365 "sqlParser1.y"
{ yyval.nPtr = opr('-', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 99:
#line 366 "sqlParser1.y"
{ yyval.nPtr = opr('*', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 100:
#line 367 "sqlParser1.y"
{ yyval.nPtr = opr('/', 2, yyvsp[-2].nPtr, yyvsp[0].nPtr); ;
    break;}
case 101:
#line 368 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 102:
#line 369 "sqlParser1.y"
{ yyval.nPtr = opr(UMINUS, 1, yyvsp[0].nPtr); ;
    break;}
case 103:
#line 370 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 104:
#line 371 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 105:
#line 372 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 106:
#line 373 "sqlParser1.y"
{ yyval.nPtr = yyvsp[-1].nPtr; ;
    break;}
case 107:
#line 378 "sqlParser1.y"
{ yyval.nPtr = yyvsp[0].nPtr; ;
    break;}
case 108:
#line 379 "sqlParser1.y"
{ yyval.nPtr = opr(USER, 0); ;
    break;}
case 109:
#line 390 "sqlParser1.y"
{ yyval.nPtr = opr(AMMSC, 2, yyvsp[-3].nPtr, opr(SELALL, 0));;
    break;}
case 110:
#line 391 "sqlParser1.y"
{ yyval.nPtr = opr(AMMSC, 3, yyvsp[-4].nPtr, opr(DISTINCT, 0), yyvsp[-1].nPtr); ;
    break;}
case 111:
#line 392 "sqlParser1.y"
{ yyval.nPtr = opr(AMMSC, 3, yyvsp[-4].nPtr, opr(ALL, 0), yyvsp[-1].nPtr); ;
    break;}
case 112:
#line 393 "sqlParser1.y"
{ yyval.nPtr = opr(AMMSC, 2, yyvsp[-3].nPtr, yyvsp[-1].nPtr); ;
    break;}
case 113:
#line 397 "sqlParser1.y"
{ yyval.nPtr = text(yyvsp[0].sValue); ;
    break;}
case 114:
#line 398 "sqlParser1.y"
{ yyval.nPtr = con(yyvsp[0].iValue); ;
    break;}
case 115:
#line 399 "sqlParser1.y"
{ yyval.nPtr = con(yyvsp[0].fValue); ;
    break;}
case 116:
#line 403 "sqlParser1.y"
{ yyval.nPtr = id(yyvsp[0].sName); ;
    break;}
case 117:
#line 404 "sqlParser1.y"
{ yyval.nPtr = opr(DOT, 2, id(yyvsp[-2].sName), id2(yyvsp[0].sName));;
    break;}
case 118:
#line 405 "sqlParser1.y"
{ yyval.nPtr = opr(ALIAS, 2, id(yyvsp[-2].sName), id2(yyvsp[0].sName));  ;
    break;}
case 119:
#line 410 "sqlParser1.y"
{ yyval.nPtr = opr(CHARACTER, 0); ;
    break;}
case 120:
#line 411 "sqlParser1.y"
{ yyval.nPtr = opr(CHARACTER, 1, con(yyvsp[-1].iValue)); ;
    break;}
case 121:
#line 412 "sqlParser1.y"
{ yyval.nPtr = opr(VARCHAR, 0); ;
    break;}
case 122:
#line 413 "sqlParser1.y"
{ yyval.nPtr = opr(VARCHAR, 1, con(yyvsp[-1].iValue)); ;
    break;}
case 123:
#line 414 "sqlParser1.y"
{ yyval.nPtr = opr(NUMERIC, 0); ;
    break;}
case 124:
#line 415 "sqlParser1.y"
{ yyval.nPtr = opr(NUMERIC, 1, con(yyvsp[-1].iValue)); ;
    break;}
case 125:
#line 416 "sqlParser1.y"
{ yyval.nPtr = opr(NUMERIC, 1, opr(',', 2, yyvsp[-3].iValue, yyvsp[-1].iValue)); ;
    break;}
case 126:
#line 417 "sqlParser1.y"
{ yyval.nPtr = opr(DECIMAL, 0); ;
    break;}
case 127:
#line 418 "sqlParser1.y"
{ yyval.nPtr = opr(DECIMAL, 1, con(yyvsp[-1].iValue)); ;
    break;}
case 128:
#line 419 "sqlParser1.y"
{ yyval.nPtr = opr(DECIMAL, 1, opr(',', 2, con(yyvsp[-3].iValue), con(yyvsp[-1].iValue))); ;
    break;}
case 129:
#line 420 "sqlParser1.y"
{ yyval.nPtr = opr(INTEGER, 0); ;
    break;}
case 130:
#line 421 "sqlParser1.y"
{ yyval.nPtr = opr(SMALLINT, 0); ;
    break;}
case 131:
#line 422 "sqlParser1.y"
{ yyval.nPtr = opr(FLOAT, 0); ;
    break;}
case 132:
#line 423 "sqlParser1.y"
{ yyval.nPtr = opr(FLOAT, 1, con(yyvsp[-1].iValue)); ;
    break;}
case 133:
#line 424 "sqlParser1.y"
{ yyval.nPtr = opr(REAL, 0); ;
    break;}
case 134:
#line 425 "sqlParser1.y"
{ yyval.nPtr = opr(DOUBLE, 1, opr(PRECISION, 0)); ;
    break;}
case 135:
#line 429 "sqlParser1.y"
{ yyval.nPtr = id(yyvsp[0].sName); ;
    break;}
case 136:
#line 430 "sqlParser1.y"
{ yyval.nPtr = opr(DOT, 2, id(yyvsp[-2].sName), id2(yyvsp[0].sName));;
    break;}
case 137:
#line 431 "sqlParser1.y"
{ yyval.nPtr = opr(DOT, 2, id(yyvsp[-4].sName),  opr(DOT, 2, id(yyvsp[-4].sName), id2(yyvsp[-2].sName)));;
    break;}
case 138:
#line 432 "sqlParser1.y"
{ yyval.nPtr = opr(ALIAS, 2, id(yyvsp[-2].sName), id2(yyvsp[0].sName)); ;
    break;}
case 139:
#line 436 "sqlParser1.y"
{ yyval.nPtr = id(yyvsp[0].sName); ;
    break;}
case 140:
#line 439 "sqlParser1.y"
{ yyval.nPtr = id(yyvsp[0].sName); ;
    break;}
case 141:
#line 443 "sqlParser1.y"
{ yyval.nPtr = opr(AVG, 0); ;
    break;}
case 142:
#line 444 "sqlParser1.y"
{ yyval.nPtr = opr(MIN, 0); ;
    break;}
case 143:
#line 445 "sqlParser1.y"
{ yyval.nPtr = opr(MAX, 0); ;
    break;}
case 144:
#line 446 "sqlParser1.y"
{ yyval.nPtr = opr(SUM, 0); ;
    break;}
case 145:
#line 447 "sqlParser1.y"
{ yyval.nPtr = opr(COUNT, 0); ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_parse_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_parse_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_parse_LLOC.first_line;
      yylsp->first_column = YY_parse_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_parse_NERRS;

#ifdef YY_parse_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_parse_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_parse_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_parse_ERROR_VERBOSE */
	YY_parse_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_parse_CHAR == YYEOF)
	YYABORT;

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_parse_CHAR, yytname[yychar1]);
#endif

      YY_parse_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_parse_LSP_NEEDED
  yylsp--;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 449 "sqlParser1.y"


nodeType *id(char* s) {
    nodeType *p;

    /* allocate node */
    if ((p = malloc(sizeof(nodeType))) == NULL)
        yyerror("out of memory");

    /* copy information */
    p->type = typeId;
    p->id.s = s;
    p->id.iLength = textLength;
    //printf("text: %d %s \n", textLength, s);
    return p;
}

/* backup of id when two names are needed simultaneously, such as Name.Name */
nodeType *id2(char* s) {
    nodeType *p;

    /* allocate node */
    if ((p = malloc(sizeof(nodeType))) == NULL)
        yyerror("out of memory");

    /* copy information */
    p->type = typeId;
    p->id.s = s;
    p->id.iLength = textLength2;
    //Fprintf("text: %d %s \n", textLength2, s);
    return p;
}

/* Handles regular text, as copied by the STRING token. */
nodeType *text(char* s) {
    nodeType *p;

    /* allocate node */
    if ((p = malloc(sizeof(nodeType))) == NULL)
        yyerror("out of memory");

    /* copy information */
    p->type = typeText;
    p->id.s = s;
    p->id.iLength = textLength;
 //   printf("text: %d %s \n", textLength, s);
    return p;
}


nodeType *comp(char* s) {
    nodeType *p;

    /* comparators: =, >, etc. */
    /* allocate node */
    if ((p = malloc(sizeof(nodeType))) == NULL)
        yyerror("out of memory");

    /* copy information */
    p->type = typeComp;
    p->id.s = s;
    p->id.iLength = comparisonLength;
   // printf("comp: %d %s \n", comparisonLength, s);
    return p;
}

/* Treat assignment statements as a comparator. Cheesy, I know. */
nodeType *compAssgn(char* s) {
    nodeType *p;

    /* Treat all comparators: =, >, etc. that appear grammatically as an assignment "=" as that "=".

    To do: Find a workaround that allows the assignment rule to appear properly in the grammar. */
    /* allocate node */
    if ((p = malloc(sizeof(nodeType))) == NULL)
        yyerror("out of memory");

    if (!strcmp(s, "=")) {
        printf("wrong comparator\n");
        fflush(stdout);
        yyerror("wrong comparator");
    }
    /* copy information */
    p->type = typeAssgn;
    p->id.s = "=";
    p->id.iLength = strlen("=");
  //  printf("comp: %d %s \n", comparisonLength, s);
    return p;
}

nodeType *con(float value) {
    nodeType *p;

    /* allocate node */
    if ((p = malloc(sizeof(nodeType))) == NULL)
        yyerror("out of memory");

    /* copy information */
    p->type = typeCon;
    p->con.fValue = value;

    return p;
}

nodeType *opr(int oper, int nops, ...) {
    va_list ap;
    nodeType *p;
    int i;

    /* allocate node */
    if ((p = malloc(sizeof(nodeType))) == NULL)
        yyerror("out of memory");
    if ((p->opr.op = malloc(nops * sizeof(nodeType))) == NULL)
        yyerror("out of memory");

    /* copy information */
    p->type = typeOpr;
    p->opr.oper = oper;
    p->opr.nops = nops;
    va_start(ap, nops);
    for (i = 0; i < nops; i++)
        p->opr.op[i] = va_arg(ap, nodeType*);
    va_end(ap);
    return p;
}

void freeNode(nodeType *p) {
    int i;

    if (!p) return;
    if (p->type == typeOpr) {
        for (i = 0; i < p->opr.nops; i++)
            freeNode(p->opr.op[i]);
		free (p->opr.op);
    }
    free (p);
}

int yyerror(const char *s) {
    fprintf(stdout, "%s\n", s);
    /* should this return 1? */
    return 1;
}



int main(void) {
    int i = yyparse();
    //printf("success? %d\n", i);
    return i;
}